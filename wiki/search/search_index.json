{"config":{"lang":["ja","en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230 SUA Wiki","text":"<p>\u672c\u7ad9\u6536\u5f55 SUA \u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u547d\u9898\u7ec4\u6240\u6709\u516c\u5f00\u8bd5\u9898\u7684\u4fe1\u606f\u4ee5\u53ca\u8be6\u7ec6\u9898\u89e3\u3002\u4e4b\u524d\u7684\u7ade\u8d5b\u5c06\u4f1a\u9010\u6e10\u8865\u5145\u3002</p>"},{"location":"#_1","title":"\u7ade\u8d5b\u5217\u8868","text":"<ul> <li>2024 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u676d\u5dde\u7ad9</li> <li>2024 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9</li> <li>2024 ICPC \u5168\u56fd\u9080\u8bf7\u8d5b\u6606\u660e\u7ad9</li> <li>2024 CCPC \u5168\u56fd\u9080\u8bf7\u8d5b\u5c71\u4e1c\u7ad9\u66a8\u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u6d4e\u5357\u7ad9</li> <li>2023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9</li> <li>2023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9</li> <li>2021 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u6fb3\u95e8\u7ad9</li> <li>2021 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9</li> <li>2021 \u56db\u5ddd\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2020 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9</li> <li>2019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2019 \u6d59\u6c5f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2019 \u6d59\u6c5f\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9</li> <li>2018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b</li> <li>2018 \u6d59\u6c5f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2018 \u6d59\u6c5f\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2017 \u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u79e6\u7687\u5c9b\u7ad9</li> <li>2017 \u6d59\u6c5f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> <li>2017 \u6d59\u6c5f\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b</li> </ul>"},{"location":"2017-ccpc-qinhuangdao/","title":"2017 \u4e2d\u56fd\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b\u79e6\u7687\u5c9b\u7ad9","text":""},{"location":"2017-ccpc-qinhuangdao/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2017/10/29 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board \u5728\u7ebf\u7ec3\u4e60ZOJ 3981 ~ 3993 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2017-ccpc-qinhuangdao/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 87, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 234, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 221, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 75, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 26, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 247, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 196, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 10, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 17, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 29, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 90, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 40, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 38, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2017-ccpc-qinhuangdao/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2017-provincial-zhejiang/","title":"2017 \u6d59\u6c5f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2017-provincial-zhejiang/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2017/04/22 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board \u5728\u7ebf\u7ec3\u4e60ZOJ 3958 ~ 3970 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2017-provincial-zhejiang/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 285, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 259, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 183, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 180, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 47, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 28, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 14, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 25, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 61, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 36, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 110, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 29, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2017-provincial-zhejiang/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2017-provincial-zhejiang/#_4","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>K - Final Defense Line</li> </ul>"},{"location":"2017-provincial-zhejiang/k/","title":"K - Final Defense Line","text":""},{"location":"2017-provincial-zhejiang/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042017 \u6d59\u6c5f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73870/295 (0.0%)"},{"location":"2017-provincial-zhejiang/k/#_2","title":"\u9898\u89e3","text":"<p>\u672c\u9898\u9898\u610f\u53ef\u4ee5\u8f6c\u5316\u5982\u4e0b\uff1a\u7ed9\u5b9a\u4e09\u4e2a\u5706 \\(C_0(x_0, y_0, r_0)\\)\uff0c\\(C_1(x_1, y_1, r_1)\\)\uff0c\\(C_2(x_2, y_2, r_2)\\)\uff0c\u6c42\u6709\u51e0\u4e2a\u5706\u4e0e\u5b83\u4eec\u540c\u65f6\u76f8\u5207\uff0c\u5e76\u6c42\u7b54\u6848\u5706\u7684\u6700\u5c0f\u534a\u5f84\u3002\\(r_i &gt; 0\\) \u8868\u793a\u8981\u6c42\u7b54\u6848\u5706\u4e0e \\(C_i\\) \u5185\u5207\uff0c\u4e14\u7b54\u6848\u5706\u534a\u5f84\u66f4\u5927\uff1b\\(r_i &lt; 0\\) \u8868\u793a\u8981\u6c42\u7b54\u6848\u5706\u4e0e \\(C_i\\) \u5916\u5207\u3002</p> <p>\u8fd9\u5c31\u662f\u8457\u540d\u7684 \u963f\u6ce2\u7f57\u5c3c\u5965\u65af\u95ee\u9898\u3002\u8fd9\u91cc\u4ecb\u7ecd\u4e00\u79cd\u4ee3\u6570\u89e3\u6cd5\u3002</p> <p>\u8bbe\u7b54\u6848\u5706\u4e3a \\(C(x, y, r)\\)\uff0c\u9650\u5236 \\(r \\ge \\max(r_0, r_1, r_2)\\)\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u4ee5\u4e0b\u4e09\u5143\u4e8c\u6b21\u65b9\u7a0b\u7ec4\u7684\u89e3\u3002</p> \\[ (x - x_0)^2 + (y - y_0)^2 - (r - r_0)^2 = 0 \\] \\[ (x - x_1)^2 + (y - y_1)^2 - (r - r_1)^2 = 0 \\] \\[ (x - x_2)^2 + (y - y_2)^2 - (r - r_2)^2 = 0 \\] <p>\u7528 \\(A\\) \u8868\u793a \\((x_0, y_0)\\)\uff0c\\(B\\) \u8868\u793a \\((x_1, y_1)\\)\u3002\u4e0d\u5931\u4e00\u822c\u6027\u5730\uff0c\u6211\u4eec\u628a\u5750\u6807\u8f74\u539f\u70b9\u79fb\u52a8\u5230 \\((x_0, y_0)\\) \u5904\uff0c\u7136\u540e\u628a \\(x\\) \u8f74\u6b63\u65b9\u5411\u65cb\u8f6c\u5230\u5411\u91cf \\(\\overrightarrow{AB}\\) \u7684\u65b9\u5411\uff0c\u7b54\u6848\u7684\u534a\u5f84\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u6837\uff0c\u65b9\u7a0b\u7ec4\u7b80\u5316\u4e3a\uff1a</p> \\[ x^2 + y^2 - (r - r_0)^2 = 0 \\tag{1} \\] \\[ (x - x_1)^2 + y^2 - (r - r_1)^2 = 0 \\tag{2} \\] \\[ (x - x_2)^2 + (y - y_2)^2 - (r - r_2)^2 = 0 \\tag{3} \\] <p>\\((2) - (1)\\) \u5f97</p> \\[ -2x_1 \\cdot x + 2(r_1 - r_0) \\cdot r + (x_1^2 - r_1^2 + r_0^2) = 0 \\tag{4} \\] <p>\\((3) - (1)\\) \u5f97</p> \\[ -2x_2 \\cdot x - 2y_2 \\cdot y + 2(r_2 - r_0) \\cdot r + (x_2^2 + y_2^2 - r_2^2 + r_0^2) = 0 \\tag{5} \\] <p>\u628a \\((4)\\) \u770b\u4f5c \\(a_1 \\cdot x + c_1 \\cdot r + d_1 = 0\\)\uff0c\u628a \\((5)\\) \u770b\u4f5c \\(a_2 \\cdot x + b_2 \\cdot y + c_2 \\cdot r + d_2 = 0\\)\uff0c\u5f97</p> \\[ x = \\frac{-d_1 - c_1 \\cdot r}{a_1} \\tag{6} \\] <p>\u8fd9\u4e00\u6b65\u8981\u6c42 \\(a_1 \\ne 0\\)\u3002\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1\u4e09\u4e2a\u5706\u5fc3\u4e0d\u5728\u540c\u4e00\u4f4d\u7f6e\uff0c\u56e0\u6b64 \\(a_1 = -2x_1 \\ne 0\\) \u662f\u80af\u5b9a\u7684\u3002</p> \\[ y = \\frac{a_2d_1 - a_1d_2 + (a_2c_1 - a_1c_2) \\cdot r}{a_1b_2} \\tag{7} \\] <p>\u8fd9\u4e00\u6b65\u8981\u6c42 \\(a_1 \\ne 0\\) \u4e14 \\(b_2 \\ne 0\\)\u3002\u4f46 \\(b_2 = -2y_2 = 0\\) \u9898\u76ee\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u5b8c\u5168\u662f\u6709\u53ef\u80fd\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5206\u7c7b\u8ba8\u8bba\u3002</p>"},{"location":"2017-provincial-zhejiang/k/#_3","title":"\u4e09\u4e2a\u5706\u5fc3\u5171\u7ebf\u7684\u60c5\u51b5","text":"<p>\u82e5 \\(y_2 = 0\\)\uff08\u5373\u4e09\u4e2a\u5706\u5fc3\u5171\u7ebf\uff09\uff0c\u65b9\u7a0b \\((5)\\) \u4e2d\u552f\u4e00\u4e0e\u672a\u77e5\u6570 \\(y\\) \u6709\u5173\u7684\u9879 \\(-2y_2 \\cdot y\\) \u88ab\u76f4\u63a5\u6d88\u53bb\u3002\u6b64\u65f6\u65b9\u7a0b \\((4)\\) \u548c \\((5)\\) \u5f62\u6210\u4e86\u5173\u4e8e \\(x\\) \u548c \\(r\\) \u7684\u4e8c\u5143\u4e00\u6b21\u65b9\u7a0b\u7ec4\u3002\u7b80\u5316\u540e\u5f97\u5230\u5173\u4e8e \\(r\\) \u7684\u4e00\u6b21\u65b9\u7a0b\uff1a</p> \\[ \\left(\\frac{2(r_1 - r_0)}{x_1} - \\frac{2(r_2 - r_0)}{x_2}\\right) \\cdot r + \\left( \\frac{x_1^2 - r_1^2 + r_0^2}{x_1} - \\frac{x_2^2 - r_2^2 + r_0^2}{x_2} \\right) = 0 \\] <p>\u89e3\u51fa\u8be5\u4e00\u6b21\u65b9\u7a0b\u5373\u53ef\uff0c\u6ce8\u610f\u9996\u5148\u7279\u5224\u4e00\u6b21\u9879\u7cfb\u6570\u662f\u5426\u4e3a \\(0\\) \u6765\u5224\u65ad\u65b9\u7a0b\u662f\u5426\u65e0\u89e3\uff0c\u4ee5\u53ca\u662f\u5426\u6709\u65e0\u6570\u7ec4\u89e3\u3002\u89e3\u51fa \\(r\\) \u540e\uff0c\u6839\u636e\u5f0f \\((6)\\) \u5c31\u80fd\u7b97\u51fa\u552f\u4e00\u5bf9\u5e94\u7684 \\(x\\)\u3002</p> <p>\u7531\u5f0f \\((1)\\) \u5f97 \\(y^2 = (r - r_0)^2 - x^2\\)\uff0c\u56e0\u6b64\u8fd8\u9700\u8981\u5224\u65ad\u7b49\u53f7\u53f3\u8fb9\u662f\u6b63\u662f\u8d1f\u8fd8\u662f\u96f6\uff0c\u6765\u5224\u65ad \\(y\\) \u6709\u51e0\u4e2a\u89e3\u3002</p>"},{"location":"2017-provincial-zhejiang/k/#_4","title":"\u4e09\u4e2a\u5706\u5fc3\u4e0d\u5171\u7ebf\u7684\u60c5\u51b5","text":"<p>\u82e5 \\(y_2 \\ne 0\\)\uff08\u5373\u4e09\u4e2a\u5706\u5fc3\u4e0d\u5171\u7ebf\uff09\uff0c\u6b64\u65f6\u5f0f \\((6)\\) \u548c \\((7)\\) \u624d\u6709\u610f\u4e49\u3002\u5c06\u5f0f \\((6)\\) \u770b\u4f5c \\(x = p_1 + q_1 \\cdot r\\)\uff0c\u5c06\u5f0f \\((7)\\) \u770b\u4f5c \\(y = p_2 + q_2 \\cdot r\\)\uff0c\u5c06\u5b83\u4eec\u4ee3\u56de\u5f0f \\((1)\\)\uff0c\u5f97\u5230\u5173\u4e8e \\(r\\) \u7684\u4e8c\u6b21\u65b9\u7a0b\uff1a</p> \\[ (q_1^2 + q_2^2 - 1) \\cdot r^2 + 2(p_1q_1 + p_2q_2 + r_0) \\cdot r + (p_1^2 + p_2^2 - r_0^2) = 0 \\] <p>\u89e3\u51fa\u8be5\u4e8c\u6b21\u65b9\u7a0b\u5373\u53ef\uff0c\u6ce8\u610f\u7279\u5224\u662f\u5426\u6240\u6709\u7cfb\u6570\u5747\u4e3a \\(0\\) \u770b\u5b83\u662f\u5426\u6709\u65e0\u6570\u7ec4\u89e3\uff0c\u4ee5\u53ca\u4e8c\u6b21\u9879\u7cfb\u6570\u662f\u5426\u4e3a \\(0\\) \u770b\u5b83\u662f\u5426\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u4e00\u6b21\u65b9\u7a0b\u3002\u6bcf\u4e2a \\(r\\) \u6839\u636e\u5f0f \\((6)\\) \u548c \\((7)\\) \u90fd\u80fd\u7b97\u51fa\u552f\u4e00\u5bf9\u5e94\u7684 \\(x\\) \u548c \\(y\\)\u3002</p> <p>\u5355\u7ec4\u6570\u636e\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\)\u3002</p>"},{"location":"2017-provincial-zhejiang/k/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define EPS (1e-9)\nusing namespace std;\ntypedef long double ldb;\n\nint X[3], Y[3], R[3];\n\nint sgn(long double x) {\n    if (x &lt; -EPS) return -1;\n    else if (x &gt; EPS) return 1;\n    else return 0;\n}\n\n// \u5c06 x \u8f74\u65cb\u8f6c\u5230\u5411\u91cf (xb, yb) \u4e0a\uff0c\u6c42\u51fa (x, y) \u65cb\u8f6c\u540e\u5bf9\u5e94\u7684\u5750\u6807\nvoid rotate(ldb xb, ldb yb, ldb &amp;x, ldb &amp;y) {\n    ldb d = sqrt(xb * xb + yb * yb);\n    ldb xx = xb / d * x + yb / d * y;\n    ldb yy = xb / d * y - yb / d * x;\n    x = xx; y = yy;\n}\n\nvoid solve() {\n    for (int i = 0; i &lt; 3; i++) scanf(\"%d%d%d\", &amp;X[i], &amp;Y[i], &amp;R[i]);\n    // \u5c06 (x0, y0) \u79fb\u5230\u5750\u6807\u539f\u70b9\n    ldb x1 = X[1] - X[0], y1 = Y[1] - Y[0];\n    ldb x2 = X[2] - X[0], y2 = Y[2] - Y[0];\n    ldb r0 = R[0], r1 = R[1], r2 = R[2];\n    // \u9650\u5236 r &gt;= max(r0, r1, r2)\n    ldb lim = max({(ldb) 0, r0, r1, r2});\n\n    // \u5c06 x \u8f74\u65cb\u8f6c\u5230\u5411\u91cf (x1, y1) \u4e0a\n    rotate(x1, y1, x2, y2);\n    rotate(x1, y1, x1, y1);\n    assert(sgn(y1) == 0);\n\n    if (sgn(y2) == 0) {\n        // \u4e09\u4e2a\u5706\u5fc3\u5171\u7ebf\n        ldb a = 2 * (r1 - r0) / x1 - 2 * (r2 - r0) / x2;\n        ldb b = x1 + (r0 * r0 - r1 * r1) / x1 - x2 - (r0 * r0 - r2 * r2) / x2;\n        if (sgn(a) == 0) {\n            // \u4e00\u6b21\u65b9\u7a0b\u7684\u4e00\u6b21\u9879\u4e3a 0\uff0c\u7279\u5224\u65e0\u89e3\u4ee5\u53ca\u65e0\u6570\u7ec4\u89e3\n            if (sgn(b) == 0) printf(\"-1\\n\");\n            else printf(\"0\\n\");\n        } else {\n            // \u4e00\u6b21\u65b9\u7a0b\u7684\u4e00\u6b21\u9879\u4e0d\u4e3a 0\uff0c\u6b63\u5e38\u89e3\u65b9\u7a0b\n            ldb rs = -b / a;\n            if (sgn(rs - lim) &lt; 0) printf(\"0\\n\");\n            else {\n                // \u8ba1\u7b97 y^2 \u7684\u503c\n                ldb xs = 2 * (r1 - r0) * rs + x1 * x1 - r1 * r1 + r0 * r0;\n                xs /= 2 * x1;\n                ldb ys2 = (rs - r0) * (rs - r0) - xs * xs;\n                if (sgn(ys2) &lt; 0) printf(\"0\\n\");\n                else if (sgn(ys2) == 0) printf(\"1 %.12Lf\\n\", rs);\n                else printf(\"2 %.12Lf\\n\", rs);\n            }\n        }\n    } else {\n        // \u4e09\u4e2a\u5706\u5fc3\u4e0d\u5171\u7ebf\n        ldb a1 = -2 * x1;\n        ldb c1 = 2 * (r1 - r0);\n        ldb d1 = x1 * x1 - r1 * r1 + r0 * r0;\n        ldb a2 = -2 * x2;\n        ldb b2 = -2 * y2;\n        ldb c2 = 2 * (r2 - r0);\n        ldb d2 = x2 * x2 + y2 * y2 - r2 * r2 + r0 * r0;\n\n        ldb p1 = -d1 / a1;\n        ldb q1 = -c1 / a1;\n        ldb p2 = (a2 * d1 - a1 * d2) / (a1 * b2);\n        ldb q2 = (a2 * c1 - a1 * c2) / (a1 * b2);\n\n        ldb a = q1 * q1 + q2 * q2 - 1;\n        ldb b = (p1 * q1 + p2 * q2 + r0) * 2;\n        ldb c = p1 * p1 + p2 * p2 - r0 * r0;\n\n        // \u4e8c\u6b21\u65b9\u7a0b\u6240\u6709\u7cfb\u6570\u90fd\u662f 0\uff0c\u65e0\u6570\u7ec4\u89e3\n        if (sgn(a) == 0 &amp;&amp; sgn(b) == 0 &amp;&amp; sgn(c) == 0) printf(\"-1\\n\");\n        else if (sgn(a) == 0) {\n            // \u4e8c\u6b21\u9879\u4e3a 0\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u6b21\u65b9\u7a0b\n            if (sgn(b) == 0) printf(\"0\\n\");\n            else {\n                ldb rs = -c / b;\n                if (sgn(rs - lim) &lt; 0) printf(\"0\\n\");\n                else printf(\"1 %.12Lf\\n\", rs);\n            }\n        } else {\n            // \u5224\u522b\u5f0f\u6cd5\uff0c\u89e3\u666e\u901a\u7684\u4e8c\u6b21\u65b9\u7a0b\n            ldb delta = b * b - 4 * a * c;\n            if (sgn(delta) &lt; 0) printf(\"0\\n\");\n            else if (sgn(delta) == 0) {\n                ldb rs = -b / (2 * a);\n                if (sgn(rs - lim) &lt; 0) printf(\"0\\n\");\n                else printf(\"1 %.12Lf\\n\", rs);\n            } else {\n                ldb rs1 = (-b - sqrt(delta)) / (2 * a);\n                ldb rs2 = (-b + sqrt(delta)) / (2 * a);\n                if (rs1 &gt; rs2) swap(rs1, rs2);\n                if (sgn(rs1 - rs2) == 0) rs1 = -1;\n                if (sgn(rs2 - lim) &lt; 0) printf(\"0\\n\");\n                else if (sgn(rs1 - lim) &lt; 0) printf(\"1 %.12Lf\\n\", rs2);\n                else printf(\"2 %.12Lf\\n\", rs1);\n            }\n        }\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2017-school-zju/","title":"2017 \u6d59\u6c5f\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2017-school-zju/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2017/04/22 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board \u5728\u7ebf\u7ec3\u4e60ZOJ 3948 ~ 3957"},{"location":"2017-school-zju/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 120, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 28, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 57, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 22, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 17, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 46, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 17, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 14, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 12, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 129, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 28, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 55, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 26, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 21, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2017-school-zju/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2018-icpc-qingdao/","title":"2018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9","text":""},{"location":"2018-icpc-qingdao/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2018/11/04 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board | Web Archive \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ | ZOJ 4058 ~ 4070 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2018-icpc-qingdao/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 333, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 18, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 88, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 109, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 12, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 105, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 332, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 18, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 17, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 353, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 19, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 23, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 146, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 83, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 50, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 28, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2018-icpc-qingdao/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2018-icpc-qingdao/#_4","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>A - Sequence and Sequence</li> <li>B - Kawa Exam</li> <li>C - Flippy Sequence</li> <li>D - Magic Multiplication</li> <li>E - Plants vs. Zombies</li> <li>F - Tournament</li> <li>G - Repair the Artwork</li> <li>H - Mirror</li> <li>I - Soldier Game</li> <li>J - Books</li> <li>K - Airdrop</li> <li>L - Sub-cycle Graph</li> <li>M - Function and Function</li> </ul>"},{"location":"2018-icpc-qingdao/a/","title":"A - Sequence and Sequence","text":""},{"location":"2018-icpc-qingdao/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73870/373 (0.0%)"},{"location":"2018-icpc-qingdao/a/#_2","title":"\u9898\u89e3","text":"<p>\u7531\u4e8e \\(n\\) \u5f88\u5927\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u5c1d\u8bd5\u51cf\u5c0f \\(n\\) \u7684\u8303\u56f4\u3002\u6ce8\u610f\u5230 \\(P(i)\\) \u53ea\u6709 \\(\\mathcal{O}(\\sqrt{n})\\) \u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u4e14\u53ea\u6709 \\(\\mathcal{O}(\\sqrt{n})\\) \u4e2a \\(i\\) \u6ee1\u8db3 \\(P_i - P_{i - 1} \\ne 0\\)\u3002\u5982\u679c\u6211\u4eec\u80fd\u7528 \\((Q(P(i)) - Q(P(i - 1)))\\) \u7684\u5f62\u5f0f\u8868\u793a \\(Q(n)\\)\uff0c\u5c31\u80fd\u628a \\(n\\) \u7684\u8303\u56f4\u964d\u5230 \\(\\mathcal{O}(\\sqrt{n})\\)\u3002</p> <p>\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u5b9a\u4e49 \\(Q(0) = P(0) = 0\\)\u3002</p> <p>\u9996\u5148\uff0c\u6839\u636e \\(Q\\) \u7684\u5b9a\u4e49\u5bb9\u6613\u53d1\u73b0</p> \\[ Q(n) = \\sum\\limits_{i = 1}^n Q(P(i)) \\] <p>\u4e3a\u4e86\u5f04\u51fa \\((Q(P(i)) - Q(P(i - 1)))\\) \u7684\u5f62\u5f0f\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u79cd\u79f0\u4e3a \u5206\u90e8\u6c42\u548c\u6cd5 \u7684\u6280\u5de7\uff08\u4e5f\u79f0\u963f\u8d1d\u5c14\u53d8\u6362\uff09\u3002\u5f15\u5165\u4e00\u4e2a\u5e38\u6570\u591a\u9879\u5f0f \\(f^{(0)}(x) = 1\\)\uff0c\u5219</p> \\[ Q(n) = \\sum\\limits_{i = 1}^n f^{(0)}(i) \\times Q(P(i)) \\] <p>\u4ee4 \\(F^{(0)}(x) = \\sum\\limits_{i = 1}^x f^{(0)}(i)\\)\uff0c\u5219</p> \\[ Q(n) = \\sum\\limits_{i = 1}^n (F^{(0)}(i) - F^{(0)}(i - 1)) \\times Q(P(i)) \\] <p>\u5229\u7528\u5206\u90e8\u6c42\u548c\u6cd5\uff0c\u628a \\(F^{(0)}(i)\\) \u76f8\u540c\u7684\u9879\u63d0\u51fa\u6765\uff0c\u5f97\u5230</p> \\[ Q(n) = F^{(0)}(n) \\times Q(P(n)) - \\sum\\limits_{i = 1}^n F^{(0)}(i - 1) \\times (Q(P(i)) - Q(P(i - 1))) \\] <p>\u6211\u4eec\u60f3\u8981\u7684 \\((Q(P(i)) - Q(P(i - 1)))\\) \u51fa\u73b0\u4e86\uff01\u6839\u636e \\(P(i)\\) \u7684\u53d6\u503c\uff0c\u5927\u90e8\u5206\u9879\u90fd\u53ef\u4ee5\u6d88\u53bb\uff0c\u6709</p> \\[ \\begin{matrix} &amp; \\sum\\limits_{i = 1}^n F^{(0)}(i - 1) \\times (Q(P(i)) - Q(P(i - 1))) \\\\  = &amp; \\sum\\limits_{i = 1}^{P(n)} F^{(0)}(\\frac{i(i + 1)}{2} - 1) \\times (Q(i) - Q(i - 1)) \\\\  = &amp; \\sum\\limits_{i = 1}^{P(n)} F^{(0)}(\\frac{i(i + 1)}{2} - 1) \\times Q(P(i)) \\end{matrix} \\] <p>\u4ee4\u591a\u9879\u5f0f \\(f^{(1)}(x) = F^{(0)}(\\frac{x(x + 1)}{2} - 1)\\)\uff0c\u4ee4\u51fd\u6570 \\(g(d, n) = \\sum\\limits_{i = 1}^n f^{(d)}(i) \\times Q(P(i))\\)\uff0c\u5219</p> \\[ Q(n) = g(0, n) = F^{(0)}(n) \\times g(0, P(n)) - g(1, P(n)) \\] <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u628a\u95ee\u9898 \\(g(0, n)\\) \u53d8\u6210\u4e86\u4e24\u4e2a\u66f4\u5c0f\u7684\u95ee\u9898 \\(g(0, P(n))\\) \u548c \\(g(1, P(n))\\)\uff0c\u6bcf\u4e2a\u5c0f\u95ee\u9898\u90fd\u662f \\(\\mathcal{O}(\\sqrt{n})\\) \u89c4\u6a21\u7684\u3002\u4ee4 \\(f^{(d)}(x) = F^{(d - 1)}(\\frac{x(x + 1)}{2} - 1)\\)\uff0c\\(F^{(d)}(x) = \\sum\\limits_{i = 1}^x f^{(d)}(i)\\)\uff0c\u4e0d\u96be\u5f97\u5230\u901a\u9879\u516c\u5f0f</p> \\[ g(d, n) = F^{(d)}(n) \\times g(0, P(n)) - g(d + 1, P(n)) \\] <p>\u5f53\u95ee\u9898\u89c4\u6a21\u53d8\u5f97\u8db3\u591f\u5c0f\u65f6\uff08\u672c\u9898\u7684\u6570\u636e\u8303\u56f4\u4e2d\uff0c\\(d = 4\\) \u65f6\uff0c\\(n \\le 605\\)\uff0c\u5df2\u7ecf\u5f88\u5c0f\u4e86\uff09\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u7b97\u51fa\u7b54\u6848\u3002</p> <p>\u591a\u9879\u5f0f\u7684\u503c\u53ef\u4ee5\u901a\u8fc7 \u62c9\u683c\u6717\u65e5\u63d2\u503c\u6cd5 \u6c42\u51fa\u3002\u6ce8\u610f\u5230\u6bcf\u9012\u5f52\u4e00\u5c42\uff0c\u591a\u9879\u5f0f\u7684\u6b21\u6570\u5c06\u4f1a\u52a0 \\(1\\) \u518d\u4e58 \\(2\\)\u3002\u53d6\u6700\u6df1\u9012\u5f52\u5c42\u6570 \\(D = 4\\)\uff0c\u5219\u591a\u9879\u5f0f\u6b21\u6570\u5c06\u4e3a \\(K = 30\\)\uff0c\\(n\\) \u7684\u6700\u5927\u503c\u5c06\u4e3a \\(N = 605\\)\u3002\u901a\u8fc7\u9002\u5f53\u7684\u9884\u5904\u7406\uff08\u89c1\u53c2\u8003\u4ee3\u7801\uff09\uff0c\u53ef\u4ee5\u5c06\u9884\u5904\u7406\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u505a\u5230 \\(\\mathcal{O}(K^2 + DK + DN)\\)\uff0c\u5355\u4e2a case \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u505a\u5230 \\(\\mathcal{O}(2^{D + 1} K)\\)\uff08\u9ad8\u7cbe\u5ea6\u8fd0\u7b97\u89c6\u4e3a\u5e38\u6570\uff09\u3002</p>"},{"location":"2018-icpc-qingdao/a/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>from math import isqrt\n\n# ======== \u9884\u5904\u7406\uff1a\u591a\u9879\u5f0f f \u548c F \u7684\u70b9\u503c\u8868\u793a ========\n\n# \u591a\u9879\u5f0f\u6700\u5927\u6b21\u6570\nMAX_K = 30\n\n# prod[i][j] = product(i - k), 0 &lt;= k &lt;= j, k != i\nprod = []\nfor i in range(MAX_K + 1):\n    prod.append([])\n    p = 1\n    for j in range(MAX_K + 1):\n        if i != j:\n            p *= i - j\n        prod[-1].append(p)\n\n# \u7ed9 k \u6b21\u591a\u9879\u5f0f\u7684\u70b9\u503c\u8868\u793a (0, y[0]), (1, y[1]), ..., (k, y[k])\n# \u5229\u7528\u62c9\u683c\u6717\u65e5\u63d2\u503c\u6cd5\uff0c\u6c42\u81ea\u53d8\u91cf\u4e3a x \u65f6\u591a\u9879\u5f0f\u7684\u503c\ndef evalPoly(x, y):\n    if x &gt;= 0 and x &lt; len(y):\n        return y[x]\n\n    p = 1\n    for i in range(len(y)):\n        p *= x - i\n\n    nume, deno = 0, 1\n    for i in range(len(y)):\n        a = y[i] * (p // (x - i))\n        b = prod[i][len(y) - 1]\n        nume = nume * b + deno * a\n        deno *= b\n    return nume // deno\n\n# \u6700\u5927\u9012\u5f52\u6df1\u5ea6\nMAX_DEP = 4\n\n# polys[i] \u662f f^{(i)}(x) \u7684\u70b9\u503c\u8868\u793a\npolys = []\npolys.append([1])\n# smPolys[i] \u662f F^{(i)}(x) \u7684\u70b9\u503c\u8868\u793a\nsmPolys = []\n\nfor _ in range(MAX_DEP):\n    prevLen = len(polys[-1])\n\n    # F^{(i)}(x) \u662f f^{(i)}(x) \u7684\u524d\u7f00\u548c\n    sm = [0]\n    for y in polys[-1][1:]:\n        sm.append(sm[-1] + y)\n    sm.append(sm[-1] + evalPoly(prevLen, polys[-1]))\n    smPolys.append(sm)\n\n    # f^{(i + 1)}(x) = F^{(i)}(x * (x + 1) // 2 - 1)\n    sq = []\n    for x in range(0, prevLen * 2 + 1):\n        sq.append(evalPoly(x * (x + 1) // 2 - 1, sm))\n    polys.append(sq)\n\n# ======== \u9884\u5904\u7406\uff1aP \u548c Q \u5c0f\u8303\u56f4\u7684\u503c ========\n\n# \u6700\u5927\u9012\u5f52\u6df1\u5ea6\u65f6\uff0cn &lt; MAX_LEN\nMAX_LEN = 610\n\nP = [0]\nt = 1\nwhile len(P) &lt;= MAX_LEN:\n    for _ in range(t + 1):\n        P.append(t)\n    t += 1\n\nQ = [0, 1]\nfor i in range(2, MAX_LEN):\n    Q.append(Q[-1] + Q[P[i]])\n\n# ======== \u9884\u5904\u7406\uff1ag(d, n) \u5728 d &lt;= MAX_DEP\uff0cn &lt; MAX_LEN \u65f6\u7684\u503c ========\n\n# S[d][n] = g(d, n)\nS = []\nfor i in range(MAX_DEP + 1):\n    S.append([0])\n    for j in range(1, MAX_LEN):\n        S[-1].append(S[-1][-1] + evalPoly(j, polys[i]) * Q[P[j]])\n\n# ======== \u6b63\u5f0f\u8ba1\u7b97 ========\n\n# \u82e5 P(n) = p\uff0c\u5219 (p + 3) * p // 2 &gt;= n \u4e14 p \u6700\u5c0f\n# \u901a\u8fc7\u89e3\u4e8c\u6b21\u65b9\u7a0b\u7b97\u51fa\u6765\uff0c\u56e0\u4e3a\u5f00\u6839\u53f7\u548c\u9664\u6cd5\u90fd\u4e0b\u53d6\u6574\u4e86\uff0c\u8981\u5f80\u540e\u68c0\u67e5\u51e0\u4e2a\u6570\ndef calcP(n):\n    p = (isqrt(8 * n + 9) - 3) // 2\n    while p * (p + 3) // 2 &lt; n:\n        p += 1\n    return p\n\ndef g(d, n):\n    if n &lt; MAX_LEN:\n        return S[d][n]\n    return evalPoly(n, smPolys[d]) * g(0, calcP(n)) - g(d + 1, calcP(n))\n\ntcase = int(input())\nfor _ in range(tcase):\n    n = int(input())\n    print(g(0, n))\n</code></pre>"},{"location":"2018-icpc-qingdao/b/","title":"B - Kawa Exam","text":""},{"location":"2018-icpc-qingdao/b/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73872/373 (0.5%)"},{"location":"2018-icpc-qingdao/b/#_2","title":"\u9898\u89e3","text":"<p>\u6bd4\u8f83\u5957\u8def\u7684 dsu on tree\uff08\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff09\uff0c\u4e3b\u8981\u8003\u5bdf\u9009\u624b\u7684\u4ee3\u7801\u80fd\u529b\u3002</p> <p>\u6211\u4eec\u628a\u8003\u8bd5\u9898\u770b\u6210\u70b9\uff0cbug \u770b\u6210\u8fb9\uff0c\u90a3\u4e48\u540c\u4e00\u8fde\u901a\u5757\u7684\u70b9\u53ea\u80fd\u9009\u62e9\u540c\u79cd\u7b54\u6848\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u4e0d\u4fee\u590d\u4efb\u4f55 bug\uff0c\u7b54\u6848\u5c31\u662f\u6240\u6709\u8fde\u901a\u5757\u4f17\u6570\u51fa\u73b0\u7684\u6b21\u6570\u4e4b\u548c\u3002</p> <p>\u63a5\u4e0b\u6765\u8003\u8651\u53bb\u6389\u4e00\u6761\u8fb9\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\u3002\u5982\u679c\u6211\u4eec\u53bb\u6389\u7684\u4e0d\u662f\u5272\u8fb9\uff0c\u90a3\u4e48\u56fe\u7684\u8fde\u901a\u6027\u6ca1\u6709\u6539\u53d8\uff0c\u7b54\u6848\u4e5f\u6ca1\u6709\u6539\u53d8\u3002\u5982\u679c\u6211\u4eec\u53bb\u6389\u7684\u662f\u5272\u8fb9\uff0c\u90a3\u4e48\u4e00\u4e2a\u8fde\u901a\u5757\u5c06\u4f1a\u53d8\u4e3a\u4e24\u4e2a\uff0c\u7b54\u6848\u8981\u51cf\u53bb\u539f\u8fde\u901a\u5757\u4f17\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u518d\u5206\u522b\u52a0\u4e0a\u65b0\u8fde\u901a\u5757\u4f17\u6570\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u5148\u7528 tarjan \u7b97\u6cd5\u628a\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u7f29\u6210\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u8bb0\u5f55\u8fb9\u53cc\u8fde\u901a\u5206\u91cf\u91cc\u7684\u6240\u6709\u5143\u7d20\u3002\u8fd9\u6837\u6574\u4e2a\u8fde\u901a\u5757\u5c31\u53d8\u6210\u4e86\u4e00\u68f5\u6811\uff0c\u53bb\u6389\u4e00\u6761\u8fb9\u5c31\u662f\u628a\u6811\u5206\u6210\u4e00\u4e2a\u5b50\u6811\u548c\u5269\u4e0b\u7684\u90e8\u5206\u3002\u56e0\u6b64\u95ee\u9898\u53d8\u4e3a\uff1a</p> <p>\u7ed9\u4e00\u68f5\u6811\uff0c\u6bcf\u4e2a\u70b9\u4e0a\u90fd\u8bb0\u5f55\u4e86\u4e00\u4e9b\u6570\u5b57\u3002\u6c42\u6bcf\u4e2a\u5b50\u6811\u5185\u4f17\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u5b50\u6811\u5916\u4f17\u6570\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u5b50\u6811\u5185\u4f17\u6570\u51fa\u73b0\u7684\u6b21\u6570\u5c31\u662f\u7ecf\u5178\u7684 dsu on tree\u3002\u4e0d\u719f\u6089 dsu on tree \u7684\u540c\u5b66\u53ef\u4ee5\u505a\u4e00\u4e0b CF600E\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003 oiwiki \u548c\u8fd9\u4e2a CF blog\uff0c\u8fd9\u91cc\u4e0d\u5c55\u5f00\u4ecb\u7ecd\u3002</p> <p>\u8fd9\u91cc\u8bb2\u4e00\u4e0b\u6bcf\u6b21\u52a0\u5165\u6216\u5220\u9664\u4e00\u4e2a\u6570\uff0c\u5982\u4f55 \\(\\mathcal{O}(1)\\) \u6c42\u4f17\u6570\u7684\u51fa\u73b0\u6b21\u6570\uff1a\u6211\u4eec\u7ef4\u62a4 <code>f[i]</code> \u8868\u793a\u6570 \\(i\\) \u51fa\u73b0\u4e86\u51e0\u6b21\uff0c<code>g[i]</code> \u8868\u793a\u51fa\u73b0\u6b21\u6570\u4e3a \\(i\\) \u7684\u6570\u6709\u51e0\u4e2a\u3002\u5047\u8bbe\u5f53\u524d\u4f17\u6570\u7684\u51fa\u73b0\u6b21\u6570\u4e3a \\(a\\)\uff0c\u52a0\u5165\u6570 \\(x\\) \u7684\u65f6\u5019\uff0c\u4f9d\u6b21\u8fd0\u884c\uff1a <pre><code>g[f[x]]--;\nf[x]++;\ng[f[x]]++;\na = max(a, f[x]);\n</code></pre></p> <p>\u5220\u9664\u6570 \\(x\\) \u7684\u65f6\u5019\uff0c\u4f9d\u6b21\u8fd0\u884c\uff1a <pre><code>g[f[x]]--;\nf[x]--;\ng[f[x]]++;\n// x \u7684\u51fa\u73b0\u6b21\u6570\u51cf\u5c11\u4e86 1\n//   * \u5982\u679c x \u539f\u6765\u5c31\u4e0d\u662f\u4f17\u6570\uff0c\u90a3\u4e48\u5bf9\u7b54\u6848\u65e0\u5f71\u54cd\uff1b\n//   * \u5982\u679c x \u539f\u6765\u662f\u4f17\u6570\uff0c\u4f46\u662f\u6709\u591a\u4e8e\u4e00\u79cd\u4f17\u6570\uff0c\u90a3\u4e48\u5bf9\u7b54\u6848\u4ecd\u7136\u65e0\u5f71\u54cd\uff1b\n//   * \u5982\u679c x \u539f\u6765\u662f\u4f17\u6570\uff0c\u800c\u4e14\u53ea\u6709\u4e00\u79cd\u4f17\u6570\uff0c\u90a3\u4e48 x \u51fa\u73b0\u6b21\u6570\u51cf 1 \u4ee5\u540e\u4f17\u6570\u8fd8\u662f\u5b83\uff0c\u7b54\u6848\u6bd4\u539f\u6765\u51cf\u5c11 1\u3002\na = g[a] &gt; 0 ? a : a - 1;\n</code></pre></p> <p>\u5b50\u6811\u5916\u7684\u4f17\u6570\u4e5f\u5f88\u597d\u7ef4\u62a4\u3002\u6211\u4eec\u5728\u5f00\u59cb dsu on tree \u4e4b\u524d\uff0c\u5148\u628a\u6811\u4e2d\u7684\u6240\u6709\u6570\u5b57\u52a0\u5165\u96c6\u5408\uff0c\u6bcf\u6b21\u66f4\u65b0\u5b50\u6811\u8d21\u732e\u65f6\uff0c\u6211\u4eec\u4ece\u96c6\u5408\u91cc\u6263\u6389\u5b50\u6811\u91cc\u7684\u5143\u7d20\uff1b\u56de\u64a4\u5b50\u6811\u8d21\u732e\u65f6\uff0c\u6211\u4eec\u518d\u628a\u5b50\u6811\u91cc\u7684\u5143\u7d20\u52a0\u56de\u6765\u3002</p> <p>\u56e0\u6b64\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/b/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXM ((int) 1e5)\n#define MAXA ((int) 1e5)\nusing namespace std;\n\nint n, m, A[MAXN + 10], ans[MAXM + 10];\n\nvector&lt;int&gt; e[MAXN + 10], v[MAXN + 10];\nint clk, dfn[MAXN + 10], low[MAXN + 10];\nstack&lt;int&gt; stk;\nbool inS[MAXN + 10];\n\nint bCnt, bel[MAXN + 10];\nvector&lt;int&gt; nums[MAXN + 10];\n\nvector&lt;int&gt; E[MAXN + 10], V[MAXN + 10];\nint CLK, ORD[MAXN + 10], DL[MAXN + 10], DR[MAXN + 10], SZ[MAXN + 10], HEAVY[MAXN + 10];\n\n// \u6bcf\u6b21\u6dfb\u52a0\u6216\u5220\u9664\u4e00\u4e2a\u6570\uff0c\u6c42\u4f17\u6570\u7684\u51fa\u73b0\u6b21\u6570\nstruct Mode {\n    int f[MAXA + 10], g[MAXN + 10], a;\n\n    void clear() {\n        for (int i = 1; i &lt;= n; i++) f[A[i]] = 0;\n        for (int i = 1; i &lt;= n; i++) g[i] = 0;\n        a = 0;\n    }\n\n    void add(int x) {\n        if (f[x]) g[f[x]]--;\n        f[x]++;\n        g[f[x]]++;\n        a = max(a, f[x]);\n    }\n\n    void del(int x) {\n        g[f[x]]--;\n        f[x]--;\n        if (f[x]) g[f[x]]++;\n        a = g[a] &gt; 0 ? a : a - 1;\n    }\n} M1, M2;\n\nvoid tarjan(int sn, int from) {\n    low[sn] = dfn[sn] = ++clk;\n    stk.push(sn); inS[sn] = true;\n    for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i], val = v[sn][i];\n        if (val == from) continue;\n        if (!dfn[fn]) {\n            tarjan(fn, val);\n            low[sn] = min(low[sn], low[fn]);\n        } else if (inS[fn]) {\n            low[sn] = min(low[sn], dfn[fn]);\n        }\n    }\n\n    if (dfn[sn] == low[sn]) {\n        bCnt++;\n        while (stk.top() != sn) {\n             bel[stk.top()] = bCnt;\n             inS[stk.top()] = false; stk.pop();\n        }\n        bel[sn] = bCnt;\n        inS[sn] = false; stk.pop();\n    }\n}\n\nvoid DFS(int sn, int fa) {\n    DL[sn] = ++CLK; ORD[CLK] = sn;\n    SZ[sn] = nums[sn].size(); HEAVY[sn] = 0;\n    for (int fn : E[sn]) if (fn != fa) {\n        DFS(fn, sn);\n        SZ[sn] += SZ[fn];\n        if (SZ[HEAVY[sn]] &lt; SZ[fn]) HEAVY[sn] = fn;\n    }\n    DR[sn] = CLK;\n}\n\nvoid DSU(int sn, bool keep, int from, int ALL) {\n    // \u5148\u904d\u5386\u8f7b\u5b50\u6811\uff0c\u4e0d\u4fdd\u7559\u5f71\u54cd\n    for (int i = 0; i &lt; E[sn].size(); i++) {\n        int fn = E[sn][i], val = V[sn][i];\n        if (val == from || fn == HEAVY[sn]) continue;\n        DSU(fn, false, val, ALL);\n    }\n    // \u518d\u904d\u5386\u91cd\u5b50\u6811\uff0c\u4fdd\u7559\u5f71\u54cd\n    for (int i = 0; i &lt; E[sn].size(); i++) {\n        int fn = E[sn][i], val = V[sn][i];\n        if (fn == HEAVY[sn]) DSU(fn, true, val, ALL);\n    }\n    // \u6dfb\u52a0\u8f7b\u5b50\u6811\u7684\u5f71\u54cd\n    for (int i = 0; i &lt; E[sn].size(); i++) {\n        int fn = E[sn][i], val = V[sn][i];\n        if (val == from || fn == HEAVY[sn]) continue;\n        for (int j = DL[fn]; j &lt;= DR[fn]; j++) for (int x : nums[ORD[j]]) M1.add(x), M2.del(x);\n    }\n    // \u6dfb\u52a0\u8282\u70b9\u672c\u8eab\u7684\u5f71\u54cd\n    for (int x : nums[sn]) M1.add(x), M2.del(x);\n    // \u6b64\u65f6\u8282\u70b9 sn \u7684\u7b54\u6848\u5c31\u53ef\u4ee5\u6c42\u4e86\n    if (from) ans[from] = M1.a + M2.a - ALL;\n    if (keep) return;\n    // \u56de\u64a4\u5b50\u6811 sn \u7684\u5f71\u54cd\n    for (int j = DL[sn]; j &lt;= DR[sn]; j++) for (int x : nums[ORD[j]]) M1.del(x), M2.add(x);\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    for (int i = 1; i &lt;= n; i++) e[i].clear(), v[i].clear();\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        e[x].push_back(y); v[x].push_back(i);\n        e[y].push_back(x); v[y].push_back(i);\n    }\n\n    clk = 0; bCnt = 0;\n    memset(dfn, 0, sizeof(int) * (n + 3));\n    for (int i = 1; i &lt;= n; i++) if (!dfn[i]) tarjan(i, 0);\n\n    for (int i = 1; i &lt;= n; i++) nums[i].clear();\n    for (int i = 1; i &lt;= n; i++) nums[bel[i]].push_back(A[i]);\n\n    for (int i = 1; i &lt;= n; i++) E[i].clear(), V[i].clear();\n    for (int sn = 1; sn &lt;= n; sn++) for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i], val = v[sn][i];\n        if (bel[sn] == bel[fn]) continue;\n        E[bel[sn]].push_back(bel[fn]); V[bel[sn]].push_back(val);\n    }\n\n    CLK = 0;\n    memset(DL, 0, sizeof(int) * (n + 3));\n    memset(ans, 0, sizeof(int) * (m + 3));\n    for (int i = 1; i &lt;= n; i++) if (!DL[i]) {\n        DFS(i, 0);\n        for (int j = DL[i]; j &lt;= DR[i]; j++) for (int x : nums[ORD[j]]) M2.add(x);\n        ans[0] += M2.a;\n        DSU(i, false, 0, M2.a);\n        for (int j = DL[i]; j &lt;= DR[i]; j++) for (int x : nums[ORD[j]]) M2.del(x);\n    }\n    for (int i = 1; i &lt;= m; i++) printf(\"%d%c\", ans[i] + ans[0], \"\\n \"[i &lt; m]);\n    M1.clear(); M2.clear();\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/c/","title":"C - Flippy Sequence","text":""},{"location":"2018-icpc-qingdao/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387351/373 (94.1%)"},{"location":"2018-icpc-qingdao/c/#_2","title":"\u9898\u89e3","text":"<p>\u9996\u5148\u6c42\u51fa\u5728\u54ea\u4e9b\u533a\u95f4\u5185\uff0c\\(s\\) \u548c \\(t\\) \u662f\u4e0d\u540c\u7684\u3002</p> <p>\u4e24\u6b21\u64cd\u4f5c\u6700\u591a\u53ea\u80fd\u5bf9\u4e24\u4e2a\u533a\u95f4\u8fdb\u884c\u7ffb\u8f6c\u3002\u5982\u679c\u4e0d\u540c\u7684\u533a\u95f4\u6570\u8d85\u8fc7\u4e24\u4e2a\u5219\u65e0\u89e3\uff0c\u7b54\u6848\u4e3a \\(0\\)\u3002</p> <p>\u63a5\u4e0b\u6765\u8ba8\u8bba\u4e0d\u540c\u533a\u95f4\u6570\u91cf\u6709 \\(0\\)\uff0c\\(1\\)\uff0c\\(2\\) \u4e2a\u7684\u60c5\u51b5\u3002</p>"},{"location":"2018-icpc-qingdao/c/#_3","title":"\u65e0\u4e0d\u540c\u533a\u95f4","text":"<p>\u82e5 \\(s\\) \u548c \\(t\\) \u76f8\u7b49\uff0c\u5219\u4e24\u6b21\u64cd\u4f5c\u5fc5\u987b\u7ffb\u8f6c\u540c\u4e00\u4e2a\u533a\u95f4\uff0c\u624d\u80fd\u4fdd\u6301 \\(s\\) \u4e0d\u53d8\u3002\u56e0\u6b64\u7b54\u6848\u5c31\u662f\u975e\u7a7a\u533a\u95f4\u7684\u6570\u91cf\uff0c\u5373 \\((\\frac{n(n - 1)}{2} + n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/c/#_4","title":"\u4e00\u4e2a\u4e0d\u540c\u533a\u95f4","text":"<p>\u82e5\u6709\u4e00\u4e2a\u4e0d\u540c\u7684\u533a\u95f4\uff0c\u6709\u4ee5\u4e0b\u4e24\u7c7b\u9009\u6cd5\u3002\u8bbe\u76ee\u6807\u533a\u95f4\u7684\u957f\u5ea6\u4e3a \\(l\\)\u3002</p> <p></p> <p>\u7b2c\u4e00\u7c7b\uff1a\u9009\u62e9\u4e24\u4e2a\u4e0d\u76f8\u4ea4\u7684\u533a\u95f4\uff0c\u5b83\u4eec\u7684\u5e76\u96c6\u662f\u76ee\u6807\u533a\u95f4\u3002\u5171\u6709 \\(2(l - 1)\\) \u79cd\u65b9\u6cd5\u3002</p> <p>\u7b2c\u4e8c\u7c7b\uff1a\u9009\u62e9\u4e24\u4e2a\u76f8\u4ea4\u7684\u533a\u95f4\uff0c\u5b83\u4eec\u7684\u5dee\u662f\u76ee\u6807\u533a\u95f4\u3002\u5171\u6709 \\(2(n - l)\\) \u79cd\u65b9\u6cd5\u3002</p> <p>\u56e0\u6b64\u7b54\u6848\u4e3a \\(2(l - 1) + 2(n - l) = 2(n - 1)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/c/#_5","title":"\u4e24\u4e2a\u4e0d\u540c\u533a\u95f4","text":"<p>\u82e5\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u533a\u95f4\uff0c\u6709\u4ee5\u4e0b\u4e09\u7c7b\u9009\u6cd5\u3002</p> <p></p> <p>\u4e24\u4e2a\u533a\u95f4\u6709\u5148\u540e\u4e4b\u5206\uff0c\u56e0\u6b64\u7b54\u6848\u4e3a \\(2 \\times 3 = 6\\)\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/c/#_6","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e6)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\nchar A[MAXN + 10], B[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%s%s\", &amp;n, A + 1, B + 1);\n\n    // \u8ba1\u7b97\u4e0d\u540c\u533a\u95f4\n    vector&lt;pii&gt; vec;\n    int bgn = -1;\n    for (int i = 1; i &lt;= n; i++) if (A[i] != B[i]) {\n        if (A[i - 1] == B[i - 1]) bgn = i;\n        if (A[i + 1] == B[i + 1]) vec.push_back(pii(bgn, i));\n    }\n\n    // \u5206\u7c7b\u8ba8\u8bba\n    if (vec.size() == 0) printf(\"%lld\\n\", 1LL * n * (n - 1) / 2 + n);\n    else if (vec.size() == 1) printf(\"%d\\n\", 2 * (n - 1));\n    else if (vec.size() == 2) printf(\"6\\n\");\n    else printf(\"0\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/d/","title":"D - Magic Multiplication","text":""},{"location":"2018-icpc-qingdao/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738799/373 (26.5%)"},{"location":"2018-icpc-qingdao/d/#_2","title":"\u9898\u89e3","text":"<p>\u53ea\u8981\u786e\u5b9a\u4e86 \\(a_1\\)\uff0c\u6211\u4eec\u5c31\u80fd\u552f\u4e00\u786e\u5b9a\u4e00\u4e2a \\(B\\)\u3002\u8fd9\u662f\u56e0\u4e3a\uff1a</p> <ul> <li>\u5982\u679c\u5f53\u524d\u4e58\u79ef\u4ee5 \\(0\\) \u5f00\u5934\uff0c\u7531\u4e8e\u9898\u76ee\u8981\u6c42 \\(a_1 \\ne 0\\)\uff0c\u56e0\u6b64\u5fc5\u987b\u6709 \\(b_i = 0\\)\u3002</li> <li> <p>\u5982\u679c\u5f53\u524d\u4e58\u79ef\u4ee5 \\(1 \\le x \\le 9\\) \u5f00\u5934\uff0c\u90a3\u4e48 \\(1\\) \u5230 \\(9\\) \u4e2d\u53ea\u6709\u4e00\u4e2a\u6570\u4e58\u4ee5 \\(a_1\\) \u80fd\u591f\u4ee5 \\(x\\) \u5f00\u5934\u3002</p> <p>\u6709\u7684\u8bfb\u8005\u53ef\u80fd\u62c5\u5fc3\uff0c\u4f1a\u4e0d\u4f1a\u5b58\u5728 \\(b_i'\\) \u548c \\(b_i''\\)\uff0c\u4f7f\u5f97 \\(a_1 \\times b_i' = x\\)\uff0c\u800c \\(a_1 \\times b_i''\\) \u662f\u4e00\u4e2a\u4ee5 \\(x\\) \u4e3a\u5f00\u5934\u7684\u4e24\u4f4d\u6570\uff1f\u663e\u7136\u4e0d\u4f1a\uff0c\u56e0\u4e3a\u4ee5 \\(x\\) \u4e3a\u5f00\u5934\u7684\u4e24\u4f4d\u6570\u81f3\u5c11\u662f \\(x\\) \u7684 \\(10\\) \u500d\uff0c\u90a3\u4e48 \\(b_i''\\) \u5fc5\u987b\u81f3\u5c11\u662f \\(b_i'\\) \u7684 \\(10\\) \u500d\uff0c\u4f46\u6211\u4eec\u53ea\u8003\u8651 \\(1\\) \u5230 \\(9\\)\u3002</p> </li> </ul> <p>\u56e0\u6b64\u6211\u4eec\u4ece \\(1\\) \u5230 \\(9\\) \u679a\u4e3e \\(a_1\\)\u3002\u6c42\u51fa \\(B\\) \u4e2d\u7684\u6240\u6709\u5143\u7d20\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u53cd\u8fc7\u6765\u7528 \\(b_1\\) \u6c42\u51fa \\(A\\) \u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u6700\u540e\u68c0\u67e5\u6c42\u51fa\u7684\u8fd9\u4e00\u7ec4 \\(A\\) \u548c \\(B\\) \u662f\u5426\u5408\u6cd5\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(9 \\times |s|)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 2e5)\nusing namespace std;\n\nint n, m, sLen;\nchar s[MAXN + 10];\n\nint A[MAXN + 10], B[MAXN + 10], f[10][100];\n\n// \u7ed9\u4e58\u79ef\u7684\u4e00\u4e2a\u56e0\u6570\uff081 ~ 9\uff09\uff0c\u6c42\u51fa\u53e6\u4e00\u4e2a\u56e0\u6570\uff080 ~ 9\uff09\n// x\uff1a\u7ed9\u5b9a\u7684\u4e58\u79ef\u56e0\u6570\n// now\uff1a\u4e58\u79ef\u5728 s \u4e2d\u7684\u4f4d\u7f6e\nint gao(int x, int &amp;now) {\n    if (now &gt; sLen) return -1;\n\n    // \u4ee5 0 \u5f00\u5934\u7684\u4e58\u79ef\uff0c\u53e6\u4e00\u4e2a\u56e0\u6570\u5fc5\u987b\u662f 0\n    if (s[now] == '0') {\n        now++;\n        return 0;\n    }\n\n    // \u4ee5\u975e 0 \u5f00\u5934\u7684\u4e58\u79ef\uff0c\u67e5\u4e58\u6cd5\u8868\n    int t = s[now] - '0';\n    if (f[x][t] &gt; 0) {\n        now++;\n        return f[x][t];\n    }\n\n    t = t * 10 + (s[now + 1] - '0');\n    if (now &lt; sLen &amp;&amp; f[x][t] &gt; 0) {\n        now += 2;\n        return f[x][t];\n    }\n\n    return -1;\n}\n\n// \u679a\u4e3e a_1 = X\nbool check(int X) {\n    A[1] = X;\n\n    // \u7528 a_1 \u6c42\u51fa B \u4e2d\u6240\u6709\u5143\u7d20\n    int now = 1;\n    for (int i = 1; i &lt;= m; i++) {\n        B[i] = gao(X, now);\n        if (B[i] &lt; 0) return false;\n    }\n    // \u9898\u76ee\u8981\u6c42 b_1 != 0\n    if (B[1] == 0) return false;\n\n    for (int i = 2; i &lt;= n; i++) {\n        // \u7528 b_1 \u53cd\u6c42 a_i\uff0c\u8fd9\u91cc b_1 != 0\uff0c\u53ef\u4ee5\u590d\u7528 gao \u51fd\u6570\n        A[i] = gao(B[1], now);\n        if (A[i] &lt; 0) return false;\n        // \u68c0\u67e5\u5269\u4e0b\u7684\u4e58\u79ef\u662f\u5426\u7b26\u5408\u8981\u6c42\n        for (int j = 2; j &lt;= m; j++) {\n            int t = A[i] * B[j];\n            int l = t &gt;= 10 ? 2 : 1;\n            for (int k = l - 1; k &gt;= 0; k--) {\n                if (now + k &gt; sLen || s[now + k] - '0' != t % 10) return false;\n                t /= 10;\n            }\n            now += l;\n        }\n    }\n\n    // \u5fc5\u987b\u6070\u597d\u628a\u5b57\u7b26\u4e32\u5904\u7406\u5b8c\n    return now == sLen + 1;\n}\n\nvoid solve() {\n    scanf(\"%d%d%s\", &amp;n, &amp;m, s + 1);\n    sLen = strlen(s + 1);\n\n    // \u679a\u4e3e a_1 \u6c42\u7b54\u6848\n    for (int i = 1; i &lt;= 9; i++) if (check(i)) {\n        for (int j = 1; j &lt;= n; j++) printf(\"%d\", A[j]);\n        printf(\" \");\n        for (int j = 1; j &lt;= m; j++) printf(\"%d\", B[j]);\n        printf(\"\\n\");\n        return;\n    }\n    printf(\"Impossible\\n\");\n}\n\nint main() {\n    // \u9884\u5904\u7406\u4e58\u6cd5\u8868\n    for (int i = 1; i &lt;= 9; i++) for (int j = 1; j &lt;= 9; j++) f[i][i * j] = j;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/e/","title":"E - Plants vs. Zombies","text":""},{"location":"2018-icpc-qingdao/e/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387121/373 (32.4%)"},{"location":"2018-icpc-qingdao/e/#_2","title":"\u9898\u89e3","text":"<p>\u5bb9\u6613\u60f3\u5230\u4e8c\u5206\u7b54\u6848\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u68c0\u9a8c\u7b54\u6848 \\(x\\)\u3002</p> <p>\u7531\u4e8e\u6bcf\u4e00\u6b21\u6d47\u6c34\u524d\u5fc5\u987b\u5148\u79fb\u52a8\uff0c\u56e0\u6b64\u4e3a\u4e86\u628a\u7b2c\u4e00\u68f5\u690d\u7269\u6d47\u5230\u9ad8\u5ea6 \\(x\\) \u540c\u65f6\u53c8\u4e0d\u6d6a\u8d39\u6c34\uff0c\u5c31\u9700\u8981\u5728\u7b2c\u4e00\u548c\u7b2c\u4e8c\u68f5\u690d\u7269\u4e4b\u95f4\u53cd\u590d\u79fb\u52a8\u3002\u5b8c\u6210\u7b2c\u4e00\u68f5\u690d\u7269\u7684\u6d47\u6c34\u540e\uff0c\u4e3a\u4e86\u628a\u7b2c\u4e8c\u68f5\u690d\u7269\u6d47\u5230\u9ad8\u5ea6 \\(x\\) \u540c\u65f6\u53c8\u4e0d\u6d6a\u8d39\u6c34\uff0c\u5c31\u9700\u8981\u5728\u7b2c\u4e8c\u548c\u7b2c\u4e09\u68f5\u690d\u7269\u4e4b\u95f4\u53cd\u590d\u79fb\u52a8...</p> <p>\u6a21\u62df\u4ee5\u4e0a\u8d2a\u5fc3\u8fc7\u7a0b\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log (m \\times \\max a_i))\\)\u3002</p>"},{"location":"2018-icpc-qingdao/e/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, A[MAXN + 10];\nlong long m;\n\n// \u8868\u793a\u76ee\u524d\u6bcf\u68f5\u690d\u7269\u7684\u9ad8\u5ea6\nlong long B[MAXN + 10];\n\nbool check(long long LIM) {\n    long long step = 0;\n    memset(B, 0, sizeof(long long) * (n + 3));\n    for (int i = 1; i &lt;= n; i++) {\n        if (LIM &gt; B[i]) {\n            // \u7b2c i \u68f5\u690d\u7269\u9700\u8981\u7ee7\u7eed\u6d47\u6c34\n            // \u5728\u5b83\u548c\u7b2c (i + 1) \u68f5\u690d\u7269\u4e4b\u95f4\u53cd\u590d\u79fb\u52a8\n            long long t = LIM - B[i];\n            t = (t + A[i] - 1) / A[i];\n            step += t * 2 - 1;\n            // \u6b65\u6570\u8d85\u51fa\u9650\u5236\u5c31\u5373\u523b\u9000\u51fa\n            // \u5426\u5219\u6570\u636e\u8303\u56f4\u53ef\u80fd\u8d85\u51fa long long\n            if (step &gt; m) return false;\n            B[i + 1] += A[i + 1] * (t - 1);\n        } else {\n            // \u7b2c i \u68f5\u690d\u7269\u4e0d\u9700\u8981\u7ee7\u7eed\u6d47\u6c34\n            // \u76f4\u63a5\u8def\u8fc7\uff0c\u4f46\u6b65\u6570\u8fd8\u8981\u7b97\n            // \u8fd9\u91cc\u6b65\u6570\u53ef\u80fd\u4f1a\u8d85\u8fc7\u9650\u5236\n            // \u4f46\u662f\u53ea\u8981\u53f3\u8fb9\u6ca1\u6709\u5176\u5b83\u9700\u8981\u6d47\u6c34\u7684\u690d\u7269\uff0c\u5c31\u4e0d\u4f1a\u8fd4\u56de false\n            step++;\n        }\n    }\n    return true;\n}\n\nvoid solve() {\n    scanf(\"%d%lld\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    // \u4e8c\u5206\u7b54\u6848\n    long long head = 0, tail = 1e18;\n    while (head &lt; tail) {\n        long long mid = (head + tail + 1) &gt;&gt; 1;\n        if (check(mid)) head = mid;\n        else tail = mid - 1;\n    }\n    printf(\"%lld\\n\", head);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/f/","title":"F - Tournament","text":""},{"location":"2018-icpc-qingdao/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387114/373 (30.6%)"},{"location":"2018-icpc-qingdao/f/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c\u53ea\u662f\u4ee5\u8fc7\u9898\u4e3a\u76ee\u6807\uff0c\u53ef\u4ee5\u901a\u8fc7\u6253\u8868\u627e\u89c4\u5f8b\u7684\u65b9\u5f0f\uff0c\u53d1\u73b0\u5fc5\u987b\u6709 \\(k \\le \\text{lowbit}(n) - 1\\) \u624d\u6709\u89e3\uff0c\u4e14\u7b2c \\(i\\) \u573a\u6bd4\u8d5b\uff08\\(i\\) \u4ece \\(1\\) \u5230 \\(k\\)\uff09\uff0c\u9009\u624b \\(j\\)\uff08\\(j\\) \u4ece \\(0\\) \u5230 \\((n - 1)\\)\uff09\u7684\u5bf9\u624b\u5c31\u662f \\(i \\oplus j\\)\uff0c\u5176\u4e2d \\(\\oplus\\) \u662f\u5f02\u6216\u8fd0\u7b97\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(nk)\\)\u3002</p> <p>\u8be6\u7ec6\u7684\u8bc1\u660e\u53c2\u89c1 IMO 2006 C5 \u9898\uff08\u611f\u8c22 hos.lyric\uff09\u3002</p>"},{"location":"2018-icpc-qingdao/f/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, K;\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;K);\n    int lb = n &amp; (-n);\n    if (K &gt;= lb) { printf(\"Impossible\\n\"); return; }\n    for (int i = 1; i &lt;= K; i++) for (int j = 0; j &lt; n; j++) printf(\"%d%c\", (i ^ j) + 1, \"\\n \"[j + 1 &lt; n]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/g/","title":"G - Repair the Artwork","text":""},{"location":"2018-icpc-qingdao/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73878/373 (2.1%)"},{"location":"2018-icpc-qingdao/g/#_2","title":"\u9898\u89e3","text":""},{"location":"2018-icpc-qingdao/g/#0-1","title":"\u53ea\u6709 0 \u548c 1 \u7684\u60c5\u51b5","text":"<p>\u9996\u5148\u8003\u8651\u53ea\u6709 \\(0\\) \u548c \\(1\\) \u65f6\u7684\u7b54\u6848\uff0c\u663e\u7136\u7b54\u6848\u5c31\u662f \\(k^m\\)\uff0c\u5176\u4e2d \\(k\\) \u662f\u4e0d\u5305\u542b \\(1\\) \u7684\u533a\u95f4\u6570\u91cf\u3002</p>"},{"location":"2018-icpc-qingdao/g/#2","title":"\u52a0\u5165\u5c11\u91cf\u7684 2","text":"<p>\u8bb0 \\(\\{a_1a_2\\cdots a_n\\}\\) \u8868\u793a\u5e8f\u5217 \\(a_1, a_2, \\cdots, a_n\\) \u7684\u7b54\u6848\u3002</p> <p>\u6211\u4eec\u9996\u5148\u6765\u8003\u8651\u53ea\u5305\u542b\u4e00\u4e2a \\(2\\) \u7684\u4f8b\u5b50\uff0c\u4f8b\u5982 \\(021\\)\u3002\u6211\u4eec\u8981\u6c42\u7684\u662f\u201c\\(2\\) \u5fc5\u987b\u88ab\u8986\u76d6\u7684\u65b9\u6848\u6570\u201d\uff0c\u53ef\u4ee5\u628a\u5b83\u8f6c\u5316\u4e3a\u201c\\(2\\) \u53ef\u80fd\u88ab\u8986\u76d6\u7684\u65b9\u6848\u6570\u201d\u51cf\u53bb\u201c\\(2\\) \u4e00\u5b9a\u4e0d\u88ab\u8986\u76d6\u7684\u65b9\u6848\u6570\u201d\u3002</p> <p>\u4e00\u4e2a\u4f4d\u7f6e\u5982\u679c\u201c\u53ef\u80fd\u88ab\u8986\u76d6\u201d\uff0c\u76f8\u5f53\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u662f \\(0\\)\uff1b\u4e00\u4e2a\u4f4d\u7f6e\u5982\u679c\u201c\u4e00\u5b9a\u4e0d\u88ab\u8986\u76d6\u201d\uff0c\u76f8\u5f53\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u662f \\(1\\)\u3002\u7528\u5f0f\u5b50\u6765\u8868\u793a\u5373\u4e3a</p> \\[ \\{021\\} = \\{0\\underline{0}1\\} - \\{0\\underline{1}1\\} \\] <p>\u539f\u672c \\(2\\) \u7684\u4f4d\u7f6e\u7528\u4e0b\u5212\u7ebf\u6807\u6ce8\u3002\u8fd9\u6837\u5c31\u8f6c\u5316\u4e3a\u4e86\u53ea\u6709 \\(0\\) \u548c \\(1\\) \u7684\u60c5\u51b5\u3002</p> <p>\u63a5\u4e0b\u6765\u8003\u8651\u53ea\u5305\u542b\u4e24\u4e2a \\(2\\) \u7684\u4f8b\u5b50\uff0c\u4f8b\u5982 \\(02121\\)\u3002\u53ef\u4ee5\u5229\u7528\u76f8\u540c\u7684\u601d\u8def\u5f97\u5230\u4e0b\u9762\u7684\u5f0f\u5b50</p> \\[ \\begin{matrix} \\{02121\\} &amp; = &amp; \\{0\\underline{0}121\\} - \\{0\\underline{1}121\\} \\\\  &amp; = &amp; (\\{0\\underline{0}1\\underline{0}1\\} - \\{0\\underline{0}1\\underline{1}1\\}) - (\\{0\\underline{1}1\\underline{0}1\\} - \\{0\\underline{1}1\\underline{1}1\\}) \\\\  &amp; = &amp; \\{0\\underline{0}1\\underline{0}1\\} - \\{0\\underline{0}1\\underline{1}1\\} - \\{0\\underline{1}1\\underline{0}1\\} + \\{0\\underline{1}1\\underline{1}1\\} \\\\ \\end{matrix} \\] <p>\u540c\u6837\u8f6c\u5316\u4e3a\u4e86\u53ea\u6709 \\(0\\) \u548c \\(1\\) \u7684\u60c5\u51b5\u3002</p>"},{"location":"2018-icpc-qingdao/g/#_3","title":"\u63a8\u5e7f\u5230\u4efb\u610f\u60c5\u51b5","text":"<p>\u719f\u6089\u5bb9\u65a5\u539f\u7406\u7684\u8bfb\u8005\u5e94\u8be5\u5f88\u5feb\u53d1\u73b0\uff0c\u4e0a\u8ff0\u5f0f\u5b50\u6b63\u662f\u5bb9\u65a5\u539f\u7406\u7684\u5f0f\u5b50\u3002\u4e0d\u96be\u5c06\u7b54\u6848\u8868\u793a\u4e3a\u5bb9\u65a5\u539f\u7406\u7684\u5f62\u5f0f\uff0c\u5373\u4e3a</p> \\[ \\sum (-1)^{c(a_1a_2\\cdots a_n)} \\times k(a_1a_2\\cdots a_n)^m \\] <p>\u5176\u4e2d \\(a_1, a_2, \\cdots, a_n\\) \u662f\u4e00\u4e2a\u7531 \\(0\\)\uff0c\\(1\\)\uff0c\\(\\underline{0}\\) \u548c \\(\\underline{1}\\) \u6784\u6210\u7684\u5e8f\u5217\uff0c\\(c(a_1a_2\\cdots a_n)\\) \u8868\u793a\u5e8f\u5217\u4e2d \\(\\underline{1}\\) \u7684\u6570\u91cf\uff0c\\(k(a_1a_2\\cdots a_n)\\) \u8868\u793a\u5e8f\u5217\u4e2d\u4e0d\u5305\u542b \\(1\\) \u6216 \\(\\underline{1}\\) \u7684\u533a\u95f4\u6570\u91cf\u3002</p> <p>\u6ce8\u610f\u5230\u5f0f\u5b50\u7684\u503c\u53ea\u548c \\(c\\) \u7684\u5947\u5076\u6027\u4ee5\u53ca\u5408\u6cd5\u533a\u95f4\u7684\u6570\u91cf\u6709\u5173\uff0c\u56e0\u6b64\u7ef4\u62a4 \\(f(i, j, 0/1)\\) \u8868\u793a\u53ea\u8003\u8651\u524d \\(i\\) \u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5b50\u5e8f\u5217\uff0c\u5176\u4e2d\u5408\u6cd5\u533a\u95f4\u7684\u6570\u91cf\u4e3a \\(j\\)\uff0c\u4e14 \\(1\\) \u548c \\(\\underline{1}\\) \u603b\u5171\u51fa\u73b0\u4e86\u5076\u6570\u6b21\u6216\u5947\u6570\u6b21\u7684\u60c5\u51b5\u6570\u3002\u7531\u4e8e\u5408\u6cd5\u533a\u95f4\u7684\u6570\u91cf\u53ea\u548c \\(1\\)\uff08\\(\\underline{1}\\)\uff09\u7684\u4f4d\u7f6e\u6709\u5173\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8df3\u8fc7\u6240\u6709\u7684 \\(0\\)\uff0c\u53ea\u5728\u53ef\u80fd\u4f1a\u51fa\u73b0 \\(1\\)\uff08\\(\\underline{1}\\)\uff09\u7684\u4f4d\u7f6e\u4e4b\u95f4\u8fdb\u884c\u9012\u63a8\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u5b9a\u4e49 \\(a_0 = a_{n + 1} = 1\\)\u3002\u8fd9\u5e76\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\u6700\u7ec8\u7b54\u6848\u5c31\u662f</p> \\[ \\sum\\limits_{j=0}^{\\frac{n(n + 1)}{2}} (f(n + 1, j, 0) - f(n + 1, j, 1)) \\times j^m \\] <p>\u6ce8\u610f\u5230\u5bb9\u65a5\u7684\u5f0f\u5b50\u91cc\uff0c\u6bcf\u4e00\u9879\u7684\u6b63\u8d1f\u53ea\u548c\u5e8f\u5217\u4e2d \\(\\underline{1}\\) \u51fa\u73b0\u7684\u6b21\u6570\u6709\u5173\uff0c\u800c\u72b6\u6001\u91cc\u7684 \\(0/1\\) \u662f \\(1\\) \u548c \\(\\underline{1}\\) \u603b\u5171\u51fa\u73b0\u7684\u6b21\u6570\u3002\u56e0\u6b64\u5982\u679c \u539f\u5e8f\u5217 \u4e2d \\(1\\) \u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u90a3\u4e48\u7b54\u6848\u8981\u518d\u4e58\u4ee5 \\(-1\\)\u3002</p> <p>\u8003\u8651\u5f53\u5e8f\u5217\u672b\u5c3e\u52a0\u5165\u4e00\u4e2a \\(1\\)\uff08\\(\\underline{1}\\)\uff09\u65f6\uff0c\u533a\u95f4\u6570\u91cf\u4f1a\u589e\u52a0\u591a\u5c11\u3002\u663e\u7136\u589e\u52a0\u7684\u533a\u95f4\u6570\u91cf\u53ea\u548c\u4e0a\u4e00\u4e2a \\(1\\)\uff08\\(\\underline{1}\\)\uff09\u7684\u4f4d\u7f6e\u6709\u5173\uff0c\u56e0\u6b64\u6211\u4eec\u679a\u4e3e\u4e0a\u4e00\u4e2a \\(1\\)\uff08\\(\\underline{1}\\)\uff09\u7684\u4f4d\u7f6e\u8fdb\u884c\u8f6c\u79fb\u3002\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b</p> \\[ f(i, k + \\frac{(i - j)(i - j - 1)}{2}, 0/1) = \\sum\\limits_{j=\\text{last}}^{i - 1} f(j, k, 1/0) \\] <p>\u5176\u4e2d \\(\\text{last}\\) \u8868\u793a \u539f\u5e8f\u5217 \u4e2d\u4e0a\u4e00\u4e2a \\(1\\) \u7684\u4f4d\u7f6e\uff08\u4e0d\u4f1a\u6bd4\u8fd9\u4e2a\u4f4d\u7f6e\u66f4\u5f80\u524d\uff0c\u56e0\u4e3a \\(2\\) \u53ef\u4ee5\u9009\u62e9\u53d8\u6210 \\(\\underline{0}\\)\uff0c\u800c\u539f\u6765\u5c31\u662f \\(1\\) \u7684\u4f4d\u7f6e\u6ca1\u5f97\u9009\uff09\u3002\u521d\u503c \\(f(0, 0, 0) = 0\\)\uff0c\\(f(0, 0, 1) = 1\\)\uff08\u56e0\u4e3a \\(a_0 = 1\\)\uff09\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^4)\\)\uff0c\u4f46\u5e38\u6570\u975e\u5e38\u5c0f\u3002\u4f8b\u5982\uff0c\u53c2\u8003\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u4e3a</p> \\[ \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^i \\frac{j^2}{2} \\approx \\frac{n^4}{48} \\] <p>\u53ef\u4ee5\u8f7b\u677e\u901a\u8fc7\u3002</p>"},{"location":"2018-icpc-qingdao/g/#_4","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 100\n#define MOD ((int) 1e9 + 7)\nusing namespace std;\n\nint n, m, A[MAXN + 10];\nlong long ans;\n\nlong long f[MAXN + 10][(MAXN + 1) * MAXN / 2 + 10][2];\nint lim[MAXN + 10];\n\n// \u5feb\u901f\u5e42\u6c42 a ** b\nlong long power(long long a, long long b) {\n    long long y = 1;\n    for (; b; b &gt;&gt;= 1) {\n        if (b &amp; 1) y = y * a % MOD;\n        a = a * a % MOD;\n    }\n    return y;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n    A[0] = A[n + 1] = 1;\n\n    f[0][0][0] = 0; f[0][0][1] = 1; lim[0] = 0;\n    for (int i = 1, last = 0; i &lt;= n + 1; i++) if (A[i] &gt; 0) {\n        // lim[i] \u8868\u793a\u524d i \u4e2a\u5143\u7d20\u6700\u591a\u6709\u51e0\u4e2a\u5408\u6cd5\u7684\u533a\u95f4\n        lim[i] = lim[last] + (i - last) * (i - last - 1) / 2;\n        for (int j = 0; j &lt;= lim[i]; j++) f[i][j][0] = f[i][j][1] = 0;\n        // \u5957\u7528\u8f6c\u79fb\u65b9\u7a0b\n        for (int j = last; j &lt; i; j++) if (A[j] &gt; 0) {\n            int delta = (i - j) * (i - j - 1) / 2;\n            for (int k = 0; k &lt;= lim[j]; k++) {\n                f[i][k + delta][0] = (f[i][k + delta][0] + f[j][k][1]) % MOD;\n                f[i][k + delta][1] = (f[i][k + delta][1] + f[j][k][0]) % MOD;\n            }\n        }\n        if (A[i] == 1) last = i;\n    }\n\n    // \u5982\u679c\u539f\u5e8f\u5217\u4e2d 1 \u51fa\u73b0\u4e86\u5947\u6570\u6b21\uff0c\u7b54\u6848\u53d6\u53cd\n    bool odd = false;\n    for (int i = 0; i &lt;= n + 1; i++) if (A[i] == 1) odd = !odd;\n\n    ans = 0;\n    for (int i = 0; i &lt;= lim[n + 1]; i++) ans = (ans + (f[n + 1][i][0] - f[n + 1][i][1] + MOD) * power(i, m)) % MOD;\n    if (odd) ans = (MOD - ans) % MOD;\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/h/","title":"H - Mirror","text":""},{"location":"2018-icpc-qingdao/h/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73870/373 (0.0%)"},{"location":"2018-icpc-qingdao/h/#_2","title":"\u9898\u89e3","text":"<p>\u6211\u4eec\u9996\u5148\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u3002</p> <ul> <li>\u82e5\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u8fde\u7ebf\u6ca1\u6709\u4efb\u4f55\u969c\u788d\uff0c\u5219\u7b54\u6848\u5c31\u662f \\((2m - 1) \\times l\\)\uff0c\u5176\u4e2d \\(l\\) \u662f\u8d77\u70b9\u548c\u7ec8\u70b9\u8fde\u7ebf\u7684\u8ddd\u79bb\u3002</li> <li>\u5426\u5219\uff0c\u82e5 \\(m = 1\\)\uff0c\u5219\u53ea\u9700\u8981\u8003\u8651\u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u7ed5\u8fc7\u969c\u788d\u7269\u548c\u955c\u5b50\u5230\u8fbe\u7ec8\u70b9\u7684\u6700\u77ed\u8def\uff0c\u65e0\u9700\u8003\u8651\u8def\u7ebf\u662f\u5426\u80fd\u770b\u5230\u8d77\u70b9\u6216\u7ec8\u70b9\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u8003\u8651\u7531\u8d77\u70b9\u3001\u7ec8\u70b9\u3001\u969c\u788d\u7269\u9876\u70b9\u3001\u955c\u5b50\u7aef\u70b9\u8fd9\u4e03\u4e2a\u70b9\u6784\u6210\u7684\u56fe\uff0c\u8ba1\u7b97\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002</li> <li>\u5426\u5219 \\(m &gt; 1\\)\u3002\u8fd9\u8981\u6c42\u5b58\u5728\u4e00\u6761\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8def\u7ebf\uff0c\u4f7f\u5f97\u8def\u7ebf\u4e0a\u4efb\u4f55\u4e00\u70b9\u90fd\u80fd\u770b\u89c1\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\u82e5\u8d77\u70b9\u6216\u7ec8\u70b9\u4e2d\uff0c\u4efb\u610f\u4e00\u70b9\u4f4d\u4e8e\u955c\u5b50\u5de6\u4fa7\u3002\u4e0d\u59a8\u5047\u8bbe\u662f\u7ec8\u70b9\u4f4d\u4e8e\u955c\u5b50\u5de6\u4fa7\uff0c\u90a3\u4e48\u5c06\u65e0\u6cd5\u4ece\u7ec8\u70b9\u770b\u5230\u8d77\u70b9\uff0c\u56e0\u4e3a\u6b64\u65f6\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u8fde\u7ebf\u5b58\u5728\u969c\u788d\uff0c\u4e14\u7ec8\u70b9\u65e0\u6cd5\u770b\u5230\u955c\u9762\u3002\u56e0\u6b64\u8be5\u60c5\u51b5\u65e0\u89e3\u3002</li> </ul> <p>\u6392\u9664\u4e0a\u8ff0\u7279\u6b8a\u60c5\u51b5\u540e\uff0c\u5269\u4e0b\u7684\u60c5\u51b5\u4e3a\uff1a\\(m &gt; 1\\)\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u8fde\u7ebf\u5b58\u5728\u969c\u788d\uff0c\u4e14\u4e24\u70b9\u90fd\u4f4d\u4e8e\u955c\u5b50\u53f3\u4fa7\u3002</p> <p>\u6b64\u65f6\uff0c\u6700\u4f18\u7b54\u6848\u5c06\u5206\u4e3a\u4e09\u4e2a\u90e8\u5206\uff1a</p> <ul> <li>\u4e00\u5f00\u59cb\uff0c\u5c06\u7b2c\u4e00\u5757\u77f3\u5934\u4ece\u8d77\u70b9\u642c\u5230\u7ec8\u70b9\uff0c\u8def\u5f84\u4e0a\u53ea\u8981\u80fd\u968f\u65f6\u770b\u5230\u8d77\u70b9\u5373\u53ef\u3002</li> <li>\u4e2d\u9014\uff0c\u8def\u5f84\u4e0a\u9700\u8981\u968f\u65f6\u80fd\u770b\u5230\u8d77\u70b9\u548c\u7ec8\u70b9\uff0c\u8fd9\u6761\u8def\u5f84\u5c06\u91cd\u590d\u8d70 \\((2m - 3)\\) \u6b21\u3002</li> <li>\u6700\u540e\uff0c\u5c06\u6700\u540e\u4e00\u5757\u77f3\u5934\u4ece\u8d77\u70b9\u642c\u5230\u7ec8\u70b9\uff0c\u8def\u5f84\u4e0a\u53ea\u8981\u80fd\u968f\u65f6\u770b\u5230\u7ec8\u70b9\u5373\u53ef\u3002</li> </ul> <p>\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\uff0c\u7a7f\u8fc7\u54ea\u4e9b\u76f4\u7ebf\uff0c\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u53ef\u89c1\u6027\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u3002\u4ee5\u8fd9\u4e9b\u76f4\u7ebf\u7684\u4ea4\u70b9\u4e3a\u5173\u952e\u70b9\u5efa\u56fe\uff0c\u8ba1\u7b97\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u8fde\u7ebf\u7684\u957f\u5ea6\uff0c\u662f\u5426\u5b58\u5728\u969c\u788d\u7269\uff0c\u4ee5\u53ca\u8fde\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u662f\u5426\u80fd\u770b\u89c1\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\u6700\u540e\u8ba1\u7b97\u5728\u7279\u5b9a\u53ef\u89c1\u6027\u8981\u6c42\u7684\u60c5\u51b5\u4e0b\uff0c\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6700\u77ed\u8def\u3002</p> <p>\u5bfc\u81f4\u53ef\u89c1\u6027\u53d1\u751f\u6539\u53d8\u7684\u76f4\u7ebf\u6709\uff1a</p> <ol> <li>\u8d77\u70b9 / \u7ec8\u70b9\u548c\u969c\u788d\u7269\u9876\u70b9\u7684\u8fde\u7ebf\u3002</li> <li>\u8d77\u70b9 / \u7ec8\u70b9\u548c\u955c\u9762\u7aef\u70b9\u7684\u8fde\u7ebf\u3002</li> <li>\u8d77\u70b9 / \u7ec8\u70b9\u7684\u955c\u50cf\u548c\u955c\u9762\u7aef\u70b9\u7684\u8fde\u7ebf\u3002</li> <li>\u8d77\u70b9 / \u7ec8\u70b9\u7684\u955c\u50cf\u548c\u969c\u788d\u7269\u9876\u70b9\u7684\u8fde\u7ebf\u3002</li> <li>\u8d77\u70b9 / \u7ec8\u70b9\u7684\u955c\u50cf\u548c\u969c\u788d\u7269\u9876\u70b9\u955c\u50cf\u7684\u8fde\u7ebf\u3002</li> </ol> <p></p> <p>\u60a8\u53ef\u80fd\u8ba4\u4e3a\uff0c\u969c\u788d\u7269\u7684\u8fb9\u754c\u4ee5\u53ca\u955c\u9762\u4e5f\u4f1a\u8ba9\u53ef\u89c1\u6027\u53d1\u751f\u6539\u53d8\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u8003\u8651\u5b83\u4eec\uff1f\u56e0\u4e3a\u4e00\u6761\u5408\u6cd5\u7684\u8def\u5f84\u4e0d\u80fd\u7a7f\u8fc7\u969c\u788d\u7269\u7684\u8fb9\u754c\u6216\u955c\u9762\uff0c\u56e0\u6b64\u6ca1\u6709\u8003\u8651\u7684\u5fc5\u8981\u3002</p> <p>\u8ba1\u7b97\u4e24\u70b9\u4e4b\u95f4\u8fde\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u662f\u5426\u603b\u80fd\u770b\u5230\u8d77\u70b9\u548c\u7ec8\u70b9\u65f6\uff0c\u7531\u4e8e\u8fde\u7ebf\u53ef\u80fd\u7a7f\u8fc7\u591a\u6761\u6539\u53d8\u53ef\u89c1\u6027\u7684\u76f4\u7ebf\uff0c\u56e0\u6b64\u9700\u8981\u6c42\u51fa\u8fde\u7ebf\u4e0e\u6bcf\u6761\u76f4\u7ebf\u7684\u4ea4\u70b9\uff0c\u5e76\u68c0\u67e5\u76f8\u90bb\u4ea4\u70b9\u7684\u4e2d\u70b9\u7684\u53ef\u89c1\u6027\u3002\u56e0\u4e3a\u53ef\u89c1\u6027\u76f4\u7ebf\u56f4\u8d77\u6765\u7684\u533a\u57df\u662f\u51f8\u7684\uff0c\u8fd9\u6837\u505a\u662f\u6b63\u786e\u7684\u3002</p> <p>\u672c\u9898\u8fd8\u6709\u4e00\u4e2a\u4f18\u5316\u5e38\u6570\u7684\u6280\u5de7\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u6700\u4f18\u8def\u7ebf\u603b\u662f\u4f4d\u4e8e\u955c\u9762\u53f3\u4fa7\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u955c\u9762\u76f4\u7ebf\u4e0a\uff0c\u4ee5\u53ca\u955c\u9762\u5de6\u4fa7\u7684\u6240\u6709\u70b9\u90fd\u6392\u9664\uff0c\u53ea\u8003\u8651\u955c\u9762\u53f3\u4fa7\u7684\u70b9\u3002\u6211\u4eec\u7b80\u5355\u8ba1\u7b97\u4e00\u4e0b\u70b9\u7684\u6570\u91cf\uff0c\u6ce8\u610f\u5230\u7b2c \\(1\\) \u7c7b\u76f4\u7ebf\u548c\u7b2c \\(5\\) \u7c7b\u76f4\u7ebf\u5bf9\u79f0\uff0c\u7b2c \\(2\\) \u7c7b\u76f4\u7ebf\u548c\u7b2c \\(3\\) \u7c7b\u76f4\u7ebf\u5bf9\u79f0\u3002\u56e0\u6b64\uff0c\u8fd9\u51e0\u7c7b\u76f4\u7ebf\u5728\u955c\u9762\u53f3\u4fa7\u7684\u4ea4\u70b9\u6709 \\(5 \\times (15 + 10 + 5) \\div 2 = 75\\) \u4e2a\u3002\u5c31\u7b97\u7b2c \\(4\\) \u7c7b\u76f4\u7ebf\u548c\u5176\u5b83\u76f4\u7ebf\u7684\u4ea4\u70b9\u90fd\u5728\u955c\u9762\u53f3\u4fa7\uff0c\u90a3\u4e48\u9700\u8981\u8003\u8651\u7684\u70b9\u6700\u591a\u4e5f\u53ea\u6709 \\(75 + 3 \\times 18 + 3 \\times 10 = 159\\) \u4e2a\uff0c\u518d\u52a0\u4e0a\u8d77\u70b9\u548c\u7ec8\u70b9\u5c31\u662f \\(161\\) \u4e2a\u3002</p> <p>\u56e0\u6b64\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2t + n^2\\log n)\\)\uff0c\u5176\u4e2d \\(n = 161\\) \u662f\u8981\u8003\u8651\u7684\u70b9\u7684\u6570\u91cf\uff0c\\(t = 26\\) \u662f\u5bfc\u81f4\u53ef\u89c1\u6027\u53d1\u751f\u6539\u53d8\u7684\u76f4\u7ebf\u6570\u91cf\u3002</p>"},{"location":"2018-icpc-qingdao/h/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 200\nusing namespace std;\ntypedef long double db;\n\nconst db eps = 1e-12;\nconst db inf = 1.0 / 0.0;\n\nint sgn(db x) {\n    if (x &gt; eps) return 1;\n    else if (x &lt; -eps) return -1;\n    else return 0;\n}\n\nstruct Point {\n    db x, y;\n\n    Point() {}\n    Point(db x, db y): x(x), y(y) {}\n\n    db len() const {\n        return sqrt(x * x + y * y);\n    }\n\n    Point operator +(const Point &amp;p) const {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator -(const Point &amp;p) const {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator *(db k) const {\n        return Point(x * k, y * k);\n    }\n\n    Point operator /(db k) const {\n        return Point(x / k, y / k);\n    }\n\n    db operator *(const Point &amp;p) const {\n        return x * p.y - p.x * y;\n    }\n\n    db operator ^(const Point &amp;p) const {\n        return x * p.x + y * p.y;\n    }\n\n    bool operator &lt;(const Point &amp;p) const {\n        return sgn(x - p.x) &lt; 0 || (sgn(x - p.x) == 0 &amp;&amp; sgn(y - p.y) &lt; 0);\n    }\n\n    bool operator ==(const Point &amp;p) const {\n        return sgn(x - p.x) == 0 &amp;&amp; sgn(y - p.y) == 0;\n    }\n};\n\nstruct Line {\n    Point s, t;\n\n    Line() {}\n    Line(Point s, Point t): s(s), t(t) {}\n\n    db intersectRatio(const Line &amp;l) const {\n        if (sgn((t - s) * (l.t - l.s)) == 0) return inf;\n        db u = (l.s - s) * (l.t - l.s), v = (t - s) * (l.t - l.s);\n        return u / v;\n    }\n\n    vector&lt;Point&gt; operator &amp;(const Line &amp;l) const {\n        db r = intersectRatio(l);\n        if (r == inf) return {};\n        return {s + (t - s) * r};\n    }\n\n    Point reflect(const Point &amp;p) const {\n        db u = ((p - s) ^ (t - s)), v = (t - s).len();\n        return (s + (t - s) * (u / v / v)) * 2 - p;\n    }\n\n    db len() const {\n        return sqrt((s.x - t.x) * (s.x - t.x) + (s.y - t.y) * (s.y - t.y));\n    }\n};\n\nint X;\n// s, t\uff1a\u8d77\u70b9\u548c\u7ec8\u70b9\n// m1, m2\uff1a\u955c\u5b50\u7684\u7aef\u70b9\n// a[i]\uff1a\u969c\u788d\u7269\u7684\u9876\u70b9\nPoint s, t, m1, m2, a[3];\n// poly[i]\uff1a\u969c\u788d\u7269\u6784\u6210\u7684\u591a\u8fb9\u5f62\u7684\u4e00\u6761\u8fb9\nLine poly[3];\n\n// ms, mt\uff1a\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u955c\u50cf\n// ma[i]\uff1a\u969c\u788d\u7269\u7684\u9876\u70b9\u7684\u955c\u50cf\nPoint ms, mt, ma[3];\n// mr\uff1a\u955c\u5b50\n// mpoly[i]\uff1a\u969c\u788d\u7269\u6784\u6210\u7684\u591a\u8fb9\u5f62\u7684\u4e00\u6761\u8fb9\u7684\u955c\u50cf\nLine mr, mpoly[3];\n\n// \u6c42\u7ebf\u6bb5 l1 \u548c l2 \u662f\u5426\u76f8\u4ea4\n// strict \u8868\u793a\u662f\u5426\u4e25\u683c\u76f8\u4ea4\uff08strict == true \u5219\u5728\u7aef\u70b9\u76f8\u4ea4\u4e0d\u7b97\u76f8\u4ea4\uff09\nbool segmentIntersect(Line &amp;l1, Line &amp;l2, bool strict) {\n    db r1 = l1.intersectRatio(l2), r2 = l2.intersectRatio(l1);\n    if (strict) return sgn(r1) &gt; 0 &amp;&amp; sgn(r1 - 1) &lt; 0 &amp;&amp; sgn(r2) &gt; 0 &amp;&amp; sgn(r2 - 1) &lt; 0;\n    else return sgn(r1) &gt;= 0 &amp;&amp; sgn(r1 - 1) &lt;= 0 &amp;&amp; sgn(r2) &gt;= 0 &amp;&amp; sgn(r2 - 1) &lt;= 0;\n}\n\n// \u68c0\u67e5\u7ebf\u6bb5 l \u662f\u5426\u4e0e\u969c\u788d\u7269\u6216\u955c\u5b50\u4e25\u683c\u76f8\u4ea4\nbool check(Line &amp;l) {\n    for (int i = 0; i &lt; 3; i++) if (segmentIntersect(l, poly[i], true)) return false;\n    if (segmentIntersect(l, mr, true)) return false;\n    return true;\n}\n\nint n;\nvector&lt;int&gt; e[MAXN], msk[MAXN];\nvector&lt;db&gt; v[MAXN];\ndb dis[MAXN];\n\ndb dijkstra(int MSK) {\n    for (int i = 0; i &lt; n; i++) dis[i] = inf;\n    typedef pair&lt;db, int&gt; pdi;\n    priority_queue&lt;pdi&gt; pq;\n    pq.push(pdi(0, 0));\n    while (!pq.empty()) {\n        pdi p = pq.top(); pq.pop();\n        int sn = p.second;\n        if (dis[sn] &lt; inf) continue;\n        dis[sn] = -p.first;\n        for (int i = 0; i &lt; e[sn].size(); i++) {\n            int fn = e[sn][i];\n            if ((MSK &amp; msk[sn][i]) == MSK)\n                pq.push(pdi(-dis[sn] - v[sn][i], fn));\n        }\n    }\n    return dis[1];\n}\n\n// \u7279\u6b8a\u60c5\u51b5 2 \u7684\u6784\u56fe\n// \u53ea\u8981\u8003\u8651\u8d77\u70b9\u7ec8\u70b9\uff0c\u969c\u788d\u7269\u9876\u70b9\u548c\u955c\u5b50\u7aef\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5373\u53ef\uff0c\u65e0\u9700\u8003\u8651\u53ef\u89c1\u6027\nvoid build1() {\n    vector&lt;Point&gt; keys;\n    keys.push_back(s); keys.push_back(t);\n    keys.push_back(m1); keys.push_back(m2);\n    for (int i = 0; i &lt; 3; i++) keys.push_back(a[i]);\n\n    n = keys.size();\n    for (int i = 0; i &lt; n; i++) e[i].clear(), v[i].clear(), msk[i].clear();\n    for (int i = 0; i &lt; n; i++) for (int j = i + 1; j &lt; n; j++) {\n        Line l(keys[i], keys[j]);\n        if (!check(l)) continue;\n        e[i].push_back(j); v[i].push_back(l.len()); msk[i].push_back(0);\n        e[j].push_back(i); v[j].push_back(l.len()); msk[j].push_back(0);\n    }\n}\n\n// \u70b9 p \u662f\u5426\u80fd\u76f4\u63a5\u770b\u5230\uff0c\u6216\u901a\u8fc7\u955c\u5b50\u770b\u5230\u70b9 goal\nbool visible(Point &amp;p, Point &amp;goal) {\n    // \u76f4\u63a5\u770b\u5230\n    Line l = Line(p, goal);\n    if (check(l)) return true;\n    // \u901a\u8fc7\u955c\u5b50\u770b\u5230\n    l = Line(p, mr.reflect(goal));\n    // \u5982\u679c\u8981\u901a\u8fc7\u955c\u5b50\u770b\u5230\uff0c\u90a3\u4e48 p \u4e0e goal \u955c\u50cf\u7684\u8fde\u7ebf\u4e0d\u80fd\u4e0e\u969c\u788d\u7269\uff0c\u6216\u969c\u788d\u7269\u7684\u955c\u50cf\u76f8\u4ea4\n    if (!segmentIntersect(l, mr, false)) return false;\n    for (int i = 0; i &lt; 3; i++) {\n        if (segmentIntersect(l, poly[i], true)) return false;\n        if (segmentIntersect(l, mpoly[i], true)) return false;\n    }\n    return true;\n}\n\n// \u7ebf\u6bb5 l \u4e0a\u7684\u6bcf\u4e2a\u70b9\u662f\u5426\u90fd\u80fd\u770b\u89c1\u70b9 goal\n// border\uff1a\u5bfc\u81f4\u53ef\u89c1\u6027\u53d1\u751f\u6539\u53d8\u7684\u76f4\u7ebf\nint visible(Line &amp;l, Point &amp;goal, vector&lt;Line&gt; &amp;border) {\n    typedef pair&lt;db, Point&gt; pdp;\n    vector&lt;pdp&gt; vec;\n    vec.push_back(pdp(0, l.s));\n    vec.push_back(pdp(1, l.t));\n    // \u6c42\u7ebf\u6bb5 l \u4e0e border \u7684\u4ea4\u70b9\n    for (Line &amp;b : border) {\n        db r = l.intersectRatio(b);\n        if (sgn(r) &gt; 0 &amp;&amp; sgn(r - 1) &lt; 0) vec.push_back(pdp(r, l.s + (l.t - l.s) * r));\n    }\n    sort(vec.begin(), vec.end());\n\n    // \u68c0\u67e5\u7ecf\u8fc7\u7684\u6bcf\u4e2a\u533a\u57df\u7684\u53ef\u89c1\u6027\n    // \u7531\u4e8e\u6bcf\u4e2a\u533a\u57df\u90fd\u662f\u51f8\u7684\uff0c\u56e0\u6b64\u53ea\u8981\u770b\u76f8\u90bb\u4ea4\u70b9\u7684\u4e2d\u70b9\u7684\u53ef\u89c1\u6027\u5373\u53ef\n    for (int i = 1; i &lt; vec.size(); i++) {\n        Point p = (vec[i - 1].second + vec[i].second) / 2;\n        if (!visible(p, goal)) return 0;\n    }\n    return 1;\n}\n\n// \u4e00\u822c\u60c5\u51b5\u7684\u6784\u56fe\n// \u8003\u8651\u5bfc\u81f4\u53ef\u89c1\u6027\u6539\u53d8\u7684\u76f4\u7ebf\u7684\u4ea4\u70b9\uff0c\u4ee5\u5b83\u4eec\u4e3a\u8282\u70b9\u6784\u56fe\nvoid build2() {\n    // \u6c42\u51fa\u53ef\u80fd\u6539\u53d8\u53ef\u89c1\u6027\u7684\u76f4\u7ebf\n    vector&lt;Line&gt; border;\n\n    border.push_back(Line(s, m1)); border.push_back(Line(s, m2));\n    border.push_back(Line(t, m1)); border.push_back(Line(t, m2));\n    for (int i = 0; i &lt; 3; i++) {\n        border.push_back(Line(s, a[i]));\n        border.push_back(Line(t, a[i]));\n    }\n\n    border.push_back(Line(ms, m1)); border.push_back(Line(ms, m2));\n    border.push_back(Line(mt, m1)); border.push_back(Line(mt, m2));\n    for (int i = 0; i &lt; 3; i++) {\n        border.push_back(Line(ms, a[i])); border.push_back(Line(ms, ma[i]));\n        border.push_back(Line(mt, a[i])); border.push_back(Line(mt, ma[i]));\n    }\n\n    // \u8ba1\u7b97 border \u7684\u4ea4\u70b9\uff0c\u53ea\u7559\u4e0b\u955c\u5b50\u53f3\u8fb9\u7684\u70b9\n    vector&lt;Point&gt; keys;\n    keys.push_back(s); keys.push_back(t);\n    for (Line &amp;l1 : border) for (Line &amp;l2 : border) for (Point &amp;p : l1 &amp;l2)\n        if (sgn((m2 - m1) * (p - m1)) &lt; 0 &amp;&amp; find(keys.begin(), keys.end(), p) == keys.end())\n            keys.push_back(p);\n\n    n = keys.size();\n    for (int i = 0; i &lt; n; i++) e[i].clear(), v[i].clear(), msk[i].clear();\n    // \u5224\u65ad\u9876\u70b9\u4e4b\u95f4\u8fde\u7ebf\u7684\u53ef\u884c\u6027\u4ee5\u53ca\u53ef\u89c1\u6027\n    for (int i = 0; i &lt; n; i++) for (int j = i + 1; j &lt; n; j++) {\n        Line l = Line(keys[i], keys[j]);\n        // \u8fde\u7ebf\u4e0e\u969c\u788d\u7269\u76f8\u649e\uff0c\u5219\u65e0\u6cd5\u76f4\u63a5\u4ece keys[i] \u8d70\u5230 keys[j]\n        if (!check(l)) continue;\n        // \u6c42\u8fde\u7ebf\u4e0a\u6bcf\u4e2a\u70b9\u662f\u5426\u80fd\u770b\u5230\u8d77\u70b9\u4ee5\u53ca\u7ec8\u70b9\n        int tmp = visible(l, s, border) + visible(l, t, border) * 2;\n        e[i].push_back(j); v[i].push_back(l.len()); msk[i].push_back(tmp);\n        e[j].push_back(i); v[j].push_back(l.len()); msk[j].push_back(tmp);\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;X);\n    scanf(\"%Lf%Lf%Lf%Lf\", &amp;s.x, &amp;s.y, &amp;t.x, &amp;t.y);\n    scanf(\"%Lf%Lf%Lf%Lf\", &amp;m1.x, &amp;m1.y, &amp;m2.x, &amp;m2.y);\n    for (int i = 0; i &lt; 3; i++) scanf(\"%Lf%Lf\", &amp;a[i].x, &amp;a[i].y);\n\n    mr = Line(m1, m2);\n    ms = mr.reflect(s); mt = mr.reflect(t);\n    for (int i = 0; i &lt; 3; i++) ma[i] = mr.reflect(a[i]);\n    for (int i = 0; i &lt; 3; i++) {\n        poly[i] = Line(a[i], a[(i + 1) % 3]);\n        mpoly[i] = Line(ma[i], ma[(i + 1) % 3]);\n    }\n\n    Line st(s, t);\n    if (check(st)) {\n        // \u7279\u6b8a\u60c5\u51b5 1\uff1as \u548c t \u7684\u8fde\u7ebf\u6ca1\u6709\u969c\u788d\n        printf(\"%.12Lf\\n\", st.len() * (2 * X - 1));\n    } else if (X == 1) {\n        // \u7279\u6b8a\u60c5\u51b5 2\uff1a\u53ea\u6709\u4e00\u4e2a\u77f3\u5934\n        build1();\n        db ans = dijkstra(0);\n        if (ans &lt; inf) printf(\"%.12Lf\\n\", ans);\n        else printf(\"-1\\n\");\n    } else if (sgn((m2 - m1) * (s - m1)) &lt; 0 &amp;&amp; sgn((m2 - m1) * (t - m1)) &lt; 0) {\n        // \u4e00\u822c\u60c5\u51b5\uff1a\u77f3\u5934\u591a\u4e8e\u4e00\u4e2a\uff0cs \u548c t \u7684\u8fde\u7ebf\u6709\u969c\u788d\uff0c\u8d77\u70b9\u7ec8\u70b9\u90fd\u5728\u955c\u5b50\u53f3\u8fb9\n        build2();\n        db ans = dijkstra(1) + dijkstra(3) * (2 * X - 3) + dijkstra(2);\n        if (ans &lt; inf) printf(\"%.12Lf\\n\", ans);\n        else printf(\"-1\\n\");\n    } else {\n        // \u7279\u6b8a\u60c5\u51b5 3\uff1a\u77f3\u5934\u591a\u4e8e\u4e00\u4e2a\uff0cs \u548c t \u7684\u8fde\u7ebf\u6709\u969c\u788d\uff0c\u8d77\u70b9\u7ec8\u70b9\u81f3\u5c11\u4e00\u4e2a\u5728\u955c\u5b50\u5de6\u8fb9\n        printf(\"-1\\n\");\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/i/","title":"I - Soldier Game","text":""},{"location":"2018-icpc-qingdao/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73876/373 (1.6%)"},{"location":"2018-icpc-qingdao/i/#_2","title":"\u9898\u89e3","text":"<p>\u6211\u4eec\u6362\u4e00\u79cd\u65b9\u5f0f\u63cf\u8ff0\u9898\u76ee\uff1a</p> <p>\u7528\u957f\u5ea6\u4e3a \\(1\\) \u6216 \\(2\\) \u7684\u7ebf\u6bb5\u8986\u76d6\u6574\u4e2a\u5e8f\u5217\uff0c\u7ebf\u6bb5\u7684\u4ef7\u503c\u5c31\u662f\u7ebf\u6bb5\u8986\u76d6\u7684\u5143\u7d20\u4e4b\u548c\u3002\u6700\u5c0f\u5316\u6700\u5927\u4ef7\u503c\u548c\u6700\u5c0f\u4ef7\u503c\u4e4b\u5dee\u3002</p> <p>\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u89e3\u51b3\u8be5\u95ee\u9898\u3002\u7ef4\u62a4 \\(f(l, r, x \\in \\{0, 1\\}, y \\in \\{0, 1\\})\\) \u8868\u793a\u8986\u76d6\u5b50\u6570\u7ec4 \\(a_l, a_{l + 1}, \\cdots, a_r\\) \u7684\u6700\u5927\u4ef7\u503c\u6700\u5c0f\u662f\u591a\u5c11\u3002\u5176\u4e2d\uff1a</p> <ul> <li>\\(x = 0\\) \u8868\u793a\u8986\u76d6 \\(a_l\\) \u7684\u7ebf\u6bb5\u88ab\u5b8c\u5168\u5305\u542b\u5728\u533a\u95f4 \\([l, r]\\) \u4e2d\uff0c\u5373\u8986\u76d6 \\(a_l\\) \u7684\u7ebf\u6bb5\u53ef\u80fd\u662f \\([l, l]\\) \u6216 \\([l, l + 1]\\)\u3002</li> <li>\\(x = 1\\) \u8868\u793a\u8986\u76d6 \\(a_l\\) \u7684\u7ebf\u6bb5\u6709\u4e00\u90e8\u5206\u4e0d\u5728 \\([l, r]\\) \u4e2d\uff0c\u5373\u8986\u76d6 \\(a_l\\) \u7684\u7ebf\u6bb5\u662f \\([l - 1, l]\\)\u3002</li> <li>\\(y = 0\\) \u8868\u793a\u8986\u76d6 \\(a_r\\) \u7684\u7ebf\u6bb5\u88ab\u5b8c\u5168\u5305\u542b\u5728\u533a\u95f4 \\([l, r]\\) \u4e2d\uff0c\u5373\u8986\u76d6 \\(a_r\\) \u7684\u7ebf\u6bb5\u53ef\u80fd\u662f \\([r, r]\\) \u6216 \\([r - 1, r]\\)\u3002</li> <li>\\(y = 1\\) \u8868\u793a\u8986\u76d6 \\(a_r\\) \u7684\u7ebf\u6bb5\u6709\u4e00\u90e8\u5206\u4e0d\u5728 \\([l, r]\\) \u4e2d\uff0c\u5373\u8986\u76d6 \\(a_r\\) \u7684\u7ebf\u6bb5\u662f \\([r, r + 1]\\)\u3002</li> </ul> <p>\u53ef\u4ee5\u5f97\u5230\u7ebf\u6bb5\u6811\u4e0a\u7684\u9012\u5f52\u65b9\u7a0b\uff1a</p> \\[ f(l, r, x, y) = \\min_{k \\in {0, 1}} \\{ \\max(f(l, m, x, k), f(m + 1, r, k, y)) \\} \\] <p>\u5176\u4e2d \\(m = \\lfloor\\frac{l + r}{2}\\rfloor\\)\u3002\u7b54\u6848\u5c31\u662f \\(f(1, n, 0, 0)\\)\uff0c\u521d\u503c\u4e3a\uff1a</p> <ul> <li>\\(f(i, i, 0, 0) = a_i\\)\uff0c\u8fd9\u662f\u957f\u5ea6\u4e3a \\(1\\) \u7684\u7ebf\u6bb5\u3002</li> <li>\\(f(i, i, 0, 1) = a_i + a_{i + 1}\\)\uff0c\u8fd9\u662f\u957f\u5ea6\u4e3a \\(2\\) \u7684\u7ebf\u6bb5\u3002</li> <li>\\(f(i, i, 1, 0) = -\\infty\\)\uff0c\u6b64\u65f6\u8986\u76d6 \\(a_i\\) \u7684\u4ee3\u4ef7\u7b97\u5728\u524d\u4e00\u4e2a\u533a\u95f4\u91cc\u3002</li> <li>\\(f(i, i, 1, 1) = +\\infty\\)\uff0c\\(a_i\\) \u4e0d\u80fd\u540c\u65f6\u88ab\u4e24\u4e2a\u7ebf\u6bb5\u8986\u76d6\u3002</li> </ul> <p>\u63a5\u4e0b\u6765\u8003\u8651\u679a\u4e3e\u7ebf\u6bb5\u7684\u6700\u5c0f\u4ef7\u503c \\(v\\)\uff0c\u5e76\u5c06\u6240\u6709\u4ef7\u503c\u5c0f\u4e8e \\(v\\) \u7684\u7ebf\u6bb5\u79fb\u9664\uff08\u4e0d\u9700\u8981\u771f\u7684\u79fb\u9664\uff0c\u53ef\u4ee5\u628a\u5b83\u4eec\u7684\u4ef7\u503c\u6539\u4e3a \\(+\\infty\\)\uff09\uff0c\u6b64\u65f6\u7b54\u6848\u5c31\u662f \\(f(1, n, 0, 0) - v\\)\u3002</p> <p>\u4e00\u5171\u53ea\u6709 \\((2n - 1)\\) \u79cd \\(v\\) \u503c\uff0c\u6bcf\u6b21\u7528\u7ebf\u6bb5\u6811\u4fee\u6539\u7ebf\u6bb5\u7684\u4ef7\u503c\u5e76\u7ef4\u62a4 \\(f\\) \u7684\u503c\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/i/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define INF ((long long) 1e18)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\ntypedef pair&lt;long long, pii&gt; plii;\n\nint n, A[MAXN + 10];\nlong long ans;\n\nlong long f[MAXN * 4 + 10][2][2];\n\n// \u5957\u9012\u5f52\u65b9\u7a0b\uff0c\u66f4\u65b0\u7ebf\u6bb5\u6811\u4e0a\u7684 f \u503c\nvoid update(int id) {\n    int nxt = id &lt;&lt; 1;\n    for (int i = 0; i &lt;= 1; i++) for (int j = 0; j &lt;= 1; j++) {\n        f[id][i][j] = INF;\n        for (int k = 0; k &lt;= 1; k++) f[id][i][j] = min(f[id][i][j], max(f[nxt][i][k], f[nxt | 1][k][j]));\n    }\n}\n\n// \u6784\u5efa\u7ebf\u6bb5\u6811\nvoid build(int id, int l, int r) {\n    if (l == r) {\n        // \u9012\u5f52\u65b9\u7a0b\u521d\u503c\n        f[id][0][0] = A[l];\n        f[id][0][1] = l &lt; n ? A[l] + A[l + 1] : INF;\n        f[id][1][0] = l &gt; 1 ? -INF : INF;\n        f[id][1][1] = INF;\n    } else {\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        build(nxt, l, mid);\n        build(nxt | 1, mid + 1, r);\n        update(id);\n    }\n}\n\n// \u628a\u4ee5 pos \u4e3a\u8d77\u70b9\uff0clen \u4e3a\u957f\u5ea6\u7684\u7ebf\u6bb5\u7684\u4ef7\u503c\u6539\u6210 +INF\nvoid modify(int id, int l, int r, int pos, int len) {\n    if (l == r) {\n        if (len == 1) f[id][0][0] = INF;\n        else f[id][0][1] = INF;\n    } else {\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (pos &lt;= mid) modify(nxt, l, mid, pos, len);\n        else modify(nxt | 1, mid + 1, r, pos, len);\n        update(id);\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    build(1, 1, n);\n    // \u5c06\u6240\u6709\u7ebf\u6bb5\u7684\u4ef7\u503c\u6392\u5e8f\uff0c\u4ee5\u4fbf\u679a\u4e3e\u6700\u5c0f\u4ef7\u503c\n    vector&lt;plii&gt; vec;\n    for (int i = 1; i &lt;= n; i++) vec.push_back(plii(A[i], pii(i, 1)));\n    for (int i = 1; i &lt; n; i++) vec.push_back(plii(A[i] + A[i + 1], pii(i, 2)));\n    sort(vec.begin(), vec.end());\n\n    ans = INF;\n    // \u679a\u4e3e\u6700\u5c0f\u4ef7\u503c\n    for (plii p : vec) {\n        ans = min(ans, f[1][0][0] - p.first);\n        modify(1, 1, n, p.second.first, p.second.second);\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/j/","title":"J - Books","text":""},{"location":"2018-icpc-qingdao/j/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387350/373 (93.8%)"},{"location":"2018-icpc-qingdao/j/#_2","title":"\u9898\u89e3","text":"<p>\u60a8\u53ef\u80fd\u4e00\u5f00\u59cb\u4f1a\u5c1d\u8bd5\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u800c\u672c\u9898\u6ca1\u6709\u4e8c\u5206\u6027\u3002\u8003\u8651\u6709\u4e09\u672c\u4e66\uff0c\u4ef7\u683c\u5206\u522b\u4e3a \\(4\\)\uff0c\\(1\\)\uff0c\\(2\\)\u3002\u5982\u679c\u6709 \\(3\\) \u5757\u94b1\u53ef\u4ee5\u4e70\u6700\u540e\u4e24\u672c\u4e66\uff0c\u5982\u679c\u6709 \\(4\\) \u5757\u94b1\u53ea\u80fd\u4e70\u7b2c\u4e00\u672c\u4e66\uff0c\u5982\u679c\u6709 \\(5\\) \u5757\u94b1\u53c8\u80fd\u4e70\u524d\u4e24\u672c\u4e66\u3002</p> <p>\u9996\u5148\u6765\u5224\u65ad\u7279\u6b8a\u60c5\u51b5\u3002</p> <ul> <li>\u5982\u679c\u6240\u6709\u4e66\u5168\u4e70\u4e86\u5c31\u662f <code>Richman</code>\u3002</li> <li>\u7531\u4e8e\u4ef7\u683c\u4e3a \\(0\\) \u7684\u4e66\u4e00\u5b9a\u4f1a\u8d2d\u4e70\uff0c\u8bbe\u4ef7\u683c\u4e3a \\(0\\) \u7684\u4e66\u6709 \\(z\\) \u672c\u3002\u5982\u679c \\(z &gt; m\\) \u5c31\u662f <code>Impossible</code>\u3002</li> </ul> <p>\u63a5\u4e0b\u6765\u8ba8\u8bba\u4e00\u822c\u60c5\u51b5\u3002\u9996\u5148\u628a\u4ef7\u683c\u4e3a \\(0\\) \u7684\u4e66\u90fd\u53bb\u6389\uff0c\u4ece\u5269\u4e0b\u7684 \\((n - z)\\) \u672c\u4e66\u4e2d\u8d2d\u4e70 \\((m - z)\\) \u672c\u3002\u5176\u5b9e\u7ecf\u8fc7\u601d\u8003\u4e0d\u96be\u53d1\u73b0\uff0c\u7b54\u6848\u5c31\u662f\u524d \\((m - z)\\) \u672c\u4e66\u7684\u4ef7\u683c\u4e4b\u548c\uff0c\u52a0\u4e0a\u5269\u4e0b \\((n - m)\\) \u672c\u4e66\u7684\u6700\u5c0f\u4ef7\u683c\u51cf\u4e00\u3002\u5bb9\u6613\u53d1\u73b0\u65e0\u8bba\u518d\u589e\u52a0\u591a\u5c11\u94b1\uff0c\u90fd\u4f1a\u81f3\u5c11\u989d\u5916\u8d2d\u4e70\u5269\u4e0b\u7684\u4e00\u672c\u4e66\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/j/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, m, A[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n\n    int zero = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;A[i]);\n        if (A[i] == 0) zero++;\n    }\n\n    // \u7279\u6b8a\u60c5\u51b5\n    if (n == m) printf(\"Richman\\n\");\n    else if (zero &gt; m) printf(\"Impossible\\n\");\n    else {\n        m -= zero;\n        // \u8ba1\u7b97\u524d m - zero \u672c\u4e66\u7684\u4ef7\u683c\u4e4b\u548c\n        long long sm = 0;\n        int i;\n        for (i = 1; m &gt; 0; i++) {\n            if (A[i] == 0) continue;\n            sm += A[i];\n            m--;\n        }\n        // \u6c42\u5269\u4e0b n - m \u672c\u4e66\u7684\u6700\u5c0f\u4ef7\u503c\n        int mn = 1e9;\n        for (; i &lt;= n; i++) if (A[i] &gt; 0) mn = min(mn, A[i]);\n        // \u8f93\u51fa\u7b54\u6848\n        printf(\"%lld\\n\", sm + mn - 1);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/k/","title":"K - Airdrop","text":""},{"location":"2018-icpc-qingdao/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738710/373 (2.7%)"},{"location":"2018-icpc-qingdao/k/#_2","title":"\u9898\u89e3","text":"<p>\u4e0d\u59a8\u4ee5\u7a7a\u6295\u4e3a\u539f\u70b9\u5efa\u7acb\u65b0\u7684\u5750\u6807\u7cfb\uff0c\u7814\u7a76\u54ea\u4e9b\u73a9\u5bb6\u53ef\u80fd\u4f1a\u76f8\u649e\u3002</p> <ul> <li>\u7531\u4e8e\u6240\u6709\u73a9\u5bb6\u540c\u65f6\u79fb\u52a8\uff0c\u56e0\u6b64\u53ea\u6709\u5230\u539f\u70b9\u8ddd\u79bb\u76f8\u7b49\u7684\u73a9\u5bb6\u53ef\u80fd\u76f8\u649e\u3002</li> <li>\u7531\u4e8e\u6240\u6709\u73a9\u5bb6\u4f18\u5148\u4e0a\u4e0b\u79fb\u52a8\uff0c\u7136\u540e\u624d\u5de6\u53f3\u79fb\u52a8\uff0c\u56e0\u6b64\u53ea\u6709\u5904\u4e8e \\(y\\) \u8f74\u540c\u4e00\u4fa7\u7684\u73a9\u5bb6\u624d\u53ef\u80fd\u76f8\u649e\u3002</li> <li>\u6839\u636e\u9898\u76ee\u5b9a\u4e49\uff0c\u5728 \\(y\\) \u8f74\u4e0a\u7684\u73a9\u5bb6\u6c38\u8fdc\u4e0d\u53ef\u80fd\u4e0e\u522b\u4eba\u76f8\u649e\u3002</li> </ul> <p>\u63a5\u4e0b\u6765\u8003\u8651\u5f53\u5750\u6807\u8f74\u539f\u70b9\u6e10\u6e10\u5411\u53f3\u79fb\u52a8\u65f6\uff0c\u76f8\u649e\u73a9\u5bb6\u7684\u6570\u91cf\u5c06\u5982\u4f55\u53d8\u5316\u3002\u6839\u636e\u4e0a\u8ff0\u7b2c\u4e8c\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a \\(y\\) \u8f74\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u73a9\u5bb6\u5206\u5f00\u8003\u8651\u3002\u4ee5\u4e0b\u53ea\u8003\u8651 \\(y\\) \u8f74\u5de6\u8fb9\u73a9\u5bb6\u7684\u76f8\u649e\u60c5\u51b5\u3002</p> <ul> <li>\u5982\u679c\u6ca1\u6709\u73a9\u5bb6\u4ece \\(y\\) \u8f74\u4e0a\u6389\u5230 \\(y\\) \u8f74\u5de6\u8fb9\uff0c\u7531\u4e8e \\(y\\) \u8f74\u5de6\u8fb9\u73a9\u5bb6\u5230\u539f\u70b9\u7684\u8ddd\u79bb\u540c\u65f6\u589e\u52a0\u76f8\u540c\u7684\u503c\uff0c\u56e0\u6b64\u76f8\u649e\u60c5\u51b5\u4e0d\u53d8\u3002</li> <li>\u5982\u679c\u6709\u4e00\u4e9b\u73a9\u5bb6\u5373\u5c06\u4ece \\(y\\) \u8f74\u4e0a\u6389\u5230 \\(y\\) \u8f74\u5de6\u8fb9\uff0c\u6211\u4eec\u6765\u89c2\u5bdf\u6240\u6709\u8ddd\u79bb\u539f\u70b9\u6070\u4e3a \\(d\\) \u7684\u73a9\u5bb6\u3002<ul> <li>\u5373\u5c06\u4ece \\(y\\) \u8f74\u4e0a\u6389\u5230 \\(y\\) \u8f74\u5de6\u8fb9\u7684\u73a9\u5bb6\u81f3\u591a\u6709 \\(2\\) \u540d\uff0c\u5b83\u4eec\u7684 \\(y\\) \u5750\u6807\u5206\u522b\u4e3a \\(d\\) \u548c \\(-d\\)\u3002</li> <li>\u7531\u4e8e\u6240\u6709\u76f8\u649e\u7684\u73a9\u5bb6\u90fd\u4f1a\u88ab\u6d88\u706d\uff0c\u539f\u6765\u5c31\u5728 \\(y\\) \u8f74\u5de6\u8fb9\u4e14\u5e78\u5b58\u7684\u73a9\u5bb6\u81f3\u591a\u53ea\u6709 \\(1\\) \u540d\u3002</li> <li>\u4e24\u7c7b\u73a9\u5bb6\u7684\u6570\u91cf\u52a0\u8d77\u6765\u5fc5\u987b\u6070\u4e3a \\(1\\) \u624d\u4f1a\u4ea7\u751f\u8fd9\u4e00\u8ddd\u79bb\u7684\u5e78\u5b58\u73a9\u5bb6\u3002</li> </ul> </li> </ul> <p>\u4ece\u4ee5\u4e0a\u5206\u6790\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u4eec\u53ea\u5bf9\u73a9\u5bb6\u7684 \\(x\\) \u503c\uff0c\u4ee5\u53ca\u548c\u5b83\u4eec\u76f8\u5dee\u6070\u4e3a \\(1\\) \u7684 \\(x\\) \u503c\u611f\u5174\u8da3\u3002\u53ea\u6709\u8fd9\u4e9b \\(x\\) \u503c\u624d\u6709\u53ef\u80fd\u8ba9\u76f8\u649e\u60c5\u51b5\u4ea7\u751f\u53d8\u5316\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u8fdb\u884c \\(3n\\) \u6b21\u8ba1\u7b97\u3002</p> <p>\u6a21\u62df\u4ee5\u4e0a\u8fc7\u7a0b\u5373\u53ef\u7b97\u51fa \\(L(x)\\) \u548c \\(R(x)\\)\uff0c\u5206\u522b\u8868\u793a\u5f53\u7a7a\u6295\u6a2a\u5750\u6807\u4e3a \\(x\\) \u65f6\uff0c\u7a7a\u6295\u5de6\u8fb9\u548c\u53f3\u8fb9\u5404\u6709\u591a\u5c11\u73a9\u5bb6\u5e78\u5b58\u3002\u518d\u52a0\u4e0a\u6b64\u65f6\u6a2a\u5750\u6807\u6070\u7b49\u4e8e \\(x\\) \u7684\u73a9\u5bb6\u6570\u91cf\uff0c\u5c31\u662f\u73a9\u5bb6\u5e78\u5b58\u7684\u603b\u6570\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\uff0c\u4e3b\u8981\u662f\u6392\u5e8f\u3001\u53bb\u91cd\u7b49\u7684\u590d\u6742\u5ea6\u3002\u6838\u5fc3\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/k/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXX ((int) 1e5)\nusing namespace std;\n\nint n, X[MAXN + 10], Y[MAXN + 10];\n\n// mp[x][y]\uff1a\u6a2a\u5750\u6807\u4e3a x\uff0c\u7eb5\u5750\u6807\u7edd\u5bf9\u503c\u4e3a y \u7684\u73a9\u5bb6\u6570\uff0c\u81f3\u591a\u4e3a 2\nunordered_map&lt;int, int&gt; mp[MAXX + 10];\nint L[MAXN * 3 + 10], R[MAXN * 3 + 10];\n\nvoid gao(vector&lt;int&gt; &amp;keys, int *f) {\n    // \u4fdd\u5b58\u76ee\u524d\u6709\u54ea\u4e9b\u8ddd\u79bb\u7684\u4eba\u5e78\u5b58\n    unordered_set&lt;int&gt; live;\n    int BIAS = 0;\n\n    f[keys[0]] = 0;\n    for (int i = 1; i &lt; keys.size(); i++) {\n        int x = keys[i], last = keys[i - 1];\n        if (mp[last].size() &gt; 0) {\n            // \u6709\u73a9\u5bb6\u6765\u5230\u7a7a\u6295\u5de6\u8fb9\n            for (auto &amp;p : mp[last]) {\n                int y = p.first, cnt = p.second;\n                // \u4e24\u7c7b\u73a9\u5bb6\u603b\u6570\u5fc5\u987b\u6070\u4e3a 1\uff0c\u8fd9\u4e2a\u8ddd\u79bb\u624d\u80fd\u4ea7\u751f\u5e78\u5b58\u8005\uff0c\u5426\u5219\u5168\u90e8\u88ab\u6d88\u706d\n                if (live.count(y - BIAS) + cnt == 1) live.insert(y - BIAS);\n                else live.erase(y - BIAS);\n            }\n        }\n        // \u6240\u6709\u73a9\u5bb6\u5230\u539f\u70b9\u7684\u8ddd\u79bb\u589e\u52a0\u76f8\u540c\u7684\u503c\n        BIAS += abs(x - last);\n        // \u8bb0\u5f55\u7a7a\u6295\u6a2a\u5750\u6807\u4e3a x \u65f6\u7684\u5e78\u5b58\u73a9\u5bb6\u6570\u91cf\n        f[x] = live.size();\n    }\n}\n\nvoid solve() {\n    // \u8c03\u6574\u5750\u6807\uff0c\u8ba9\u7a7a\u6295\u4f4d\u4e8e\u5750\u6807 x \u8f74\u4e0a\n    int Y0; scanf(\"%d%d\", &amp;n, &amp;Y0);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d%d\", &amp;X[i], &amp;Y[i]);\n        Y[i] -= Y0;\n    }\n\n    // \u63d0\u53d6\u6211\u4eec\u611f\u5174\u8da3\u7684 x \u503c\n    vector&lt;int&gt; keys;\n    for (int i = 1; i &lt;= n; i++) {\n        mp[X[i]][abs(Y[i])]++;\n        for (int j = -1; j &lt;= 1; j++) keys.push_back(X[i] + j);\n    }\n\n    // \u8ba1\u7b97\u7a7a\u6295\u5de6\u8fb9\u7684\u5e78\u5b58\u60c5\u51b5\n    sort(keys.begin(), keys.end());\n    keys.resize(unique(keys.begin(), keys.end()) - keys.begin());\n    gao(keys, L);\n\n    // \u8ba1\u7b97\u7a7a\u6295\u53f3\u8fb9\u7684\u5e78\u5b58\u60c5\u51b5\n    reverse(keys.begin(), keys.end());\n    gao(keys, R);\n\n    // \u8ba1\u7b97\u7b54\u6848\n    int mn = n + 1, mx = 0;\n    for (int x : keys) {\n        // \u5de6\u8fb9\u52a0\u53f3\u8fb9\u7684\u5e78\u5b58\u4eba\u6570\n        int t = L[x] + R[x];\n        // \u52a0\u4e0a\u6a2a\u5750\u6807\u548c\u7a7a\u6295\u6070\u597d\u76f8\u7b49\u7684\u4eba\u6570\n        if (mp[x].size() &gt; 0) for (auto &amp;p : mp[x]) t += p.second;\n        mn = min(mn, t);\n        mx = max(mx, t);\n    }\n    printf(\"%d %d\\n\", mn, mx);\n\n    // \u591a\u7ec4\u6570\u636e\uff0c\u6e05\u7406\u5168\u5c40\u6570\u636e\u7ed3\u6784\n    for (int x : keys) mp[x].clear(), L[x] = R[x] = 0;\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/l/","title":"L - Sub-cycle Graph","text":""},{"location":"2018-icpc-qingdao/l/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738723/373 (6.2%)"},{"location":"2018-icpc-qingdao/l/#_2","title":"\u9898\u89e3","text":"<p>\u53ea\u6709\u6bcf\u4e2a\u8fde\u901a\u5757\u90fd\u662f\u4e00\u4e2a\u70b9\u6216\u8005\u4e00\u6761\u94fe\u7684\u56fe\u624d\u662f sub-cycle graph\u3002\u5f53\u7136\uff0c\u6240\u6709\u70b9\u6070\u5f62\u6210\u4e00\u4e2a\u73af\u7684\u56fe\u4e5f\u662f\u3002\u9996\u5148\u6765\u5904\u7406\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff1a</p> <ul> <li>\\(m = 0\\)\uff0c\u552f\u4e00\u65b9\u6848\u3002</li> <li>\\(m &gt; n\\)\uff0c\u65e0\u89e3\u3002</li> <li>\\(m = n\\)\uff0c\u5219\u6240\u6709\u70b9\u5fc5\u987b\u5f62\u6210\u4e00\u4e2a\u5927\u73af\u3002\u4e0d\u59a8\u4ee4\u70b9 \\(1\\) \u4e3a\u73af\u7684\u201c\u8d77\u70b9\u201d\uff0c\u5c31\u5bb9\u6613\u7b97\u51fa\u73af\u7684\u65b9\u6848\u6570\u4e3a \\(\\frac{(n - 1)!}{2}\\)\u3002\u9664\u4ee5 \\(2\\) \u662f\u56e0\u4e3a\u73af\u662f\u987a\u65f6\u9488\u8fd8\u662f\u9006\u65f6\u9488\u6ca1\u6709\u5173\u7cfb\u3002</li> </ul> <p>\u63a5\u4e0b\u6765\u662f \\(1 \\le m &lt; n\\) \u7684\u4e00\u822c\u60c5\u51b5\u3002\u7531\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u4e2d\u90fd\u6ca1\u6709\u73af\uff0c\u56e0\u6b64\u6211\u4eec\u6709 \\((n - m)\\) \u4e2a\u8fde\u901a\u5757\u3002</p> <p>\u6211\u4eec\u4ece \\(1\\) \u5230 \\((n - m)\\) \u679a\u4e3e \\(i\\) \u8868\u793a\u8fd9\u4e9b\u8fde\u901a\u5757\u4e2d\u6709 \\(i\\) \u6761\u94fe\uff08\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e5f\u5c31\u662f\u6709 \\((n - m - i)\\) \u4e2a\u5b64\u7acb\u70b9\uff09\uff0c\u9996\u5148\u4ece\u4e2d\u9009\u51fa \\(2i\\) \u4e2a\u8282\u70b9\u4f5c\u4e3a\u94fe\u7684\u4e24\u4e2a\u7aef\u70b9\u3002\u628a \\(2i\\) \u4e2a\u8282\u70b9\u4e24\u4e24\u5206\u7ec4\u7684\u65b9\u6848\u6570\uff08\u4e5f\u5c31\u662f\u628a \\(2i\\) \u4e2a\u4e0d\u540c\u7684\u7403\u653e\u5165 \\(i\\) \u4e2a\u76f8\u540c\u7684\u76d2\u5b50\u4e2d\u7684\u65b9\u6848\u6570\uff09\u4e3a</p> \\[ \\prod\\limits_{k=1}^i (2k - 1) \\] <p>\u60a8\u53ef\u4ee5\u8fd9\u6837\u60f3\u8c61\u5206\u7ec4\u8fc7\u7a0b\uff1a\u5c06 \\(2i\\) \u4e2a\u8282\u70b9\u6392\u5e8f\u540e\uff0c\u6bcf\u6b21\u9009\u62e9\u6700\u5c0f\u7684\u8282\u70b9\u548c\u53e6\u4e00\u4e2a\u4efb\u610f\u8282\u70b9\u4e3a\u4e00\u7ec4\uff0c\u8fd9\u6837\u65b9\u6848\u6570\u5c31\u662f \\((2i - 1) \\times (2i - 3) \\times \\cdots\\)\u3002</p> <p>\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u628a\u9664\u4e86\u5b64\u7acb\u70b9\u548c\u94fe\u7aef\u70b9\u4ee5\u5916\u7684\u70b9\u90fd\u5206\u914d\u5230\u94fe\u91cc\u3002\u7531\u4e8e\u4e00\u6761\u94fe\u4e2d\u8282\u70b9\u7684\u987a\u5e8f\u662f\u6709\u5173\u7cfb\u7684\uff0c\u56e0\u6b64\u9996\u5148\u5c06\u5269\u4e0b\u7684\u8282\u70b9\u8fdb\u884c\u5168\u6392\u5217\uff0c\u7136\u540e\u5c06\u8282\u70b9\u4efb\u610f\u5206\u6210\u53ef\u4ee5\u4e3a\u7a7a\u7684 \\(i\\) \u4efd\uff08\u4e5f\u5c31\u662f\u5f80 \\((m - i)\\) \u4e2a\u7403\u4e2d\u95f4\u63d2\u5165 \\((i - 1)\\) \u4e2a\u9694\u677f\uff09\uff0c\u5219\u65b9\u6848\u6570\u4e3a</p> \\[ (m - i)! \\times \\binom{m - 1}{i - 1} \\] <p>\u56e0\u6b64\u6700\u7ec8\u7684\u65b9\u6848\u6570\u5c31\u662f</p> \\[ \\sum\\limits_{i=1}^{n-m} \\binom{n}{n - m - i} \\times (m - i)! \\times \\binom{m - 1}{i - 1} \\times \\binom{m + i}{2i} \\times \\prod\\limits_{k=1}^i (2k - 1) \\] <p>\u4e2d\u95f4\u90a3\u4e2a \\(\\prod\\) \u53ef\u4ee5\u4e00\u8fb9\u679a\u4e3e\u4e00\u8fb9\u7b97\uff0c\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/l/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MOD ((int) 1e9 + 7)\nusing namespace std;\n\nint n;\nlong long ans, m;\n\nlong long fac[MAXN + 10], ifac[MAXN + 10];\n\nlong long C(int a, int b) {\n    return fac[a] * ifac[b] % MOD * ifac[a - b] % MOD;\n}\n\nvoid solve() {\n    scanf(\"%d%lld\", &amp;n, &amp;m);\n    if (m == 0) printf(\"1\\n\");\n    else if (m &gt; n) printf(\"0\\n\");\n    else if (m == n) printf(\"%lld\\n\", fac[n - 1] * ifac[2] % MOD);\n    else {\n        ans = 0;\n        // f \u5c31\u662f\u9898\u89e3\u4e2d\u7684 \\prod\n        long long f = 1;\n        for (int i = 1; i &lt;= n - m; i++) {\n            if (m + i &lt; i * 2) continue;\n            long long t = C(m + i, i * 2) * f % MOD;\n            f = f * (i * 2 + 1) % MOD;\n            t = t * fac[m - i] % MOD;\n            t = t * C(m - 1, i - 1) % MOD;\n            ans = (ans + C(n, n - m - i) * t) % MOD;\n        }\n        printf(\"%lld\\n\", ans);\n    }\n}\n\nint main() {\n    fac[0] = 1;\n    for (int i = 1; i &lt;= MAXN; i++) fac[i] = fac[i - 1] * i % MOD;\n    ifac[0] = ifac[1] = 1;\n    for (int i = 2; i &lt;= MAXN; i++) ifac[i] = (MOD - MOD / i) * ifac[MOD % i] % MOD;\n    for (int i = 2; i &lt;= MAXN; i++) ifac[i] = ifac[i - 1] * ifac[i] % MOD;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao/m/","title":"M - Function and Function","text":""},{"location":"2018-icpc-qingdao/m/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387372/373 (99.7%)"},{"location":"2018-icpc-qingdao/m/#_2","title":"\u9898\u89e3","text":"<p>\u6ce8\u610f\u5230</p> <ul> <li>\u5f53 \\(x \\ge 2\\) \u65f6\uff0c\\(f(x)\\) \u662f \\(\\log x\\) \u7ea7\u522b\u7684\u3002</li> <li>\u5f53 \\(x \\le 1\\) \u65f6\uff0c\\(g^k(x)\\) \u5728 \\(0\\) \u548c \\(1\\) \u4e4b\u95f4\u4ea4\u66ff\u53d8\u5316\u3002</li> </ul> <p>\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8ba1\u7b97\u524d\u9762\u82e5\u5e72\u6b21\u7684\u51fd\u6570\u503c\uff0c\u76f4\u5230\u51fd\u6570\u503c\u53d8\u4e3a \\(0\\) \u6216 \\(1\\)\u3002\u770b\u5269\u4e0b\u7684\u64cd\u4f5c\u6b21\u6570\u662f\u5947\u6570\u8fd8\u662f\u5076\u6570\u51b3\u5b9a\u7b54\u6848\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\log x)\\)\u3002</p>"},{"location":"2018-icpc-qingdao/m/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint f[] = {1, 0, 0, 0, 1, 0, 1, 0, 2, 1};\n\nvoid solve() {\n    int x, K;\n    scanf(\"%d%d\", &amp;x, &amp;K);\n    // \u76f4\u63a5\u8ba1\u7b97\u82e5\u5e72\u6b21\u51fd\u6570\u503c\uff0c\u76f4\u5230\u51fd\u6570\u503c\u5c0f\u7b49\u4e8e 1\uff0c\u6216\u53d8\u5316\u6b21\u6570\u7528\u5b8c\n    while (x &gt; 1 &amp;&amp; K &gt; 0) {\n        int t = 0;\n        for (; x; x /= 10) t += f[x % 10];\n        x = t;\n        K--;\n    }\n    if (K &gt; 0) {\n        // \u53d8\u5316\u6b21\u6570\u8fd8\u6ca1\u7528\u5b8c\uff0c\u6839\u636e\u5269\u4e0b\u7684\u64cd\u4f5c\u662f\u5947\u6570\u6b21\u8fd8\u662f\u5076\u6570\u6b21\u51b3\u5b9a\u8f93\u51fa\n        if (K &amp; 1) printf(\"%d\\n\", x ^ 1);\n        else printf(\"%d\\n\", x);\n    } else {\n        // \u53d8\u5316\u6b21\u6570\u7528\u5b8c\u4e86\uff0c\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\n        printf(\"%d\\n\", x);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/","title":"2018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b","text":""},{"location":"2018-icpc-qingdao-online/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2018/09/16 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355 \u5728\u7ebf\u7ec3\u4e60QOJ | ZOJ 4047 ~ 4057 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2018-icpc-qingdao-online/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 1492, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 147, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 971, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 38, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 121, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 933, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 576, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 1359, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 204, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 311, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 178, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 306, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 368, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 93, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 53, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 24, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2018-icpc-qingdao-online/#_3","title":"\u9898\u89e3\u5217\u8868","text":"<ul> <li>A - Live Love</li> <li>B - Red Black Tree</li> <li>C - Halting Problem</li> <li>D - Pixel Art</li> <li>E - Infinite Parenthesis Sequence</li> <li>F - Chaleur</li> <li>G - Couleur</li> <li>H - Traveling on the Axis</li> <li>I - Kuririn MIRACLE</li> <li>J - Press the Button</li> <li>K - XOR Clique</li> </ul>"},{"location":"2018-icpc-qingdao-online/a/","title":"A - Live Love","text":""},{"location":"2018-icpc-qingdao-online/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u73871492/1550 (96.3%)"},{"location":"2018-icpc-qingdao-online/a/#_2","title":"\u9898\u89e3","text":"<p>\u6700\u591a\u8fde\u7eed PERFECT \u7684\u6570\u91cf\u663e\u7136\u662f \\(m\\)\u3002</p> <p>\u4e8c\u5206\u6700\u5c11\u8fde\u7eed PERFECT \u7684\u6570\u91cf \\(x\\)\uff0c\u90a3\u4e48\u6bcf \\(x\\) \u4e2a PERFECT \u4e4b\u95f4\u81f3\u5c11\u8981\u63d2\u5165\u4e00\u4e2a NON-PERFECT\u3002\u8ba1\u7b97\u603b\u957f\u5ea6\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e \\(n\\) \u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\log m)\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/a/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, m;\n\nint calc(int lim) {\n    // \u5982\u679c m \u521a\u597d\u88ab lim \u6574\u9664\uff0c\u6700\u540e\u4e00\u7ec4 PERFECT \u540e\u9762\u5c31\u4e0d\u7528\u653e NON-PERFECT \u4e86\n    if (m % lim == 0) return m / lim * (lim + 1) - 1;\n    else return m / lim * (lim + 1) + m % lim;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    // \u7279\u6b8a\u60c5\u51b5\uff1a0 \u4e2a PERFECT\n    if (m == 0) { printf(\"0 0\\n\"); return; }\n    // \u6700\u5927\u8fde\u7eed PERFECT \u663e\u7136\u662f m\n    printf(\"%d \", m);\n\n    // \u4e8c\u5206\u6700\u5c0f\u8fde\u7eed PERFECT\n    int head = 1, tail = m;\n    while (head &lt; tail) {\n        int mid = (head + tail) &gt;&gt; 1;\n        if (calc(mid) &lt;= n) tail = mid;\n        else head = mid + 1;\n    }\n    printf(\"%d\\n\", head);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/b/","title":"B - Red Black Tree","text":""},{"location":"2018-icpc-qingdao-online/b/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387147/1550 (9.5%)"},{"location":"2018-icpc-qingdao-online/b/#_2","title":"\u9898\u89e3","text":"<p>\u8bbe \\(\\text{cost}(v_i)\\) \u8868\u793a\u52a0\u5165\u65b0\u7ea2\u70b9\u4e4b\u524d\uff0c\u8282\u70b9 \\(v_i\\) \u7684\u4ee3\u4ef7\u3002\u5bf9\u4e8e\u8be2\u95ee \\(v_1, v_2, \\cdots, v_k\\)\uff0c\u5c06\u6240\u6709\u8282\u70b9\u6309\u4ee3\u4ef7\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u5982\u679c\u4e0d\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u90a3\u4e48\u6700\u5927\u4ee3\u4ef7\u5c31\u662f \\(\\text{cost}(v_1)\\)\u3002</p> <p>\u4e3a\u4e86\u8ba9\u6700\u5927\u4ee3\u4ef7\u5c0f\u4e8e \\(\\text{cost}(v_i)\\)\uff0c\u65b0\u52a0\u5165\u7684\u7ea2\u70b9\u8981\u540c\u65f6\u6539\u53d8\u8282\u70b9 \\(v_1, v_2, \\cdots, v_i\\) \u7684\u4ee3\u4ef7\u3002\u4e3a\u4e86\u8ba9\u6700\u5927\u4ee3\u4ef7\u5c3d\u53ef\u80fd\u5c0f\uff0c\u663e\u7136\u8981\u628a\u8fd9\u4e2a\u7ea2\u70b9\u653e\u5728 \\(v_1, v_2, \\cdots, v_i\\) \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff08lca\uff09\u5904\u3002\u8bbe \\(d(v_i)\\) \u8868\u793a\u4ece\u6839\u5230\u8282\u70b9 \\(v_i\\) \u7684\u8ddd\u79bb\uff0c\u5219\u6700\u5927\u4ee3\u4ef7\u53d8\u4e3a</p> \\[ \\max\\begin{cases} \\max (d(v_1), d(v_2), \\cdots, d(v_i)) - d(\\text{lca}(v_1, v_2, \\cdots, v_i)) \\\\ \\text{cost}(v_{i + 1}) \\end{cases} \\] <p>\u4ece \\(1\\) \u5230 \\(k\\) \u679a\u4e3e \\(i\\)\uff0c\u5e76\u9009\u62e9\u6700\u5c0f\u7684\u6700\u5927\u4ee3\u4ef7\u5373\u53ef\u3002\u5982\u679c\u4ece lca \u5230\u67d0\u4e2a\u8282\u70b9 \\(v_j\\) \u4e0a\u5df2\u7ecf\u6709\u5176\u5b83\u7ea2\u70b9\u4e86\uff0c\u90a3\u4e48\u4e0a\u5f0f\u7b97\u51fa\u6765\u7684\u503c\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e \\(\\text{cost}(v_j)\\)\uff0c\u4e0d\u6bd4 \\(i = j - 1\\) \u65f6\u7684\u4ee3\u4ef7\u4f18\u3002\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3\u6700\u5c0f\u7684\u6700\u5927\u4ee3\u4ef7\uff0c\u6240\u4ee5\u8fd9\u5e76\u4e0d\u5f71\u54cd\u6700\u7ec8\u7b54\u6848\u7684\u8ba1\u7b97\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n + \\sum k_i \\log \\sum k_i)\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/b/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXP 20\nusing namespace std;\n\nint n, m, q;\nbool flag[MAXN + 10];\n\nvector&lt;int&gt; e[MAXN + 10], v[MAXN + 10];\n// dis[i]\uff1a\u4ece\u6839\u5230\u8282\u70b9 i \u7684\u8ddd\u79bb\n// cost[i]\uff1a\u4e0d\u52a0\u5165\u65b0\u7ea2\u70b9\u65f6\uff0c\u8282\u70b9 i \u7684\u4ee3\u4ef7\nlong long dis[MAXN + 10], cost[MAXN + 10];\n// \u5728 dfs \u5e8f\u5217\u4e0a\u7ef4\u62a4 rmq \u6c42 lca\nint clk, bgn[MAXN + 10];\nint lg[MAXN * 2 + 10], f[MAXP][MAXN * 2 + 10];\n\nvoid dfs(int sn, int fa) {\n    f[0][++clk] = sn; bgn[sn] = clk;\n\n    for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i];\n        if (fn == fa) continue;\n\n        dis[fn] = dis[sn] + v[sn][i];\n        if (flag[fn]) cost[fn] = 0;\n        else cost[fn] = cost[sn] + v[sn][i];\n\n        dfs(fn, sn);\n        f[0][++clk] = sn;\n    }\n}\n\n// rmq \u9884\u5904\u7406\nvoid preLca() {\n    for (int p = 1; p &lt; MAXP; p++) for (int i = 1; i + (1 &lt;&lt; p) - 1 &lt;= clk; i++) {\n        int j = i + (1 &lt;&lt; (p - 1));\n        if (dis[f[p - 1][i]] &lt; dis[f[p - 1][j]]) f[p][i] = f[p - 1][i];\n        else f[p][i] = f[p - 1][j];\n    }\n}\n\n// \u6c42\u8282\u70b9 x \u548c y \u7684 lca\nint lca(int x, int y) {\n    if (bgn[x] &gt; bgn[y]) swap(x, y);\n    int p = lg[bgn[y] - bgn[x] + 1];\n    int a = f[p][bgn[x]], b = f[p][bgn[y] - (1 &lt;&lt; p) + 1];\n    if (dis[a] &lt; dis[b]) return a;\n    else return b;\n}\n\nvoid solve() {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q);\n\n    memset(flag, 0, sizeof(bool) * (n + 3));\n    for (int i = 1; i &lt;= m; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        flag[x] = true;\n    }\n\n    for (int i = 1; i &lt;= n; i++) e[i].clear(), v[i].clear();\n    for (int i = 1; i &lt; n; i++) {\n        int x, y, z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z);\n        e[x].push_back(y); v[x].push_back(z);\n        e[y].push_back(x); v[y].push_back(z);\n    }\n\n    clk = 0; dfs(1, 0);\n    preLca();\n\n    while (q--) {\n        vector&lt;int&gt; vec;\n        int t; scanf(\"%d\", &amp;t);\n        while (t--) {\n            int x; scanf(\"%d\", &amp;x);\n            vec.push_back(x);\n        }\n        vec.push_back(0);\n        sort(vec.begin(), vec.end(), [&amp;](int a, int b) {\n            return cost[a] &gt; cost[b];\n        });\n\n        int anc = vec[0];\n        long long mx = dis[vec[0]], ans = cost[vec[1]];\n        // \u679a\u4e3e\u65b0\u7684\u7ea2\u70b9\u8981\u8986\u76d6\u51e0\u4e2a\u8282\u70b9\n        for (int i = 1; i + 1 &lt; vec.size(); i++) {\n            anc = lca(anc, vec[i]);\n            mx = max(mx, dis[vec[i]]);\n            ans = min(ans, max(mx - dis[anc], cost[vec[i + 1]]));\n        }\n        printf(\"%lld\\n\", ans);\n    }\n}\n\nint main() {\n    lg[1] = 0;\n    for (int i = 2; i &lt;= MAXN * 2; i++) lg[i] = lg[i &gt;&gt; 1] + 1;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/c/","title":"C - Halting Problem","text":""},{"location":"2018-icpc-qingdao-online/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387971/1550 (62.6%)"},{"location":"2018-icpc-qingdao-online/c/#_2","title":"\u9898\u89e3","text":"<p>\u8ba1\u7b97\u673a\u7684\u72b6\u6001\u53ea\u5305\u542b\u4e24\u4e2a\u53d8\u91cf\uff1a\u76ee\u524d\u7a0b\u5e8f\u6267\u884c\u5230\u54ea\u4e00\u884c\uff0c\u4ee5\u53ca \\(r\\) \u7684\u503c\u662f\u591a\u5c11\u3002\u5bf9\u72b6\u6001\u8fdb\u884c bfs\uff0c\u770b\u80fd\u5426\u8d70\u5230\u5305\u542b\u7b2c \\((n + 1)\\) \u884c\u7684\u72b6\u6001\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\times 2^p)\\)\uff0c\u5176\u4e2d \\(p = 8\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/c/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e4)\n#define MAXR (1 &lt;&lt; 8)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\nchar OP[MAXN + 10][5];\nint V[MAXN + 10], K[MAXN + 10];\n\nbool vis[MAXN + 10][MAXR];\n\nbool bfs() {\n    queue&lt;pii&gt; q;\n    for (int i = 1; i &lt;= n + 1; i++) for (int j = 0; j &lt; MAXR; j++) vis[i][j] = false;\n    q.push(pii(1, 0)); vis[1][0] = true;\n\n    while (!q.empty()) {\n        pii p = q.front(); q.pop();\n        int line = p.first, r = p.second;\n        if (line == n + 1) return true;\n\n        // \u6a21\u62df\u7b2c line \u6761\u547d\u4ee4\n        int nxtLine = line + 1, nxtR = r;\n        if (OP[line][1] == 'd') {\n            nxtR = (r + V[line]) % MAXR;\n        } else if (OP[line][1] == 'e') {\n            if (r == V[line]) nxtLine = K[line];\n        } else if (OP[line][1] == 'n') {\n            if (r != V[line]) nxtLine = K[line];\n        } else if (OP[line][1] == 'l') {\n            if (r &lt; V[line]) nxtLine = K[line];\n        } else {\n            if (r &gt; V[line]) nxtLine = K[line];\n        }\n        if (vis[nxtLine][nxtR]) continue;\n        q.push(pii(nxtLine, nxtR)); vis[nxtLine][nxtR] = true;\n    }\n\n    return false;\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%s\", OP[i]);\n        if (OP[i][1] == 'd') scanf(\"%d\", &amp;V[i]);\n        else scanf(\"%d%d\", &amp;V[i], &amp;K[i]);\n    }\n\n    if (bfs()) printf(\"Yes\\n\");\n    else printf(\"No\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/d/","title":"D - Pixel Art","text":""},{"location":"2018-icpc-qingdao-online/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u738722/1550 (1.4%)"},{"location":"2018-icpc-qingdao-online/d/#_2","title":"\u9898\u89e3","text":"<p>\u5b9e\u9645\u4e0a\u662f\u4e00\u9053\u6a21\u62df\u9898\u3002\u628a\u6bcf\u4e00\u6761\u9ed1\u8272\u6a2a\u7ebf\u6216\u8005\u7ad6\u7ebf\u770b\u6210\u4e00\u4e2a\u77e9\u5f62\uff0c\u7528 <code>map</code> \u7ef4\u62a4\u5f53\u524d\u884c\u6709\u54ea\u4e9b\u5217\u88ab\u77e9\u5f62\u8986\u76d6\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u77e9\u5f62\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u901a\u5757\u3002\u626b\u63cf\u7ebf\u5f80\u4e0b\u79fb\u52a8\u4e00\u884c\u65f6\uff0c\u628a\u65b0\u51fa\u73b0\u7684\u77e9\u5f62\u4e5f\u52a0\u5165 <code>map</code>\uff0c\u68c0\u67e5\u65b0\u77e9\u5f62\u7684\u4e0a\u3001\u5de6\u3001\u53f3\u4e09\u4e2a\u65b9\u5411\u662f\u5426\u4e0e\u5176\u5b83\u77e9\u5f62\u76f8\u8fde\uff0c\u5982\u679c\u662f\u5219\u8fdb\u884c\u5408\u5e76\u3002\u8be6\u7ec6\u5b9e\u73b0\u8bf7\u770b\u53c2\u8003\u4ee3\u7801\u7684\u6ce8\u91ca\u3002</p> <p>\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(n + t\\log k)\\)\uff0c\u5176\u4e2d \\(t\\) \u662f\u76f8\u90bb\u77e9\u5f62\u7684\u6570\u91cf\u3002</p> <p>\u5b9e\u9645\u4e0a \\(t\\) \u662f \\(\\mathcal{O}(k)\\) \u7ea7\u522b\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u8003\u8651\u6bcf\u5bf9\u4e0a\u4e0b\u76f8\u90bb\u7684\u77e9\u5f62\uff0c\u5176\u4e2d\u8f83\u77ed\u7684\u77e9\u5f62\u6700\u591a\u53ea\u4f1a\u548c \\(4\\) \u4e2a\u66f4\u957f\u7684\u77e9\u5f62\u76f8\u90bb\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u5de6\u53f3\u76f8\u90bb\u7684\u77e9\u5f62\u4e5f\u662f\u540c\u6837\u7684\u9053\u7406\u3002</p> <p></p> <p>\u56e0\u6b64\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n + k\\log k)\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXK ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, K, ans1, ans2;\nint R1[MAXK + 10], C1[MAXK + 10], R2[MAXK + 10], C2[MAXK + 10];\n\n// add[i]\uff1a\u7b2c i \u884c\u8981\u52a0\u5165\u54ea\u4e9b\u77e9\u5f62\n// del[i]\uff1a\u7b2c i \u5217\u8981\u5220\u9664\u54ea\u4e9b\u77e9\u5f62\nvector&lt;int&gt; add[MAXK + 10], del[MAXK + 10];\nint root[MAXK + 10];\n\n// \u6c42\u5e76\u67e5\u96c6\u7684\u6839\nint findroot(int x) {\n    if (root[x] != x) root[x] = findroot(root[x]);\n    return root[x];\n}\n\n// \u5408\u5e76\u96c6\u5408 x \u548c y\nvoid merge(int x, int y) {\n    x = findroot(x); y = findroot(y);\n    if (x == y) return;\n    root[x] = y;\n    ans2--;\n}\n\nvoid solve() {\n    scanf(\"%d%*d%d\", &amp;n, &amp;K);\n    for (int i = 1; i &lt;= n + 1; i++) add[i].clear(), del[i].clear();\n    for (int i = 1; i &lt;= K; i++) {\n        scanf(\"%d%d%d%d\", &amp;R1[i], &amp;C1[i], &amp;R2[i], &amp;C2[i]);\n        add[R1[i]].push_back(i);\n        del[R2[i] + 1].push_back(i);\n    }\n    for (int i = 1; i &lt;= K; i++) root[i] = i;\n\n    ans1 = ans2 = 0;\n    // cnt\uff1a\u5f53\u524d\u884c\u6709\u51e0\u4e2a\u9ed1\u8272\u683c\u5b50\n    int cnt = 0;\n    // map key \u662f\u533a\u95f4\uff0cmap value \u662f\u8fd9\u4e2a\u533a\u95f4\u5305\u542b\u7684\u5217\u5c5e\u4e8e\u54ea\u4e2a\u8fde\u901a\u5757\n    map&lt;pii, int&gt; mp;\n    for (int i = 1; i &lt;= n; i++) {\n        // \u68c0\u67e5\u65b0\u52a0\u5165\u7684\u77e9\u5f62\u548c\u4e0a\u65b9\u77e9\u5f62\u7684\u76f8\u90bb\u60c5\u51b5\n        for (int idx : add[i]) {\n            auto it = mp.lower_bound(pii(C1[idx], 0));\n            if (it != mp.begin()) it = prev(it);\n            while (it != mp.end() &amp;&amp; it-&gt;first.first &lt;= C2[idx]) {\n                if (it-&gt;first.second &gt;= C1[idx]) merge(it-&gt;second, idx);\n                it++;\n            }\n        }\n\n        // \u5220\u9664\u5728\u4e0a\u4e00\u884c\u7ed3\u675f\u7684\u77e9\u5f62\n        for (int idx : del[i]) {\n            cnt -= C2[idx] - C1[idx] + 1;\n            mp.erase(pii(C1[idx], C2[idx]));\n        }\n\n        // \u52a0\u5165\u65b0\u7684\u77e9\u5f62\n        for (int idx : add[i]) {\n            cnt += C2[idx] - C1[idx] + 1;\n            mp[pii(C1[idx], C2[idx])] = idx;\n            auto it = mp.find(pii(C1[idx], C2[idx]));\n            // \u68c0\u67e5\u548c\u5de6\u65b9\u77e9\u5f62\u7684\u76f8\u90bb\u60c5\u51b5\n            if (it != mp.begin() &amp;&amp; prev(it)-&gt;first.second == C1[idx] - 1) merge(prev(it)-&gt;second, idx);\n            // \u68c0\u67e5\u548c\u53f3\u65b9\u77e9\u5f62\u7684\u76f8\u90bb\u60c5\u51b5\n            if (next(it) != mp.end() &amp;&amp; next(it)-&gt;first.first == C2[idx] + 1) merge(next(it)-&gt;second, idx);\n        }\n\n        ans1 += cnt; ans2 += add[i].size();\n        printf(\"%d %d\\n\", ans1, ans2);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/e/","title":"E - Infinite Parenthesis Sequence","text":""},{"location":"2018-icpc-qingdao-online/e/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u73870/1550 (0.0%)"},{"location":"2018-icpc-qingdao-online/e/#_2","title":"\u9898\u89e3","text":"<p>\u8003\u8651\u8ba1\u7b97 \\(f(k, i)\\) \u8868\u793a \\(B^k\\) \u4e2d\u7b2c \\(i\\) \u4e2a\u5de6\u62ec\u53f7\u7684\u4e0b\u6807\uff08\\(i\\) \u53ef\u4ee5\u4e3a \\(0\\) \u751a\u81f3\u8d1f\u6570\uff09\uff0c\u8bbe \\(g(k, p)\\) \u8868\u793a\u6ee1\u8db3 \\(f(k, i) \\le p\\) \u7684\u6700\u5927\u7684 \\(i\\)\uff0c\u5219\u533a\u95f4 \\([l, r]\\) \u91cc\u5de6\u62ec\u53f7\u7684\u603b\u6570\u5373\u4e3a \\(g(k, r) - g(k, l - 1)\\)\u3002\\(g\\) \u7684\u503c\u901a\u8fc7\u4e8c\u5206 \\(i\\) \u5373\u53ef\u7b97\u51fa\u3002</p> <p>\u53e6\u5916\uff0c\u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3 \\(g\\) \u7684\u5dee\u503c\uff0c\u56e0\u6b64\u7b2c \\(0\\) \u4e2a\u5de6\u62ec\u53f7\u5177\u4f53\u5bf9\u5e94\u54ea\u4e2a\u62ec\u53f7\u5176\u5b9e\u53ef\u4ee5\u968f\u4fbf\u6307\u5b9a\u3002\u65b9\u4fbf\u8d77\u89c1\uff0c\u628a\u6700\u5f00\u59cb\u7684\u6709\u9650\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5de6\u62ec\u53f7\u9009\u4e3a\u7b2c \\(0\\) \u4e2a\u5de6\u62ec\u53f7\u3002</p> <p>\u63a5\u4e0b\u6765\u8003\u8651 \\(f(k, i)\\) \u7684\u8f6c\u79fb\u65b9\u7a0b\u3002</p> <ul> <li>\u5982\u679c \\(f(k, i)\\) \u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f\u53f3\u62ec\u53f7\uff0c\u56e0\u4e3a <code>() -&gt; )(</code>\uff0c\u6709 \\(f(k + 1, i) = f(k, i) + 1\\)\u3002</li> <li>\u5982\u679c \\(f(k, i)\\) \u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f\u5de6\u62ec\u53f7\uff0c\u56e0\u4e3a <code>(( -&gt; (*</code>\uff0c\u6709 \\(f(k + 1, i) = f(k, i + 1) - 1\\)\u3002</li> </ul> <p>\u7efc\u5408\u8d77\u6765\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3a</p> \\[ f(k + 1, i) = \\min(f(k, i) + 1, f(k, i + 1) - 1) \\] <p>\u5047\u8bbe \\(f(k, i)\\) \u662f\u4ece \\(f(0, j)\\) \u8f6c\u79fb\u8fc7\u6765\u7684\uff0c\u90a3\u4e48\u7b2c\u4e00\u7ef4\u4ece \\(0\\) \u8d70\u5230 \\(k\\) \u7684\u8fc7\u7a0b\u4e2d\uff0c\\(\\min\\) \u4e2d\u7684\u7b2c\u4e8c\u9879\u6070\u9009\u4e86 \\((j - i)\\) \u6b21\uff0c\u7b2c\u4e00\u9879\u6070\u9009\u4e86 \\((k - (j - i))\\) \u6b21\uff0c\u56e0\u6b64\u8f6c\u79fb\u65b9\u7a0b\u8fd8\u53ef\u4ee5\u5199\u4e3a</p> \\[ f(k, i) = \\min\\limits_{i \\le j \\le i + k}(f(0, j) + k - 2(j - i)) \\] <p>\u5bb9\u6613\u770b\u51fa\u51b3\u7b56\u533a\u95f4\u7684\u957f\u5ea6\u662f \\((i + k) - i = k\\)\u3002\u8bbe\u6700\u5f00\u59cb\u7684\u6709\u9650\u5b57\u7b26\u4e32\u4e2d\uff0c\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u5171\u6709 \\(m\\) \u4e2a\u3002\u9996\u5148\u5206\u6790 \\(k \\le m\\) \u7684\u65f6\u5019\u5982\u4f55\u6c42\u51fa\u6700\u5c0f\u503c\u3002</p> <p>\u8bbe \\(F(j) = f(0, j) - 2j\\)\u3002\u6ce8\u610f\u5230 \\(f(0, j + m) - f(0, j) = n\\)\uff0c\u6709</p> \\[ F(j + t) = F(j \\bmod m + t) + (n - 2m) \\times \\lfloor\\frac{j}{m}\\rfloor \\] <p>\u5176\u4e2d \\(t\\) \u662f\u4efb\u610f\u975e\u8d1f\u6570\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528 RMQ \u9884\u5904\u7406 \\(F(0)\\) \u5230 \\(F(2m - 1)\\)\uff0c\u7136\u540e\u628a \\([i, i + k]\\) \u6620\u5c04\u5230 \\([i \\bmod m, i \\bmod m + k]\\) \u6c42\u6700\u5c0f\u503c\u5373\u53ef\u3002</p> <p>\u63a5\u4e0b\u6765\u5206\u6790 \\(k\\) \u6bd4\u8f83\u5927\u65f6\u7684\u89e3\u6cd5\u3002\u8ba8\u8bba \\((n - 2m)\\) \u7684\u503c\uff1a</p> <ul> <li>\u82e5 \\(n - 2m \\ge 0\\)\uff0c\u8bf4\u660e \\(F(j + m) \\ge F(j)\\)\uff0c\u56e0\u6b64\u6700\u5c0f\u503c\u53ea\u5b58\u5728\u4e8e \\(i \\le j &lt; i + m\\) \u8fd9\u4e2a\u8303\u56f4\u4e2d\u3002</li> <li>\u82e5 \\(n - 2m &lt; 0\\)\uff0c\u8bf4\u660e \\(F(j + m) &lt; F(j)\\)\uff0c\u56e0\u6b64\u6700\u5c0f\u503c\u53ea\u5b58\u5728\u4e8e \\(i + k - m &lt; j \\le i + k\\) \u8fd9\u4e2a\u8303\u56f4\u4e2d\u3002</li> </ul> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u628a\u533a\u95f4\u957f\u5ea6\u7f29\u5c0f\u5230\u4e86 \\(m\\)\uff0c\u53c8\u53ef\u4ee5\u901a\u8fc7 RMQ \u6c42\u51fa\u6700\u5c0f\u503c\u4e86\u3002</p> <p>\u4e0a\u9762\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\u95ee\u9898\u6ca1\u6709\u89e3\u51b3\uff1a\u4e8c\u5206 \\(g\\) \u7684\u65f6\u5019\uff0c\u4e0a\u4e0b\u754c\u662f\u591a\u5c11\uff1f\u6211\u4eec\u6765\u770b \\(f(k, 0)\\) \u7684\u53d6\u503c\u8303\u56f4\u3002</p> <ul> <li>\u53d6 \\(j = 0\\) \u65f6\uff0c\u6709 \\(f(k, 0) \\le f(0, 0) + k &lt; n + k\\)\uff0c\u56e0\u6b64 \\(g(k, l)\\) \u7684\u6700\u5c0f\u503c\u53ef\u80fd\u662f \\((n + k - l)\\)\u3002</li> <li>\u7531\u4e8e \\(f(0, j) \\ge 0\\)\uff0c\\(-2(j - i) \\ge -2k\\)\uff0c\u56e0\u6b64 \\(f(0, 0) \\ge -k\\)\uff0c\u5219 \\(g(k, r)\\) \u7684\u6700\u5927\u503c\u53ef\u80fd\u662f \\((r + k)\\)\u3002</li> </ul> <p>\u6240\u4ee5\u4e8c\u5206\u4e0a\u4e0b\u754c\u53d6 \\([-3 \\times 10^9, 3 \\times 10^9]\\) \u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n + q\\log (n + k - l + r))\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/e/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXP 20\nusing namespace std;\n\nint n, m, q;\nchar s[MAXN + 10];\n\nint lg[MAXN + 10], rmq[MAXP][MAXN * 2 + 10];\n\n// RMQ \u9884\u5904\u7406 F(0) \u5230 F(2m - 1)\nvoid preRmq() {\n    m = 0;\n    for (int i = 0; i &lt; n; i++) if (s[i] == '(') rmq[0][m++] = i;\n    for (int i = m; i &lt; m * 2; i++) rmq[0][i] = rmq[0][i - m] + n;\n    for (int i = 0; i &lt; m * 2; i++) rmq[0][i] -= i * 2;\n\n    for (int p = 1; p &lt; MAXP; p++) for (int i = 0, ii = (1 &lt;&lt; p) - 1; ii &lt; m * 2; i++, ii++) {\n        int j = i + (1 &lt;&lt; (p - 1));\n        rmq[p][i] = min(rmq[p - 1][i], rmq[p - 1][j]);\n    }\n}\n\nlong long calc(long long K, long long i) {\n    long long L, R;\n    // \u6839\u636e n - 2m \u7684\u503c\uff0c\u5c06\u533a\u95f4\u957f\u5ea6\u7f29\u5c0f\u5230 min(m, k)\n    if (m * 2 &lt;= n) {\n        L = i;\n        R = min(i + K, L + m - 1);\n    } else {\n        R = i + K;\n        L = max(i, R - m + 1);\n    }\n\n    // \u5c06\u533a\u95f4 [L, R] \u6620\u5c04\u5230 [L mod m, L mod m + R - L]\uff0c\u518d\u7528 RMQ \u6c42\u6700\u5c0f\u503c\n    long long div = (L &gt;= 0 ? L / m : (L + 1) / m - 1);\n    int mod = (L % m + m) % m;\n    long long delta = n * div - 2 * div * m;\n    int len = R - L + 1, p = lg[len];\n    return min(rmq[p][mod], rmq[p][mod + len - (1 &lt;&lt; p)]) + delta + K + 2 * i;\n}\n\n// \u4e8c\u5206\u6c42 g(K, lim) \u7684\u503c\nlong long query(long long K, long long lim) {\n    long long head = -3e9, tail = 3e9;\n    while (head &lt; tail) {\n        long long mid = (head + tail + 1) &gt;&gt; 1;\n        if (calc(K, mid) &lt;= lim) head = mid;\n        else tail = mid - 1;\n    }\n    return head;\n}\n\nvoid solve() {\n    scanf(\"%s\", s); n = strlen(s);\n    preRmq();\n\n    scanf(\"%d\", &amp;q);\n    while (q--) {\n        long long K, l, r; scanf(\"%lld%lld%lld\", &amp;K, &amp;l, &amp;r);\n        // \u7279\u6b8a\u60c5\u51b5\uff1a\u6ca1\u6709\u5de6\u62ec\u53f7\n        if (m == 0) printf(\"0\\n\");\n        else printf(\"%lld\\n\", query(K, r) - query(K, l - 1));\n    }\n}\n\nint main() {\n    lg[1] = 0;\n    for (int i = 2; i &lt;= MAXN; i++) lg[i] = lg[i &gt;&gt; 1] + 1;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/f/","title":"F - Chaleur","text":""},{"location":"2018-icpc-qingdao-online/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u738738/1550 (2.5%)"},{"location":"2018-icpc-qingdao-online/f/#_2","title":"\u9898\u89e3","text":"<p>\u9898\u76ee\u4fdd\u8bc1\u8f93\u5165\u7684\u56fe\u53ef\u4ee5\u88ab\u5206\u6210\u4e24\u90e8\u5206 \\(A\\) \u548c \\(B\\)\uff0c\u5176\u4e2d \\(A\\) \u662f\u56e2\uff0c\\(B\\) \u662f\u72ec\u7acb\u96c6\u3002\u6211\u4eec\u5148\u6765\u627e\u5230 \\(A\\) \u548c \\(B\\)\u3002</p> <p>\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u5927\u5c0f\u4e3a \\(s\\) \u7684\u56e2\uff0c\u5219\u56fe\u4e2d\u5ea6\u6570\u7b2c \\(s\\) \u5927\u7684\u8282\u70b9\u7684\u5ea6\u6570\u81f3\u5c11\u4e3a \\((s - 1)\\)\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u786e\u5b9a \\(|A|\\) \u7684\u6700\u5927\u503c\uff08\u5373\u6700\u5927\u56e2\u7684\u5927\u5c0f\uff09\uff0c\u800c\u5ea6\u6570\u6700\u5927\u7684 \\(|A|\\) \u4e2a\u8282\u70b9\u5c31\u662f \\(A\\) \u4e2d\u7684\u8282\u70b9\u3002\u56e0\u4e3a \\(|A|\\) \u5df2\u7ecf\u6700\u5927\u4e86\uff0c\u6839\u636e\u9898\u76ee\u7684\u4fdd\u8bc1\uff0c\u6b64\u65f6\u5269\u4e0b\u7684\u8282\u70b9\u4e4b\u95f4\u6ca1\u6709\u8fde\u8fb9\uff0c\u56e0\u6b64\u5269\u4e0b\u7684\u8282\u70b9\u7ec4\u6210 \\(B\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/f/#_3","title":"\u6700\u5927\u56e2\u7684\u65b9\u6848\u6570","text":"<p>\u7531\u4e8e \\(B\\) \u4e2d\u7684\u8282\u70b9\u53ea\u80fd\u5411 \\(A\\) \u4e2d\u7684\u8282\u70b9\u8fde\u8fb9\uff0c\u56e0\u6b64 \\(B\\) \u4e2d\u8282\u70b9\u7684\u6700\u5927\u5ea6\u6570\u4e3a \\(|A|\\)\u3002\u5982\u679c \\(B\\) \u4e2d\u5b58\u5728\u5ea6\u6570\u4e3a \\(|A|\\) \u7684\u8282\u70b9\uff0c\u90a3\u4e48\u5c06\u5b83\u52a0\u5165 \\(A\\) \u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u66f4\u5927\u7684\u56e2\uff0c\u548c \\(A\\) \u662f\u6700\u5927\u56e2\u77db\u76fe\u3002\u56e0\u6b64 \\(B\\) \u4e2d\u8282\u70b9\u7684\u6700\u5927\u5ea6\u6570\u4e3a \\((|A| - 1)\\)\u3002</p> <p>\u5982\u679c \\(B\\) \u4e2d\u6709\u5ea6\u6570\u4e3a \\((|A| - 1)\\) \u7684\u8282\u70b9 \\(u\\)\uff0c\u8bbe \\(A\\) \u4e2d\u552f\u4e00\u4e0e \\(u\\) \u6ca1\u6709\u8fde\u8fb9\u7684\u8282\u70b9\u662f \\(v\\)\uff0c\u5219 \\((A - \\{v\\}) \\cup \\{u\\}\\) \u4e5f\u662f\u4e00\u4e2a\u56e2\u3002\u56e0\u6b64\uff0c\u6700\u5927\u56e2\u7684\u65b9\u6848\u6570\u5c31\u662f \\(B\\) \u4e2d\u5ea6\u6570\u4e3a \\((|A| - 1)\\) \u7684\u8282\u70b9\u6570\u52a0\u4e00\u3002</p>"},{"location":"2018-icpc-qingdao-online/f/#_4","title":"\u6700\u5927\u72ec\u7acb\u96c6\u7684\u65b9\u6848\u6570","text":"<p>\u7531\u4e8e \\(A\\) \u4e2d\u7684\u8282\u70b9\u4e24\u4e24\u76f8\u8fde\uff0c\u56e0\u6b64\u6700\u591a\u4ece \\(A\\) \u5411 \\(B\\) \u4e2d\u52a0\u5165\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u82e5 \\(A\\) \u4e2d\u5b58\u5728\u5ea6\u6570\u7b49\u4e8e \\((|A| - 1)\\) \u7684\u8282\u70b9 \\(u\\)\uff0c\u8bf4\u660e \\(u\\) \u548c \\(B\\) \u4e2d\u7684\u8282\u70b9\u4e0d\u5b58\u5728\u8fde\u8fb9\uff0c\u56e0\u6b64 \\(B \\cup \\{u\\}\\) \u624d\u662f\u6700\u5927\u7684\u72ec\u7acb\u96c6\u3002\u6700\u5927\u72ec\u7acb\u96c6\u7684\u65b9\u6848\u6570\u5c31\u662f \\(A \u4e2d\u5ea6\u6570\u4e3a\\)(|A| - 1)$ \u7684\u8282\u70b9\u6570\u91cf\u3002</p> <p>\u5426\u5219\uff0c\u82e5 \\(A\\) \u4e2d\u5b58\u5728\u5ea6\u6570\u7b49\u4e8e \\(|A|\\) \u7684\u8282\u70b9 \\(u\\)\uff0c\u8bf4\u660e \\(u\\) \u6070\u548c \\(B\\) \u4e2d\u7684\u4e00\u4e2a\u8282\u70b9 \\(v\\) \u6709\u8fde\u8fb9\uff0c\u5219 \\((B - \\{v\\}) \\cup \\{u\\}\\) \u4e5f\u662f\u4e00\u4e2a\u72ec\u7acb\u96c6\u3002\u56e0\u6b64\u6700\u5927\u72ec\u7acb\u96c6\u7684\u65b9\u6848\u6570\u5c31\u662f \\(A \u4e2d\u5ea6\u6570\u4e3a\\)|A|$ \u7684\u8282\u70b9\u6570\u91cf\u52a0\u4e00\u3002</p> <p>\u5426\u5219\uff0c\u82e5 \\(A\\) \u4e2d\u8282\u70b9\u7684\u6700\u5c0f\u5ea6\u6570\u5927\u4e8e \\(|A|\\)\uff0c\u8bf4\u660e \\(A\\) \u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u548c \\(B\\) \u4e2d\u81f3\u5c11\u4e24\u4e2a\u8282\u70b9\u6709\u8fde\u8fb9\uff0c\u56e0\u6b64\u65e0\u6cd5\u5411 \\(B\\) \u4e2d\u52a0\u5165\u66f4\u591a\u8282\u70b9\uff0c\u65b9\u6848\u6570\u4e3a \\(1\\)\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n + m)\\)\uff0c\u4e3b\u8981\u662f\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2018-icpc-qingdao-online/f/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, m;\n\nint deg[MAXN + 10];\nbool flag[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    if (m == 0) { printf(\"%d 1\\n\", n); return; }\n\n    memset(deg, 0, sizeof(int) * (n + 3));\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        deg[x]++; deg[y]++;\n    }\n\n    // \u6240\u6709\u8282\u70b9\u6309\u5ea6\u6570\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n    vector&lt;int&gt; vec;\n    for (int i = 1; i &lt;= n; i++) vec.push_back(i);\n    sort(vec.begin(), vec.end(), [&amp;](int a, int b) {\n        return deg[a] &gt; deg[b];\n    });\n\n    // \u6c42\u6700\u5927\u56e2\u7684\u5927\u5c0f\n    memset(flag, 0, sizeof(bool) * (n + 3));\n    int sz = 0;\n    for (int x : vec) {\n        if (deg[x] &gt;= sz) sz++, flag[x] = true;\n        else break;\n    }\n\n    // \u6700\u5927\u56e2\u7684\u65b9\u6848\u6570\n    int ans = 1;\n    for (int i = 1; i &lt;= n; i++) if (!flag[i] &amp;&amp; deg[i] == sz - 1) ans++;\n    printf(\"%d \", ans);\n\n    // \u6700\u5927\u72ec\u7acb\u96c6\u7684\u65b9\u6848\u6570\n    int larger = 0, equal = 1;\n    for (int i = 1; i &lt;= n; i++) if (flag[i]) {\n        if (deg[i] == sz - 1) larger++;\n        else if (deg[i] == sz) equal++;\n    }\n    printf(\"%d\\n\", larger ? larger : equal);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/g/","title":"G - Couleur","text":""},{"location":"2018-icpc-qingdao-online/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387121/1550 (7.8%)"},{"location":"2018-icpc-qingdao-online/g/#_2","title":"\u9898\u89e3","text":"<p>\u88ab\u5220\u9664\u7684\u4f4d\u7f6e\u628a\u5e8f\u5217 \\(a_1, a_2, \\cdots, a_n\\) \u5206\u6210\u4e86\u82e5\u5e72\u6bb5\u3002\u7531\u4e8e\u5b50\u6570\u7ec4\u7684\u9006\u5e8f\u5bf9\u6570\u4e0d\u4f1a\u8d85\u8fc7\u539f\u6570\u7ec4\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u8003\u8651\u6bcf\u4e00\u6574\u6bb5\u7684\u9006\u5e8f\u5bf9\u6570\uff0c\u5c31\u80fd\u4ece\u4e2d\u9009\u51fa\u9006\u5e8f\u5bf9\u6570\u6700\u591a\u7684\u5b50\u6570\u7ec4\u3002</p> <p>\u7528 <code>map</code> \u7ef4\u62a4\u6bcf\u6bb5\u7684\u9006\u5e8f\u5bf9\u6570\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u5c06\u4e00\u6bb5\u62c6\u6210\u4e24\u6bb5\u3002\u8003\u8651\u5c06\u5b50\u6570\u7ec4 \\([l, r]\\) \u4ece \\(x\\) \u5904\u62c6\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4 \\([l, x - 1]\\) \u548c \\([x + 1, r]\\)\u3002\u8bbe <code>rev(l, r)</code> \u8868\u793a\u5b50\u6570\u7ec4 \\([l, r]\\) \u91cc\u7684\u9006\u5e8f\u5bf9\u6570\u3002</p> <p>\u5982\u679c \\(x - l &lt; r - x\\)\uff08\u5373\u62c6\u5206\u540e\u7b2c\u4e00\u4e2a\u5b50\u6570\u7ec4\u91cc\u7684\u5143\u7d20\u8f83\u5c11\uff09\uff0c\u5219</p> <pre><code>rev(x + 1, r) = rev(l, r)\n              - rev(l, x - 1)\n              - (\u4e00\u4e2a\u5143\u7d20\u5728 [l, x - 1]\uff0c\u53e6\u4e00\u4e2a\u5143\u7d20\u5728 [x + 1, r] \u7684\u9006\u5e8f\u5bf9\u6570)\n              - (\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u662f a_x \u7684\u9006\u5e8f\u5bf9\u6570)\n</code></pre> <p>\u5982\u679c \\(x - l &gt; r - x\\)\uff08\u5373\u62c6\u5206\u540e\u7b2c\u4e8c\u4e2a\u5b50\u6570\u7ec4\u91cc\u7684\u5143\u7d20\u8f83\u5c11\uff09\uff0c\u5219</p> <pre><code>rev(l, x - 1) = rev(l, r)\n              - rev(x + 1, r)\n              - (\u4e00\u4e2a\u5143\u7d20\u5728 [l, x - 1]\uff0c\u53e6\u4e00\u4e2a\u5143\u7d20\u5728 [x + 1, r] \u7684\u9006\u5e8f\u5bf9\u6570)\n              - (\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u662f a_x \u7684\u9006\u5e8f\u5bf9\u6570)\n</code></pre> <p>\u6211\u4eec\u53ef\u4ee5\u7528\u8868\u793a\u503c\u57df\u7684\u4e3b\u5e2d\u6811\uff08\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\uff09\u7ef4\u62a4 \\(f(i, u, v)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u5143\u7d20\u4e2d\uff0c\u6709\u51e0\u4e2a\u6574\u6570\u5728 \\([u, v]\\) \u7684\u8303\u56f4\u5185\uff0c\u8fd9\u6837\u5c31\u80fd\u7528 \\(\\mathcal{O}(\\min(x - l, r - x)\\log n)\\) \u7684\u590d\u6742\u5ea6\u628a\u7b49\u5f0f\u91cc\u7684\u540e\u4e09\u9879\u66b4\u529b\u7b97\u51fa\u6765\u3002</p> <p>\u6839\u636e\u542f\u53d1\u5f0f\u5206\u88c2\uff0c\u7531\u4e8e\u6bcf\u6b21\u679a\u4e3e\u7684\u5b50\u6570\u7ec4\u957f\u5ea6\u90fd\u81f3\u591a\u4e3a\u539f\u6765\u7684\u4e00\u534a\uff0c\u56e0\u6b64\u6bcf\u4e2a\u5143\u7d20\u53c2\u4e0e\u66b4\u529b\u8ba1\u7b97\u7684\u6b21\u6570\u81f3\u591a\u4e3a \\(\\mathcal{O}(\\log n)\\) \u6b21\uff0c\u56e0\u6b64\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log^2 n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/g/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXP 20\nusing namespace std;\n\nint n, A[MAXN + 10];\n\nint tot, sumo[MAXN * MAXP + 10], ch[MAXN * MAXP + 10][2], root[MAXN + 10];\n// map key \u90fd\u662f\u5df2\u5220\u9664\u7684\u4f4d\u7f6e\n// mp[i]\uff1a\u4ee5 A[i + 1] \u4e3a\u5f00\u5934\u7684\u6bb5\u7684\u9006\u5e8f\u5bf9\u6570\nmap&lt;int, long long&gt; mp;\n// \u4fdd\u5b58\u6240\u6709\u6bb5\u7684\u9006\u5e8f\u5bf9\u6570\nmultiset&lt;long long&gt; ms;\n\n// \u65b0\u5efa\u7ebf\u6bb5\u6811\u8282\u70b9\nint newNode() {\n    tot++;\n    sumo[tot] = 0;\n    ch[tot][0] = ch[tot][1] = 0;\n    return tot;\n}\n\n// \u6dfb\u52a0\u4e00\u4e2a\u6574\u6570 pos\nvoid add(int id, int l, int r, int old, int pos) {\n    sumo[id] = sumo[old];\n    ch[id][0] = ch[old][0]; ch[id][1] = ch[old][1];\n\n    if (l == r) sumo[id]++;\n    else {\n        int mid = (l + r) &gt;&gt; 1;\n        if (pos &lt;= mid) add(ch[id][0] = newNode(), l, mid, ch[old][0], pos);\n        else add(ch[id][1] = newNode(), mid + 1, r, ch[old][1], pos);\n        sumo[id] = sumo[ch[id][0]] + sumo[ch[id][1]];\n    }\n}\n\n// \u8be2\u95ee\u6574\u6570 ql \u5230 qr \u4e00\u5171\u6709\u51e0\u4e2a\nint query(int id, int l, int r, int ql, int qr) {\n    if (ql &gt; qr) return 0;\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) return sumo[id];\n    int mid = (l + r) &gt;&gt; 1;\n    return\n        (ql &lt;= mid ? query(ch[id][0], l, mid, ql, qr) : 0) +\n        (qr &gt; mid ? query(ch[id][1], mid + 1, r, ql, qr) : 0);\n}\n\n// \u542f\u53d1\u5f0f\u5206\u88c2\uff0c\u5c06\u533a\u95f4 [L + 1, R - 1] \u4ece X \u5904\u5206\u88c2\nvoid split(int L, int R, int X) {\n    long long old = mp[L]; ms.erase(ms.find(old));\n    // base\uff1a\u4e00\u4e2a\u5143\u7d20\u662f A[X] \u7684\u9006\u5e8f\u5bf9\u6570\n    long long base = query(root[R - 1], 1, n, 1, A[X] - 1) - query(root[X], 1, n, 1, A[X] - 1);\n    base += query(root[X - 1], 1, n, A[X] + 1, n) - query(root[L], 1, n, A[X] + 1, n);\n    if (X - L &lt; R - X) {\n        // \u5de6\u534a\u8fb9\u66f4\u77ed\uff0c\u679a\u4e3e\u5de6\u534a\u8fb9\n        // a\uff1a[L + 1, X - 1] \u7684\u9006\u5e8f\u5bf9\u6570\n        // b\uff1abase + \u4e00\u4e2a\u5143\u7d20\u5728 [L + 1, X - 1]\uff0c\u53e6\u4e00\u4e2a\u5143\u7d20\u5728 [X + 1, R - 1] \u7684\u9006\u5e8f\u5bf9\u6570\n        long long a = 0, b = base;\n        for (int i = L + 1; i &lt; X; i++) {\n            a += query(root[i - 1], 1, n, A[i] + 1, n) - query(root[L], 1, n, A[i] + 1, n);\n            b += query(root[R - 1], 1, n, 1, A[i] - 1) - query(root[X], 1, n, 1, A[i] - 1);\n        }\n        mp[L] = a; ms.insert(mp[L]);\n        mp[X] = old - a - b; ms.insert(mp[X]);\n    } else {\n        // \u53f3\u534a\u8fb9\u66f4\u77ed\uff0c\u679a\u4e3e\u53f3\u534a\u8fb9\n        // a\uff1a[X + 1, R - 1] \u7684\u9006\u5e8f\u5bf9\u6570\n        // b\uff1abase + \u4e00\u4e2a\u5143\u7d20\u5728 [L + 1, X - 1]\uff0c\u53e6\u4e00\u4e2a\u5143\u7d20\u5728 [X + 1, R - 1] \u7684\u9006\u5e8f\u5bf9\u6570\n        long long a = 0, b = base;\n        for (int i = X + 1; i &lt; R; i++) {\n            a += query(root[i - 1], 1, n, A[i] + 1, n) - query(root[X], 1, n, A[i] + 1, n);\n            b += query(root[X - 1], 1, n, A[i] + 1, n) - query(root[L], 1, n, A[i] + 1, n);\n        }\n        mp[L] = old - a - b; ms.insert(mp[L]);\n        mp[X] = a; ms.insert(mp[X]);\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    // \u5c06 A[1] \u5230 A[n] \u4f9d\u6b21\u52a0\u5165\u4e3b\u5e2d\u6811\n    // root[i] \u5c31\u662f\u52a0\u5165 A[i] \u4e4b\u540e\u7684\u60c5\u51b5\n    tot = 0;\n    for (int i = 1; i &lt;= n; i++) add(root[i] = newNode(), 1, n, root[i - 1], A[i]);\n\n    // \u8ba1\u7b97\u6574\u4e2a\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u6570\n    long long tmp = 0;\n    for (int i = 1; i &lt;= n; i++) tmp += query(root[i - 1], 1, n, A[i] + 1, n);\n\n    // \u628a\u4e0b\u6807 0 \u548c n + 1 \u89c6\u4e3a\u5df2\u5220\u9664\u7684\u4e0b\u6807\uff0c\u65b9\u4fbf\u5904\u7406\n    mp.clear(); ms.clear();\n    mp[0] = tmp; ms.insert(tmp);\n    mp[n + 1] = 0; ms.insert(0);\n\n    long long ans = *prev(ms.end());\n    for (int i = 1; i &lt;= n; i++) {\n        printf(\"%lld%c\", ans, \"\\n \"[i &lt; n]);\n        long long x; scanf(\"%lld\", &amp;x);\n        x ^= ans;\n        auto it = prev(mp.lower_bound(x));\n        split(it-&gt;first, next(it)-&gt;first, x);\n        ans = *prev(ms.end());\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/h/","title":"H - Traveling on the Axis","text":""},{"location":"2018-icpc-qingdao-online/h/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387933/1550 (60.2%)"},{"location":"2018-icpc-qingdao-online/h/#_2","title":"\u9898\u89e3","text":"<p>\u8003\u8651 \\(t(p, q - 1)\\) \u548c \\(t(p, q)\\) \u7684\u5173\u7cfb\u3002\u5bb9\u6613\u53d1\u73b0\uff1a</p> <ul> <li>\u82e5 \\(s_{q - 1} = s_q\\)\uff0c\u5219 \\(t(p, q) = t(p, q - 1) + 2\\)\u3002</li> <li>\u82e5 \\(s_{q - 1} \\ne s_q\\)\uff0c\u5219 \\(t(p, q) = t(p, q - 1) + 1\\)\u3002</li> </ul> <p>\u8bbe \\(f(q) = \\sum\\limits_{p = 0}^{q - 1} t(p, q)\\)\uff0c\u5219\u6709\u9012\u63a8\u5f0f</p> \\[ f(q) = \\begin{cases} f(q - 1) + 2(q - 1) + t(q - 1, q) &amp; \\text{if } s_{q - 1} = s_q \\\\ f(q - 1) + (q - 1) + t(q - 1, q) &amp; \\text{otherwise} \\end{cases} \\] <p>\u521d\u503c \\(f(0) = 0\\)\uff0c\u7b54\u6848\u5c31\u662f \\(\\sum\\limits_{q = 1}^n f(q)\\)\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/h/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nchar s[MAXN + 10];\nlong long ans;\n\nvoid solve() {\n    scanf(\"%s\", s + 1);\n\n    ans = 0;\n    long long sm = 0;\n    for (int i = 1; s[i]; i++) {\n        if (s[i] == s[i - 1]) sm += 2 * (i - 1);\n        else sm += i - 1;\n        if (s[i] == '1') sm++;\n        else sm += 2;\n        ans += sm;\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/i/","title":"I - Kuririn MIRACLE","text":""},{"location":"2018-icpc-qingdao-online/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u73877/1550 (0.5%)"},{"location":"2018-icpc-qingdao-online/i/#_2","title":"\u9898\u89e3","text":"<p>\u8bb0\u7b2c\u4e00\u8f86\u8f66\u7684\u5706\u5fc3\u4e3a \\(A\\)\uff0c\u7b2c\u4e8c\u8f86\u8f66\uff08\u969c\u788d\u7269\uff09\u7684\u5706\u5fc3\u4e3a \\(B\\)\u3002\u9996\u5148\u5bb9\u6613\u60f3\u5230\u7b54\u6848\u7684\u4e0a\u754c\uff1a\u5706 \\(A\\) \u5c31\u8ddf\u5728\u5706 \\(B\\) \u540e\u9762\u6cbf \\(x\\) \u8f74\u8d70\u5230\u7ec8\u70b9\uff0c\u65f6\u95f4\u662f \\(\\frac{d}{v}\\)\u3002</p> <p>\u7531\u4e8e\u5706 \\(A\\) \u7684\u901f\u5ea6\u6bd4\u5706 \\(B\\) \u5feb\uff0c\u4e5f\u53ef\u4ee5\u5148\u8ba9\u5706 \\(A\\) \u4e0e\u5706 \\(B\\) \u4fdd\u6301\u76f8\u5207\uff0c\u4ece\u5706 \\(B\\) \u4e0a\u65b9\u7ed5\u8fc7\u53bb\uff0c\u7ed5\u5230\u67d0\u4e2a\u89d2\u5ea6\u540e\uff0c\u518d\u6cbf\u76f4\u7ebf\u8d70\u5230\u7ec8\u70b9\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5206\u522b\u8ba1\u7b97\u4e24\u6bb5\u8def\u5f84\u7684\u65f6\u95f4\u3002</p>"},{"location":"2018-icpc-qingdao-online/i/#_3","title":"\u7b2c\u4e00\u6bb5\u8def\u5f84","text":"<p>\u70b9 \\(A\\) \u7684\u7b2c\u4e00\u6bb5\u8fd0\u52a8\u53ef\u4ee5\u62c6\u5206\u6210\u8ddf\u7740\u5706 \\(B\\) \u7684\uff0c\u901f\u5ea6\u4e3a \\(v\\) \u7684\u5300\u901f\u76f4\u7ebf\u8fd0\u52a8\uff0c\u548c\u7ed5\u7740\u5706 \\(B\\) \u7684\uff0c\u534a\u5f84\u4e3a \\(2r\\) \u7684\u53d8\u901f\u5706\u5468\u8fd0\u52a8\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u8bb0 \\(AB\\) \u548c \\(x\\) \u8f74\u8d1f\u65b9\u5411\u7684\u5939\u89d2\u4e3a \\(\\theta\\)\uff0c\u70b9 \\(A\\) \u76f8\u5bf9\u70b9 \\(B\\) \u7684\u5207\u5411\u901f\u5ea6\u4e3a \\(v_t(\\theta)\\)\uff0c\\(v_x(\\theta)\\) \u662f \\(v_t(\\theta)\\) \u6cbf \\(x\\) \u8f74\u6b63\u65b9\u5411\u7684\u5206\u89e3\u901f\u5ea6\uff0c\\(v_y(\\theta)\\) \u662f \\(v_t(\\theta)\\) \u6cbf \\(y\\) \u8f74\u6b63\u65b9\u5411\u7684\u5206\u89e3\u901f\u5ea6\uff0c\u6709\u4ee5\u4e0b\u65b9\u7a0b\u7ec4\u3002</p> \\[ \\begin{cases} v_x(\\theta) = v_t(\\theta)\\sin \\theta \\\\ v_y(\\theta) = v_t(\\theta)\\cos \\theta \\\\ (v_x(\\theta) + v) ^ 2 + (v_y(\\theta))^2 = (2v)^2 \\end{cases} \\] <p>\u89e3\u5f97 \\(v_t(\\theta) = v (\\sqrt{\\sin^2\\theta + 3} - \\sin\\theta)\\)\u3002</p> <p>\u8bbe\u7b2c\u4e00\u6bb5\u8fd0\u52a8\u4e00\u76f4\u6301\u7eed\u5230 \\(\\theta = \\alpha\\)\uff0c\u5219\u6839\u636e\u5f27\u957f\u516c\u5f0f\uff0c\u7b2c\u4e00\u6bb5\u8fd0\u52a8\u7684\u7528\u65f6\u4e3a</p> \\[ t = \\int_{0}^{\\alpha} \\frac{2rd\\theta}{v_t(\\theta)} \\] <p>\u8fd9\u4e2a\u79ef\u5206\u6ca1\u6709\u4ee3\u6570\u89e3\uff0c\u53ef\u4ee5\u4f7f\u7528 \u81ea\u9002\u5e94\u8f9b\u666e\u68ee\u516c\u5f0f \u8fd1\u4f3c\u8ba1\u7b97\u3002</p>"},{"location":"2018-icpc-qingdao-online/i/#_4","title":"\u7b2c\u4e8c\u6bb5\u8def\u5f84","text":"<p>\u5f53\u70b9 \\(A\\) \u7ecf\u8fc7\u7b2c\u4e00\u6bb5\u8def\u5f84\u540e\uff0c\u5750\u6807\u4e3a</p> \\[ \\begin{cases} x = vt + 2r - 2r\\cos \\alpha \\\\ y = 2r\\sin \\alpha \\end{cases} \\] <p>\u63a5\u4e0b\u6765\uff0c\u70b9 \\(A\\) \u5c06\u4ece\u8fd9\u4e2a\u5750\u6807\u5411\u7ec8\u70b9\u505a\u5300\u901f\u76f4\u7ebf\u8fd0\u52a8\uff0c\u56e0\u6b64\u7b2c\u4e8c\u6bb5\u8fd0\u52a8\u7684\u7528\u65f6\u4e3a \\(\\frac{\\sqrt{(x - d)^2 + y^2}}{2v}\\)\u3002</p> <p>\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u786e\u5b9a \\(\\alpha\\) \u7684\u503c\u3002\u8bbe\u7b2c\u4e8c\u6bb5\u8def\u5f84\u5f00\u59cb\u524d\uff0c\u70b9 \\(A\\) \u548c\u7ec8\u70b9\u7684\u8fde\u7ebf\u4e0e \\(x\\) \u8f74\u8d1f\u65b9\u5411\u7684\u5939\u89d2\u4e3a \\(\\beta\\)\u3002\u8003\u8651\u4ee5\u70b9 \\(B\\) \u4e3a\u4e2d\u5fc3\u7684\u53c2\u8003\u7cfb\uff0c\u70b9 \\(A\\) \u5728\u8be5\u53c2\u8003\u7cfb\u4e2d\u5c06\u4ece \\(\\vec{a} = (x - (2r + vt), y)\\) \u51fa\u53d1\uff0c\u6cbf \\(\\vec{w} = (2v\\cos \\beta - v, -2v\\sin \\beta)\\) \u65b9\u5411\u505a\u5300\u901f\u76f4\u7ebf\u8fd0\u52a8\u3002\u4e3a\u4e86\u4fdd\u8bc1 \\(AB\\) \u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0d\u7f29\u5c0f\uff0c\u5411\u91cf \\(\\vec{a}\\) \u548c \\(\\vec{w}\\) \u4e4b\u95f4\u7684\u5939\u89d2\u4e0d\u80fd\u8d85\u8fc7 \\(90\\) \u5ea6\uff0c\u5373 \\(\\vec{a} \\cdot \\vec{w} \\ge 0\\)\u3002\u4e8c\u5206 \\(\\alpha\\) \u7684\u503c\u5e76\u68c0\u67e5\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6\u662f\u4e8c\u5206\u7684\u590d\u6742\u5ea6\u4e58\u4ee5\u8f9b\u666e\u68ee\u516c\u5f0f\u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2018-icpc-qingdao-online/i/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define EPS 1e-9\nusing namespace std;\n\ndouble v, r, d;\n\nint sgn(double x) {\n    if (x &gt; EPS) return 1;\n    if (x &lt; -EPS) return -1;\n    return 0;\n}\n\n// --------------------\n//  \u8f9b\u666e\u68ee\u516c\u5f0f\n// --------------------\n\ndouble f(double x) {\n    double s = sin(x);\n    return 1 / (sqrt(s * s + 3) - s);\n}\n\ndouble simpson(double l, double r) {\n    double mid = (l + r) / 2;\n    return (r - l) * (f(l) + 4 * f(mid) + f(r)) / 6;\n}\n\ndouble calc(double l, double r, double eps, double ans) {\n    double mid = (l + r) / 2;\n    double fl = simpson(l, mid), fr = simpson(mid, r);\n    if (abs(fl + fr - ans) &lt;= 15 * eps) return fl + fr + (fl + fr - ans) / 15;\n    return calc(l, mid, eps / 2, fl) + calc(mid, r, eps / 2, fr);\n}\n\n// --------------------\n//  \u8f9b\u666e\u68ee\u516c\u5f0f\u7ed3\u675f\n// --------------------\n\nvoid solve() {\n    scanf(\"%lf%lf%lf\", &amp;v, &amp;r, &amp;d);\n\n    // \u76f4\u63a5\u8ddf\u5728\u5706 B \u540e\u9762\u8d70\u5230\u7ec8\u70b9\n    double ans = d / v;\n    const double PI = acos(-1);\n    // \u4e8c\u5206\u7b2c\u4e00\u6bb5\u8fd0\u52a8\u7ed3\u675f\u65f6\u7684\u89d2\u5ea6\n    double head = PI / 2, tail = PI;\n    while (tail - head &gt; EPS) {\n        double mid = (head + tail) / 2;\n        double t = 2 * r / v * calc(0, mid, EPS, simpson(0, mid));\n        double x = 2 * r * (1 - cos(mid)) + v * t;\n        double y = 2 * r * sin(mid);\n        double beta = atan2(y, d - x);\n        // \u8ba1\u7b97\u70b9\u4e58\u7684\u7ed3\u679c\u662f\u5426\u975e\u8d1f\n        double dot = (x - (2 * r + v * t)) * (2 * v * cos(beta) - v) - y * (2 * v * sin(beta));\n        if (sgn(dot) &gt;= 0) {\n            tail = mid;\n            ans = min(ans, t + sqrt((x - d) * (x - d) + y * y) / (2 * v));\n        } else {\n            head = mid;\n        }\n    }\n    printf(\"%.9f\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while(tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/j/","title":"J - Press the Button","text":""},{"location":"2018-icpc-qingdao-online/j/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387576/1550 (37.2%)"},{"location":"2018-icpc-qingdao-online/j/#_2","title":"\u9898\u89e3","text":"<p>\u8bbe \\(l = \\text{lcm}(a, c)\\)\uff0c\u663e\u7136\u6bcf \\(l\\) \u79d2\u7684\u6309\u952e\u60c5\u51b5\u90fd\u662f\u4e00\u6837\u7684\u3002\\(l\\) \u79d2\u5185 BaoBao \u5c06\u4f1a\u6309\u952e \\(\\frac{c}{\\text{gcd}(a, c)}\\) \u6b21\uff08\u6bcf\u6b21\u6309 \\(b\\) \u4e0b\uff09\uff0cDreamGrid \u5c06\u4f1a\u6309\u952e \\(\\frac{a}{\\text{gcd}(a, c)}\\) \u6b21\uff08\u6bcf\u6b21\u6309 \\(d\\) \u4e0b\uff09\uff0c\u56e0\u6b64\u76f4\u63a5\u6a21\u62df\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(a + c)\\)\u3002</p> <ul> <li>\u82e5 \\(t &lt; l\\)\uff0c\u76f4\u63a5\u6a21\u62df\u6bcf\u6b21\u6309\u952e\u3002</li> <li>\u82e5 \\(t \\ge l\\)\uff0c\u901a\u8fc7\u76f4\u63a5\u6a21\u62df\uff0c\u8ba1\u7b97 \\([0, l - 1]\\) \u8fd9\u4e2a\u65f6\u95f4\u6bb5\u8ba1\u6570\u5668\u589e\u52a0\u7684\u6570\u503c \\(x\\)\uff0c\u4ee5\u53ca\u7b2c \\(l\\) \u79d2\u5f00\u59cb\u65f6 LED \u662f\u5426\u8fd8\u4eae\u7740\uff08\u5982\u679c\u4eae\u7740\uff0c\u8bb0 \\(w = 1\\)\uff0c\u5426\u5219\u8bb0 \\(w = 0\\)\uff09\u3002\u4e4b\u540e\u518d\u901a\u8fc7\u76f4\u63a5\u6a21\u62df\uff0c\u7b97\u51fa\u6700\u540e \\((t \\bmod l)\\) \u79d2\u8ba1\u6570\u5668\u589e\u52a0\u7684\u6570\u503c \\(y\\)\uff0c\u5219\u7b54\u6848\u4e3a \\((x + w) \\times \\lfloor \\frac{t}{l} \\rfloor + y\\)\u3002</li> </ul> <p>\u590d\u6742\u5ea6\u4ecd\u7136\u4e3a \\(\\mathcal{O}(a + c)\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/j/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;long long, bool&gt; plb;\n\nint a, b, c, d;\nlong long v, t;\n\n// \u76f4\u63a5\u6a21\u62df\u6309\u952e\u60c5\u51b5\uff0c\n// \u8fd4\u56de [0, t] \u8fd9\u4e2a\u65f6\u95f4\u6bb5\u8ba1\u6570\u5668\u589e\u52a0\u7684\u6570\u503c\uff0c\n// \u4ee5\u53ca\u7b2c (t + 1) \u79d2\u5f00\u59cb\u65f6 LED \u662f\u5426\u4eae\u7740\nplb gao(long long t) {\n    // cnt\uff1a\u8ba1\u6570\u5668\u7684\u503c\n    // tim\uff1aLED \u6700\u540e\u4eae\u5230\u54ea\u4e00\u79d2\n    long long cnt = 0, tim = -1;\n    // now\uff1a\u73b0\u5728\u7684\u65f6\u95f4\n    // x\uff1aBaoBao \u4e0b\u4e00\u6b21\u6309\u952e\u7684\u65f6\u95f4\n    // y\uff1aDreamGrid \u4e0b\u4e00\u6b21\u6309\u952e\u7684\u65f6\u95f4\n    long long now = 0, x = 0, y = 0;\n    while (now &lt;= t) {\n        // BaoBao \u6309\u952e\n        if (now == x) {\n            cnt += b - (now &gt; tim ? 1 : 0);\n            tim = now + v;\n            x += a;\n        }\n        // DreamGrid \u6309\u952e\n        if (now == y) {\n            cnt += d - (now &gt; tim ? 1 : 0);\n            tim = now + v;\n            y += c;\n        }\n        // \u524d\u8fdb\u5230\u4e0b\u4e00\u4e2a\u6309\u952e\u7684\u65f6\u523b\n        now = min(x, y);\n    }\n    return plb(cnt, tim &gt; t);\n}\n\nvoid solve() {\n    scanf(\"%d%d%d%d%lld%lld\", &amp;a, &amp;b, &amp;c, &amp;d, &amp;v, &amp;t);\n    long long l = 1LL * a / gcd(a, c) * c;\n    if (t &lt; l) printf(\"%lld\\n\", gao(t).first);\n    else {\n        plb p1 = gao(l - 1);\n        plb p2 = gao(t % l);\n        printf(\"%lld\\n\", (p1.first + (p1.second ? 1 : 0)) * (t / l) + p2.first);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-icpc-qingdao-online/k/","title":"K - XOR Clique","text":""},{"location":"2018-icpc-qingdao-online/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042018 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u9752\u5c9b\u7ad9\u7f51\u7edc\u8d5b \u961f\u4f0d\u901a\u8fc7\u73871359/1550 (87.7%)"},{"location":"2018-icpc-qingdao-online/k/#_2","title":"\u9898\u89e3","text":"<p>\u6ce8\u610f\u5230\u91cd\u8981\u6027\u8d28\uff1a\u628a\u6240\u6709\u6570\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u540e\uff0c\\(S\\) \u4e2d\u6240\u6709\u6570\u7684\u6700\u9ad8\u4f4d\u90fd\u662f\u4e00\u6837\u7684\u3002</p> <p>\u8bc1\u660e\uff1a\u8bbe \\(S\\) \u4e2d\u5b58\u5728\u4e24\u4e2a\u6570 \\(x\\) \u548c \\(y\\)\uff0c\u5176\u4e2d \\(x\\) \u7684\u6700\u9ad8\u4f4d\u662f \\(2^p\\)\uff0c\\(y\\) \u7684\u6700\u9ad8\u4f4d\u662f \\(2^q &lt; 2^p\\)\uff0c\u5219 \\(x \\oplus y \\ge 2^p &gt; y\\)\uff0c\u4e0e\u8981\u6c42\u4e0d\u7b26\u3002</p> <p>\u800c\u4e14\uff0c\u5982\u679c\u4e24\u4e2a\u6570\u7684\u6700\u9ad8\u4f4d\u90fd\u662f \\(2^p\\)\uff0c\u90a3\u4e48\u5b83\u4eec\u5f02\u6216\u548c\u7684\u7b2c \\(p\\) \u4f4d\u662f \\(0\\)\uff0c\u5f02\u6216\u548c\u80af\u5b9a\u5c0f\u4e8e\u4e24\u4e2a\u6570\u7684\u6700\u5c0f\u503c\u3002</p> <p>\u56e0\u6b64\uff0c\u54ea\u4e2a\u6700\u9ad8\u4f4d\u6709\u6700\u591a\u7684\u6570\uff0c\u5c31\u628a\u90a3\u4e9b\u6570\u5f62\u6210\u7684\u96c6\u5408\u4f5c\u4e3a\u7b54\u6848\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log \\max a_i)\\)\u3002</p>"},{"location":"2018-icpc-qingdao-online/k/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXP 30\nusing namespace std;\n\nint n, ans;\nint cnt[MAXP + 5];\n\nvoid solve() {\n    memset(cnt, 0, sizeof(cnt));\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        // \u8ba1\u7b97 x \u7684\u6700\u9ad8\u4f4d\n        int j = 0;\n        while (x) x &gt;&gt;= 1, j++;\n        // \u8ba1\u7b97\u6bcf\u4e2a\u6700\u9ad8\u4f4d\u6709\u51e0\u4e2a\u6570\n        cnt[j - 1]++;\n    }\n\n    ans = 0;\n    // \u53d6\u62e5\u6709\u6700\u591a\u6570\u7684\u6700\u9ad8\u4f4d\u4f5c\u4e3a\u7b54\u6848\n    for (int i = 0; i &lt;= MAXP; i++) ans = max(ans, cnt[i]);\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2018-provincial-zhejiang/","title":"2018 \u6d59\u6c5f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2018-provincial-zhejiang/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2018/04/29 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board \u5728\u7ebf\u7ec3\u4e60ZOJ 4024 ~ 4036 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2018-provincial-zhejiang/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 260, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 245, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 48, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 18, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 44, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 185, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 95, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 209, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 277, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 27, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 40, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 71, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 50, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 23, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2018-provincial-zhejiang/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2018-school-zju/","title":"2018 \u6d59\u6c5f\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2018-school-zju/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2018/04/07 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board \u5728\u7ebf\u7ec3\u4e60ZOJ 4014 ~ 4023 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2018-school-zju/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 134, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 42, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 56, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 26, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 25, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 20, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 55, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 31, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 135, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 42, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 67, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 18, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2018-school-zju/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2019-provincial-shaanxi/","title":"2019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2019-provincial-shaanxi/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2019/06/02 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ | \u6d1b\u8c37 | ZOJ 4126 ~ 4137 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2019-provincial-shaanxi/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 57, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 75, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 92, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 11, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 94, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 15, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 21, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 36, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2019-provincial-shaanxi/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2019-provincial-shaanxi/#_4","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>A - Digit Mode</li> <li>B - Grid with Arrows</li> <li>C - 0689</li> <li>D - Pick Up</li> <li>E - Turn It Off</li> <li>F - K-hour Clock</li> <li>G - Paper-cutting</li> <li>H - To the Park</li> <li>I - Unrooted Trie</li> <li>J - Coolbits</li> <li>K - Escape Plan</li> <li>L - Digit Product</li> </ul>"},{"location":"2019-provincial-shaanxi/a/","title":"A - Digit Mode","text":""},{"location":"2019-provincial-shaanxi/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73872/111 (1.8%)"},{"location":"2019-provincial-shaanxi/a/#_2","title":"\u9898\u89e3","text":"<p>\u8bbe \\(n\\) \u5171\u6709 \\(r\\) \u4f4d\u3002\u4e0e\u6570\u4f4d dp \u7c7b\u4f3c\uff0c\u6211\u4eec\u679a\u4e3e\u6570\u4f4d \\(p\\) \u8868\u793a\u6211\u4eec\u8003\u8651\u7684\u6570\u4e2d\uff0c\u6700\u9ad8 \\((p - 1)\\) \u4f4d\u548c \\(n\\) \u7684\u6700\u9ad8 \\((p - 1)\\) \u4f4d\u76f8\u540c\uff0c\u4f46\u7b2c \\(p\\) \u9ad8\u4f4d\u6bd4 \\(n\\) \u7684\u7b2c \\(p\\) \u9ad8\u4f4d\u8981\u5c0f\u3002\u8fd9\u6837\u7b2c \\((p + 1)\\) \u4f4d\u5230\u7b2c \\(r\\) \u4f4d\u5c31\u53ef\u4ee5\u968f\u4fbf\u586b\u4e86\u3002</p> <p>\u6b64\u65f6\u6211\u4eec\u679a\u4e3e\u4f17\u6570\u662f\u6570\u7801 \\(m\\)\uff0c\u4ee5\u53ca\u4f17\u6570\u7684\u51fa\u73b0\u6b21\u6570 \\(c\\)\uff0c\u5c31\u80fd\u7b97\u51fa\u5176\u5b83\u6bcf\u79cd\u6570\u7801\u5728\u7b2c \\((p + 1)\\) \u4f4d\u5230\u7b2c \\(r\\) \u4f4d\u4e2d\u6700\u591a\u80fd\u518d\u586b\u51e0\u4e2a\uff0c\u7528\u591a\u91cd\u80cc\u5305\u8ba1\u7b97\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u4ee4 \\(f(i, j)\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u6570\u7801\u5728\u7b2c \\((p + 1)\\) \u4f4d\u5230\u7b2c \\(r\\) \u4f4d\u4e2d\u586b\u4e86 \\(j\\) \u4e2a\uff0c\u5219\u6839\u636e \u591a\u91cd\u96c6\u7684\u6392\u5217\u6570\uff0c\u8f6c\u79fb\u65b9\u7a0b\u4e3a</p> \\[ f(i, j) = \\sum\\limits_{k} f(i - 1, j - k) \\times \\frac{j!}{(j - k)!} \\times \\frac{1}{k!} \\] <p>\u8bbe\u4f17\u6570\u5728\u524d \\(p\\) \u4f4d\u4e2d\u51fa\u73b0\u6b21\u6570\u4e3a \\(c'\\)\uff0c\u5219\u65b9\u6848\u6570\u4e3a</p> \\[ f(9, (n - p + 1) - (c - c')) \\times \\frac{(n - p + 1)!}{((n - p + 1) - (c - c'))!} \\times \\frac{1}{(c - c')!} \\] <p>\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u8fd8\u53ef\u4ee5\u51cf\u5c11\u8ba1\u7b97\u7684\u6b21\u6570\u3002\u53ef\u4ee5\u53d1\u73b0 \\(\\frac{j!}{(j - k)!}\\) \u4e3b\u8981\u7528\u4e8e\u6539\u53d8\u591a\u91cd\u96c6\u6392\u5217\u6570\u7684\u5206\u6bcd\uff0c\u56e0\u4e3a\u6700\u540e\u7684\u7b54\u6848\u4e2d\uff0c\u5206\u6bcd\u603b\u662f \\((n - p + 1)!\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a \\(\\frac{j!}{(j - k)!}\\) \u8fd9\u4e00\u9879\u53bb\u6389\uff0c\u6700\u540e\u628a\u7b54\u6848\u7edf\u4e00\u4e58\u4ee5 \\(\\frac{(n - p + 1)!}{(c - c')!}\\) \u5373\u53ef\u3002</p> <p>\u5f53\u7136\uff0c\u522b\u5fd8\u4e86\u8003\u8651\u957f\u5ea6\u6bd4 \\(n\\) \u8981\u77ed\u7684\u6570\u3002\u679a\u4e3e\u957f\u5ea6\u4ee5\u53ca\u7b2c\u4e00\u4f4d\u7684\u6570\u7801\uff0c\u5269\u4e0b\u7684\u4f4d\u7f6e\u6309\u4e0a\u8ff0\u7684\u65b9\u6cd5\u8ba1\u7b97\u591a\u91cd\u80cc\u5305\u5373\u53ef\u3002</p> <p>\u8bbe\u6570\u7801\u5171\u6709 \\(d = 10\\) \u4e2a\uff0c\u5219\u6bcf\u6b21\u591a\u91cd\u80cc\u5305\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(d \\times \\log^2 n)\\)\uff0c\u518d\u4e58\u4e0a\u5916\u56f4\u7684\u6240\u6709\u679a\u4e3e\uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathcal{O}(d^3 \\times \\log^4 n)\\)\u3002\u8fd9\u4e2a\u590d\u6742\u5ea6\u770b\u8d77\u6765\u975e\u5e38\u5927\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e38\u6570\u5f88\u5c0f\uff0c\u5728\u6700\u5927\u7684\u6570\u636e\u4e0b\uff0c\u6700\u5185\u5c42\u7684\u5faa\u73af\u6267\u884c\u6b21\u6570\u5728 \\(1.8 \\times 10^8\\) \u5de6\u53f3\uff0c\u53ef\u4ee5\u5728\u65f6\u9650\u5185\u901a\u8fc7\u3002</p>"},{"location":"2019-provincial-shaanxi/a/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>// \u7531\u4e8e\u5305\u542b\u5927\u91cf long long \u8fd0\u7b97\uff0ccf \u4e0a\u5efa\u8bae\u4f7f\u7528 64 \u4f4d\u7f16\u8bd1\u5668\uff0c\u8fd0\u884c\u901f\u5ea6\u5feb\n#include &lt;bits/stdc++.h&gt;\n#define MAXN 50\n#define MOD ((int) 1e9 + 7)\nusing namespace std;\n\nint n;\nlong long ans;\nchar s[MAXN + 10];\n\nint A[MAXN + 10];\nlong long f[MAXN + 10], fac[MAXN + 10], ifac[MAXN + 10];\n\n// \u8ba1\u7b97\u7b2c L \u5230 R \u4f4d\u968f\u4fbf\u586b\u7684\u8d21\u732e\nvoid gao(int L, int R) {\n    int len = R - L + 1;\n    // \u7edf\u8ba1\u5df2\u7ecf\u679a\u4e3e\u7684\u524d\u7f00\u90e8\u5206\uff0c\u6bcf\u79cd\u6570\u7801\u51fa\u73b0\u4e86\u51e0\u6b21\n    int cnt[10] = {0};\n    for (int i = 1; i &lt; L; i++) cnt[A[i]]++;\n\n    // \u679a\u4e3e\u4f17\u6570 m\uff0c\u4ee5\u53ca\u51fa\u73b0\u6b21\u6570 c\n    for (int m = 1; m &lt;= 9; m++) for (int c = cnt[m]; c &lt;= cnt[m] + len; c++) {\n        int tot = len - (c - cnt[m]);\n        // \u8ba1\u7b97\u591a\u91cd\u80cc\u5305\n        auto calc = [&amp;]() {\n            memset(f, 0, sizeof(long long) * (tot + 3));\n            f[0] = 1;\n            for (int i = 0; i &lt;= 9; i++) if (i != m) {\n                int lim = c - (i &gt; m ? 1 : 0) - cnt[i];\n                if (lim &lt; 0) return 0LL;\n                for (int j = tot; j &gt; 0; j--) for (int k = 1; k &lt;= lim &amp;&amp; k &lt;= j; k++)\n                    f[j] = (f[j] + f[j - k] * ifac[k]) % MOD;\n            }\n            return f[tot];\n        };\n        ans = (ans + m * calc() % MOD * fac[len] % MOD * ifac[c - cnt[m]]) % MOD;\n    }\n}\n\nvoid solve() {\n    scanf(\"%s\", s + 1); n = strlen(s + 1);\n\n    ans = 0;\n    // \u8003\u8651\u957f\u5ea6\u6bd4 n \u77ed\u7684\u6570\uff0c\u53ea\u8981\u679a\u4e3e\u7b2c\u4e00\u4e2a\u6570\u7801\uff0c\u540e\u9762\u968f\u4fbf\u586b\n    for (int i = 1; i &lt; n; i++) for (A[1] = 1; A[1] &lt;= 9; A[1]++) gao(2, i);\n    // \u8003\u8651\u957f\u5ea6\u548c n \u4e00\u6837\u957f\u7684\u6570\uff0c\u679a\u4e3e\u4ece\u54ea\u4e00\u4f4d\u5f00\u59cb\u524d\u7f00\u4e0d\u540c\n    for (int i = 1; i &lt;= n; i++) for (A[i] = (i == 1 ? 1 : 0); A[i] &lt; s[i] - '0'; A[i]++) gao(i + 1, n);\n    // \u522b\u5fd8\u4e86 n \u672c\u8eab\u4e5f\u8981\u7edf\u8ba1\u4e00\u4e0b\n    gao(n + 1, n);\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    fac[0] = 1;\n    for (int i = 1; i &lt;= MAXN; i++) fac[i] = fac[i - 1] * i % MOD;\n    ifac[0] = ifac[1] = 1;\n    for (int i = 2; i &lt;= MAXN; i++) ifac[i] = (MOD - MOD / i) * ifac[MOD % i] % MOD;\n    for (int i = 2; i &lt;= MAXN; i++) ifac[i] = ifac[i] * ifac[i - 1] % MOD;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/b/","title":"B - Grid with Arrows","text":""},{"location":"2019-provincial-shaanxi/b/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738761/111 (55.0%)"},{"location":"2019-provincial-shaanxi/b/#_2","title":"\u9898\u89e3","text":"<p>\u628a\u6bcf\u4e2a\u683c\u5b50\u770b\u4f5c\u6709\u5411\u56fe\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e2a\u8282\u70b9\u81f3\u591a\u5411\u522b\u7684\u8282\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\u8fd9\u5c31\u662f\u5178\u578b\u7684\u57fa\u73af\u5916\u5411\u6811\u3002</p> <p>\u5982\u679c\u6709\u5165\u5ea6\u4e3a \\(0\\) \u7684\u8282\u70b9\uff0c\u90a3\u4e48\u5fc5\u987b\u4ece\u8be5\u8282\u70b9\u51fa\u53d1\u5e76\u68c0\u67e5\uff08\u5426\u5219\u4e0d\u53ef\u80fd\u7ecf\u8fc7\u5176\u5b83\u70b9\u8bbf\u95ee\u5165\u5ea6\u4e3a \\(0\\) \u7684\u8282\u70b9\uff09\uff1b\u5426\u5219\u6574\u5f20\u56fe\u53ef\u80fd\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u73af\uff0c\u968f\u4fbf\u6311\u4e00\u4e2a\u8282\u70b9\u51fa\u53d1\u5e76\u68c0\u67e5\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(nm)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/b/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXM ((int) 1e5)\n#define MAXPROD ((int) 1e5)\nusing namespace std;\n\nint n, m;\nchar s[MAXM + 10];\nstring MAP[MAXN + 10];\nvector&lt;int&gt; A[MAXN + 10];\n\nint deg[MAXPROD + 10];\nbool vis[MAXPROD + 10];\n\n// \u6c42\u8282\u70b9 t \u6307\u5411\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\nint nxt(int t) {\n    int i = t / m, j = t % m, ii = i, jj = j;\n    if (MAP[i][j] == 'u') ii -= A[i][j];\n    else if (MAP[i][j] == 'd') ii += A[i][j];\n    else if (MAP[i][j] == 'l') jj -= A[i][j];\n    else jj += A[i][j];\n    if (ii &lt; 0 || jj &lt; 0 || ii &gt;= n || jj &gt;= m) return -1;\n    return ii * m + jj;\n}\n\n// \u68c0\u67e5\u4ece\u8282\u70b9 t \u51fa\u53d1\u80fd\u5426\u904d\u5386\u5168\u56fe\nbool check(int t) {\n    for (; t &gt;= 0 &amp;&amp; !vis[t]; t = nxt(t)) vis[t] = true;\n    for (int i = 0; i &lt; n * m; i++) if (!vis[i]) return false;\n    return true;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i++) MAP[i].clear(), A[i].clear();\n    for (int i = 0; i &lt; n; i++) scanf(\"%s\", s), MAP[i] = string(s);\n    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; m; j++) {\n        int x; scanf(\"%d\", &amp;x);\n        A[i].push_back(x);\n    }\n\n    // \u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\n    memset(deg, 0, sizeof(int) * (n * m + 3));\n    for (int i = 0, t = 0; i &lt; n; i++) for (int j = 0; j &lt; m; j++, t++) deg[nxt(t)]++;\n\n    memset(vis, 0, sizeof(bool) * (n * m + 3));\n    // \u5bfb\u627e\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\n    for (int t = 0; t &lt; n * m; t++) if (deg[t] == 0) {\n        if (check(t)) printf(\"Yes\\n\");\n        else printf(\"No\\n\");\n        return;\n    }\n    // \u6ca1\u6709\u5165\u5ea6\u4e3a 0 \u7684\u8282\u70b9\uff0c\u968f\u4fbf\u4ece\u4e00\u4e2a\u70b9\u51fa\u53d1\n    if (check(0)) printf(\"Yes\\n\");\n    else printf(\"No\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/c/","title":"C - 0689","text":""},{"location":"2019-provincial-shaanxi/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738715/111 (13.5%)"},{"location":"2019-provincial-shaanxi/c/#_2","title":"\u9898\u89e3","text":"<p>\u5148\u5047\u8bbe\u5b57\u7b26\u4e32\u91cc\u53ea\u6709 \\(0\\) \u548c \\(8\\)\u3002</p> <p>\u5982\u679c\u6211\u4eec\u8981\u7ffb\u8f6c\u533a\u95f4 \\([l, r]\\)\uff0c\u800c \\(s_l = s_r\\)\uff0c\u90a3\u4e48\u7ffb\u8f6c \\([l, r]\\) \u7684\u7ed3\u679c\u548c\u7ffb\u8f6c \\([l + 1, r - 1]\\) \u7684\u7ed3\u679c\u662f\u4e00\u6837\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u8003\u8651\u6ee1\u8db3 \\(s_l \\ne s_r\\) \u7684\u533a\u95f4 \\([l, r]\\)\u3002</p> <p>\u8003\u8651\u4e24\u4e2a\u533a\u95f4 \\([l_1, r_1]\\) \u548c \\([l_2, r_2]\\) \u6ee1\u8db3 \\(r_1 &lt; r_2\\)\uff0c\u7ffb\u8f6c\u8fd9\u4e24\u4e2a\u533a\u95f4\u7684\u7ed3\u679c\u4e00\u5b9a\u662f\u4e0d\u540c\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u7ffb\u8f6c \\([l_1, r_1]\\)\uff0c\u5219 \\(s_{r_2}\\) \u5c06\u4fdd\u6301\u4e0d\u53d8\uff1b\u800c\u7ffb\u8f6c \\([l_2, r_2]\\) \u4f1a\u8ba9 \\(s_{r_2}\\) \u53d1\u751f\u53d8\u5316\u3002\u540c\u7406\uff0c\u5982\u679c \\(l_1 &lt; l_2\\)\uff0c\u7ffb\u8f6c\u4e24\u4e2a\u533a\u95f4\u7684\u7ed3\u679c\u4e5f\u4e00\u5b9a\u4e0d\u540c\u3002</p> <p>\u56e0\u6b64\u7b54\u6848\u5c31\u662f\u6ee1\u8db3 \\(s_l \\ne s_r\\) \u7684\u533a\u95f4 \\([l, r]\\) \u7684\u6570\u91cf\u3002</p> <p>\u628a \\(6\\) \u548c \\(9\\) \u52a0\u56de\u6765\uff0c\u89e3\u6cd5\u4ecd\u7136\u662f\u4e00\u6837\u7684\u3002\u7b54\u6848\u5c31\u662f\u5de6\u53f3\u7aef\u70b9\u4e0d\u662f \\(00\\)\u3001\\(88\\)\u3001\\(69\\)\u3001\\(96\\) \u7684\u533a\u95f4\u6570\u91cf\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\u95ee\u9898\uff1a\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u533a\u95f4\uff0c\u7ffb\u8f6c\u7684\u7ed3\u679c\u4e00\u5b9a\u548c\u539f\u5b57\u7b26\u4e32\u4e0d\u540c\u3002\u4f46\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u533a\u95f4\uff0c\u7ffb\u8f6c\u7684\u7ed3\u679c\u548c\u539f\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u6700\u7ec8\u7b54\u6848\u8fd8\u8981\u518d\u52a0\u4e0a \\(1\\)\u3002\u8fd9\u91cc\u6211\u4eec\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\u3002</p> <ul> <li>\u5982\u679c\u539f\u5b57\u7b26\u4e32\u5b58\u5728 \\(0\\) \u548c \\(8\\)\uff0c\u90a3\u4e48\u53ea\u8981\u7ffb\u8f6c\u8fd9\u4e2a\u957f\u5ea6\u4e3a \\(1\\) \u7684\u533a\u95f4\uff0c\u4ecd\u7136\u8fd8\u662f\u539f\u5b57\u7b26\u4e32\u3002</li> <li>\u5426\u5219\uff0c\u5982\u679c\u539f\u5b57\u7b26\u4e32\u91cc\u90fd\u662f \\(6\\)\uff0c\u90a3\u4e48\u7ffb\u8f6c\u4efb\u4f55\u4e00\u4e2a\u533a\u95f4\u90fd\u4f1a\u628a \\(6\\) \u53d8\u6210 \\(9\\)\uff0c\u4e0d\u53ef\u80fd\u5f97\u5230\u539f\u5b57\u7b26\u4e32\u3002\u539f\u5b57\u7b26\u4e32\u90fd\u662f \\(9\\) \u7684\u60c5\u51b5\u540c\u7406\u3002</li> <li>\u5269\u4e0b\u7684\u60c5\u51b5\u5c31\u662f\u539f\u5b57\u7b26\u4e32\u7531 \\(6\\) \u548c \\(9\\) \u7ec4\u6210\u3002\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u5b58\u5728\u5b50\u4e32 \\(69\\) \u6216\u8005 \\(96\\)\uff0c\u7ffb\u8f6c\u8fd9\u4e2a\u957f\u5ea6\u4e3a \\(2\\) \u7684\u533a\u95f4\uff0c\u4ecd\u7136\u8fd8\u662f\u539f\u5b57\u7b26\u4e32\u3002</li> </ul> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/c/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e6)\nusing namespace std;\n\nchar s[MAXN + 10];\nlong long ans;\n\nvoid solve() {\n    scanf(\"%s\", s + 1);\n\n    ans = 0;\n    int cnt[10] = {0};\n    for (int i = 1; s[i]; i++) {\n        int x = s[i] - '0';\n        cnt[x]++;\n        // R0L0\n        if (x == 0) ans += i - cnt[0];\n        // R6L9\n        else if (x == 6) ans += i - cnt[9];\n        // R8L8\n        else if (x == 8) ans += i - cnt[8];\n        // R9L6\n        else ans += i - cnt[6];\n    }\n\n    // \u68c0\u67e5\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u533a\u95f4\uff0c\u7ffb\u8f6c\u4e4b\u540e\u4ecd\u7136\u662f\u539f\u5b57\u7b26\u4e32\n    int flag = 0;\n    for (int i = 1; s[i]; i++) {\n        if (s[i] == '6') flag |= 1;\n        else if (s[i] == '9') flag |= 2;\n        else flag = 3;\n    }\n    printf(\"%lld\\n\", ans + (flag == 3 ? 1 : 0));\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/d/","title":"D - Pick Up","text":""},{"location":"2019-provincial-shaanxi/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73874/111 (3.6%)"},{"location":"2019-provincial-shaanxi/d/#_2","title":"\u9898\u89e3","text":"<p>\u9996\u5148\u8ba1\u7b97 BaoBao \u76f4\u63a5\u53bb\u5546\u573a\u7684\u65f6\u95f4\u3002\u63a5\u4e0b\u6765\u8ba1\u7b97 DreamGrid \u63a5 BaoBao \u53bb\u5546\u573a\u7684\u6700\u77ed\u65f6\u95f4\u3002</p> <p>\u8bb0 \\(R\\) \u8868\u793a\u70b9 \\(A\\) \u548c\u70b9 \\(B\\) \u4e3a\u4e24\u89d2\u6784\u6210\u7684\u77e9\u5f62\uff0c\u8bb0 \\(D\\) \u8868\u793a\u77e9\u5f62 \\(R\\) \u5185\u90e8\u548c\u8fb9\u754c\u4e0a\u5230 \\(C\\) \u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u3002\u53ef\u4ee5\u53d1\u73b0\uff0cBaoBao \u548c DreamGrid \u5982\u679c\u5148\u5f80 \\(D\\) \u70b9\u8d70\uff0c\u5230\u8fbe \\(D\\) \u4e4b\u540e\u518d\u5f80 \\(C\\) \u70b9\u8d70\uff0c\u8d70\u7684\u8ddd\u79bb\u548c\u76f4\u63a5\u53bb \\(C\\) \u70b9\u662f\u4e00\u6837\u7684\u3002</p> <p>\u56e0\u6b64\u8ba8\u8bba BaoBao \u548c DreamGrid \u8c01\u5148\u5230\u8fbe \\(D\\) \u70b9\u3002</p> <ul> <li>\u5982\u679c BaoBao \u5148\u5230\u8fbe \\(D\\) \u70b9\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u4ed6\u76f4\u63a5\u5f80 \\(C\\) \u70b9\u8d70\uff0c\u7b49 DreamGrid \u8ffd\u4e0a\u4ed6\u3002\u56e0\u4e3a DreamGrid \u5b8c\u5168\u6ca1\u6709\u7ed5\u8def\uff0c\u6240\u4ee5\u5230\u8fbe\u5546\u573a\u7684\u65f6\u95f4\u5c31\u662f DreamGrid \u76f4\u63a5\u53bb\u5546\u573a\u7684\u65f6\u95f4\u3002</li> <li>\u5982\u679c DreamGrid \u5148\u5230\u8fbe \\(D\\) \u70b9\uff0c\u7531\u4e8e DreamGrid \u901f\u5ea6\u6bd4 BaoBao \u5feb\uff0c\u6240\u4ee5\u8d8a\u65e9\u63a5\u5230 BaoBao \u8d8a\u597d\u3002\u53ef\u4ee5\u53d1\u73b0\uff0cDreamGrid \u5148\u5230 \\(D\\) \u518d\u5230 \\(A\\)\uff0c\u548c\u4ed6\u76f4\u63a5\u53bb \\(A\\) \u8d70\u7684\u8ddd\u79bb\u662f\u4e00\u6837\u7684\u3002\u56e0\u6b64 DreamGrid \u5230\u8fbe \\(D\\) \u70b9\u4e4b\u540e\u5e94\u8be5\u7ee7\u7eed\u5f80 \\(A\\) \u70b9\u8d70\uff0c\u76f4\u5230\u63a5\u4e0a BaoBao\uff0c\u8fd9\u6837\u5c31\u80fd\u6700\u5feb\u63a5\u5230 BaoBao\u3002\u6700\u540e\u4e24\u4e2a\u4eba\u518d\u4e00\u8d77\u53bb\u5546\u573a\u3002</li> </ul> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// \u4ece (xa, ya) \u8d70\u5230 (xb, yb)\uff0c\u901f\u5ea6\u4e3a v\uff0c\u9700\u8981\u591a\u5c11\u65f6\u95f4\ndouble calc(int xa, int ya, int xb, int yb, int v) {\n    return (abs(xb - xa) + abs(yb - ya)) * 1.0 / v;\n}\n\nvoid solve() {\n    int a, b, xa, ya, xb, yb, xc, yc;\n    scanf(\"%d%d%d%d%d%d%d%d\", &amp;a, &amp;b, &amp;xa, &amp;ya, &amp;xb, &amp;yb, &amp;xc, &amp;yc);\n    // BaoBao \u76f4\u63a5\u53bb\u5546\u573a\u7684\u65f6\u95f4\n    double ans = calc(xa, ya, xc, yc, a);\n\n    int l = min(xa, xb), r = max(xa, xb), d = min(ya, yb), u = max(ya, yb);\n    // D \u70b9\u662f\u77e9\u5f62\u91cc\u8ddd\u79bb C \u70b9\u6700\u8fd1\u7684\u70b9\n    int xd = max(l, min(r, xc)), yd = max(d, min(u, yc));\n    // \u8ba1\u7b97\u4e24\u4eba\u5230\u8fbe D \u70b9\u7684\u65f6\u95f4\n    double ta = calc(xa, ya, xd, yd, a), tb = calc(xb, yb, xd, yd, b);\n    // BaoBao \u5148\u5230\n    if (ta &lt; tb) ans = min(ans, calc(xb, yb, xc, yc, b));\n    else {\n        // DreamGrid \u5148\u5230\uff0c\u8ba1\u7b97 t \u8868\u793a DreamGrid \u548c BaoBao \u76f8\u9047\u7684\u65f6\u95f4\n        double t = calc(xa, ya, xb, yb, a + b);\n        // dis \u8868\u793a\u76f8\u9047\u540e\u53bb\u5546\u573a\u7684\u5269\u4f59\u8ddd\u79bb\n        double dis = abs(xc - xa) + abs(yc - ya) - a * t;\n        ans = min(ans, t + dis / b);\n    }\n    printf(\"%.12f\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/e/","title":"E - Turn It Off","text":""},{"location":"2019-provincial-shaanxi/e/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738780/111 (72.1%)"},{"location":"2019-provincial-shaanxi/e/#_2","title":"\u9898\u89e3","text":"<p>\u4e8c\u5206 \\(L\\)\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4ee4 \\(i\\) \u4e3a\u6700\u5de6\u8fb9\u4eae\u7740\u7684\u706f\u7684\u4e0b\u6807\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/e/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 2e5)\nusing namespace std;\n\nint n, K;\nchar s[MAXN + 10];\n\nbool check(int L) {\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; ) {\n        // \u4f4d\u7f6e i \u7684\u706f\u662f\u4eae\u7684\uff0c\u8fdb\u884c\u5173\u706f\u64cd\u4f5c\n        if (s[i] == '1') cnt++, i += L;\n        // \u4f4d\u7f6e i \u7684\u706f\u662f\u706d\u7684\uff0c\u4e0d\u64cd\u4f5c\n        else i++;\n    }\n    return cnt &lt;= K;\n}\n\nvoid solve() {\n    scanf(\"%d%d%s\", &amp;n, &amp;K, s + 1);\n    // \u4e8c\u5206\u7b54\u6848\n    int head = 1, tail = n;\n    while (head &lt; tail) {\n        int mid = (head + tail) &gt;&gt; 1;\n        if (check(mid)) tail = mid;\n        else head = mid + 1;\n    }\n    printf(\"%d\\n\", head);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/f/","title":"F - K-hour Clock","text":""},{"location":"2019-provincial-shaanxi/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738798/111 (88.3%)"},{"location":"2019-provincial-shaanxi/f/#_2","title":"\u9898\u89e3","text":"<p>\u5206\u7c7b\u8ba8\u8bba\u3002</p> <ul> <li>\u5982\u679c \\(x + y = z\\)\uff0c\u90a3\u4efb\u4f55 \\(k &gt; z\\) \u90fd\u53ef\u4ee5\u3002</li> <li>\u5982\u679c \\(x \\le z\\) \u4e14 \\(x + y &gt; z\\)\uff0c\u8bf4\u660e\u81f3\u5c11\u8fc7\u4e86\u4e00\u5929\u3002\u56e0\u4e3a\u53ea\u9700\u8981\u6c42\u51fa\u4e00\u4e2a\u53ef\u884c\u89e3\uff0c\u800c\u5fc5\u987b\u6709 \\(k &gt; x\\) \u4ee5\u53ca \\(k &gt; z\\)\uff0c\u90a3\u4e48 \\(k\\) \u8d8a\u5927\u8d8a\u597d\u3002\u6240\u4ee5\u6211\u4eec\u5c31\u5f53\u4f5c\u53ea\u8fc7\u4e86\u4e00\u5929\uff0c\u76f4\u63a5\u68c0\u67e5 \\(k = y - (z - x)\\)\u3002</li> <li>\u5982\u679c \\(x &gt; z\\) \u8bf4\u660e\u8de8\u8fc7\u4e86 \\(0\\) \u70b9\uff0c\u90a3\u4e48\u5fc5\u987b\u6709 \\(y &gt; z\\)\u3002\u540c\u4e0a\u6240\u8ff0\uff0c\\(k\\) \u8d8a\u5927\u8d8a\u597d\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u5f53\u4f5c\u8fc7\u4e86\u8fd8\u4e0d\u5230\u4e00\u5929\uff0c\u76f4\u63a5\u68c0\u67e5 \\(k = x + (y - z)\\)\u3002</li> </ul>"},{"location":"2019-provincial-shaanxi/f/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve() {\n    int x, y, z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z);\n    if (x + y == z) {\n        printf(\"%d\\n\", z + 1);\n    } else if (x &lt;= z &amp;&amp; x + y &gt; z) {\n        int k = y - (z - x);\n        if (k &gt; z) printf(\"%d\\n\", k);\n        else printf(\"-1\\n\");\n    } else if (x &gt; z &amp;&amp; y &gt; z) {\n        printf(\"%d\\n\", x + (y - z));\n    } else {\n        printf(\"-1\\n\");\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/g/","title":"G - Paper-cutting","text":""},{"location":"2019-provincial-shaanxi/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73871/111 (0.9%)"},{"location":"2019-provincial-shaanxi/g/#_2","title":"\u9898\u89e3","text":"<p>\u5bb9\u6613\u6ce8\u610f\u5230\uff0c\u5de6\u53f3\u5bf9\u6298\u548c\u4e0a\u4e0b\u5bf9\u6298\u4e92\u4e0d\u5f71\u54cd\uff0c\u56e0\u6b64\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u8003\u8651\u5de6\u53f3\u5bf9\u6298\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u8bb2\u89e3\uff0c\u6211\u4eec\u5148\u8003\u8651 \\(n = 1\\) \u7684\u60c5\u51b5\uff0c\u5e76\u5047\u8bbe\u53ea\u5141\u8bb8\u4ece\u5de6\u5f80\u53f3\u6298\u3002\u8bbe\u552f\u4e00\u4e00\u884c\u7684\u5143\u7d20\u662f \\(s_1s_2\\cdots s_m\\)\uff0c\u4ee4 \\(s[l:r]\\) \u8868\u793a\u5b50\u4e32 \\(s_ls_{l + 1}\\cdots s_r\\)\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u628a\u524d \\(j\\) \u5217\u6298\u5230\u53f3\u8fb9\uff0c\u9700\u8981\u6ee1\u8db3 \\(s[1:2j]\\) \u662f\u56de\u6587\u4e32\u3002\u5bf9\u6298\u4e4b\u540e\uff0c\u5c31\u76f8\u5f53\u4e8e\u628a\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u524d \\(j\\) \u4e2a\u5b57\u7b26\u5220\u6389\u3002</p> <p>\u6b64\u65f6\u8bfb\u8005\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6734\u7d20\u7684\u8d2a\u5fc3\u7b56\u7565\uff1a\u4ece\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5f00\u59cb\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\u56de\u6587\u4e32\u7684\u4e2d\u5fc3\uff0c\u80fd\u6298\u5c31\u6298\u3002\u8bbe \\(s[1:2p]\\) \u662f\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a\u5f00\u5934\u7684\u6700\u77ed\u7684\u56de\u6587\u4e32\uff0c\\(s[1:2q]\\) \u662f\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a\u5f00\u5934\u7684\u53e6\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u8bc1\u660e\uff0c\u6298 \\(s[1:2q]\\) \u80fd\u5230\u8fbe\u7684\u4e2d\u95f4\u72b6\u6001\uff0c\u6298 \\(s[1:2p]\\) \u4e00\u5b9a\u80fd\u5230\u8fbe\u3002</p> <p>\u8ba8\u8bba \\(p\\) \u548c \\(q\\) \u7684\u5173\u7cfb\uff1a</p> <ul> <li> <p>\u82e5 \\(p \\le 2q\\)\uff0c\u5219 \\(s[1:2p]\\) \u548c \\(s[2q-2p+1:2q]\\) \u662f\u4e24\u4e2a\u76f8\u540c\u7684\u56de\u6587\u4e32\uff08\u4e0b\u56fe\u7ea2\u8272\u90e8\u5206\uff09\uff0c\u800c \\(s[2p+1:2q-2p]\\) \u4e5f\u662f\u56de\u6587\u4e32\uff08\u4e0b\u56fe\u84dd\u8272\u90e8\u5206\uff09\uff0c\u56e0\u6b64 \\(s[p+1:2q-p]\\) \u4e5f\u662f\u56de\u6587\u4e32\uff08\u4e0b\u56fe\u7eff\u8272\u90e8\u5206\uff09\u3002\u56e0\u6b64\u5982\u679c\u6211\u4eec\u5148\u6298 \\(s[1:2p]\\)\uff08\u5373\u5220\u6389 \\(s[1:p]\\)\uff09\uff0c\u63a5\u4e0b\u6765\u53ef\u4ee5\u518d\u6298 \\(s[p+1:2q-p]\\)\uff08\u5373\u5220\u6389 \\(s[p+1:q]\\)\uff09\u3002\u8fd9\u548c\u76f4\u63a5\u6298 \\(s[1:2q]\\)\uff08\u5373\u5220\u6389 \\(s[1:q]\\)\uff09\u662f\u4e00\u6837\u7684\u3002</p> <p></p> </li> <li> <p>\u82e5 \\(p &gt; 2q\\)\uff0c\u5219\u4e0b\u56fe\u84dd\u8272\u90e8\u5206\u90fd\u662f\u76f8\u540c\u7684\u56de\u6587\u4e32\u3002\u8bf4\u660e \\(s[1:2p]\\) \u4e0d\u662f\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a\u5f00\u5934\u7684\u6700\u77ed\u56de\u6587\u4e32\uff08\u84dd\u8272\u56de\u6587\u4e32\u624d\u662f\uff09\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002</p> <p></p> </li> </ul> <p>\u56e0\u6b64\uff0c\u5176\u5b83\u6240\u6709\u6298\u7eb8\u7b56\u7565\u80fd\u5230\u8fbe\u7684\u4e2d\u95f4\u72b6\u6001\uff0c\u4e00\u5b9a\u80fd\u88ab\u201c\u80fd\u6298\u5c31\u6298\u201d\u7684\u8d2a\u5fc3\u7b56\u7565\u5230\u8fbe\u3002</p> <p>\u90a3\u4ec0\u4e48\u65f6\u5019\u505c\u6b62\u6298\u7eb8\u5462\uff1f\u662f\u4e0d\u662f\u76f4\u5230\u4e0d\u80fd\u518d\u6298\u624d\u505c\u6b62\u662f\u6700\u4f18\u7684\uff1f\u6211\u4eec\u7684\u76ee\u7684\u662f\u6700\u5c0f\u5316 \\(0\\) \u7684\u8fde\u901a\u5757\u7684\u6570\u91cf\uff0c\u56e0\u6b64\u6211\u4eec\u89c2\u5bdf\u4e00\u4e0b\u5bf9\u6298\u524d\u540e\u8fde\u901a\u5757\u6570\u91cf\u7684\u53d8\u5316\u3002</p> <ul> <li>\u8003\u8651\u4e0d\u8de8\u8fc7\u5bf9\u79f0\u4e2d\u5fc3\u7684\u8fde\u901a\u5757 \\(s[l:r]\\)\uff08\\(1 \\le l \\le r &lt; p\\)\uff09\uff0c\u5219\u5b83\u6709\u4e00\u4e2a\u5bf9\u79f0\u7684\u8fde\u901a\u5757 \\(s[2p - r:2p - l]\\)\u3002\u5bf9\u6298\u4e4b\u540e\uff0c\u4e24\u4e2a\u8fde\u901a\u5757\u53ea\u5269\u4e0b\u4e00\u4e2a\uff0c\u8fde\u901a\u5757\u7684\u6570\u91cf\u51cf\u5c11\u3002</li> <li>\u8003\u8651\u8de8\u8fc7\u5bf9\u79f0\u4e2d\u5fc3\u7684\u8fde\u901a\u5757 \\(s[l:2p-l]\\)\uff08\\(1 \\le l \\le p\\)\uff09\u3002\u5bf9\u6298\u4e4b\u540e\u5b83\u8fd8\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u8fde\u901a\u5757\u6570\u91cf\u4e0d\u53d8\u3002</li> </ul> <p>\u56e0\u6b64\u6298\u5f97\u8d8a\u591a\uff0c\u8fde\u901a\u5757\u6570\u91cf\u8d8a\u5c11\u3002\u800c\u8d2a\u5fc3\u7b56\u7565\u56e0\u4e3a\u7ecf\u8fc7\u4e86\u5176\u5b83\u6240\u6709\u6298\u7eb8\u7b56\u7565\u7684\u4e2d\u95f4\u72b6\u6001\uff0c\u56e0\u6b64\u5b83\u7684\u6700\u7ec8\u72b6\u6001\uff08\u6298\u5230\u4e0d\u80fd\u518d\u6298\uff09\u5c31\u662f\u6298\u5f97\u6700\u591a\u7684\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u6700\u4f18\u72b6\u6001\u3002</p> <p>\u63a5\u4e0b\u6765\u5f00\u59cb\u8003\u8651\u4ece\u53f3\u5f80\u5de6\u6298\u3002\u6b64\u65f6\u8bfb\u8005\u53ef\u80fd\u4f1a\u62c5\u5fc3\uff1a\u4e24\u79cd\u6298\u6cd5\u4f1a\u4e0d\u4f1a\u51b2\u7a81\uff1f\u4f1a\u4e0d\u4f1a\u4ece\u5de6\u5f80\u53f3\u6298\u4e86\u4e00\u4e0b\uff0c\u672c\u6765\u80fd\u4ece\u53f3\u5f80\u5de6\u6298\u7684\uff0c\u73b0\u5728\u4e0d\u884c\u4e86\uff1f\u63a5\u4e0b\u6765\u5c06\u8bc1\u660e\u53ea\u8981\u4e24\u79cd\u6298\u6cd5\u90fd\u4f7f\u7528\u201c\u80fd\u6298\u5c31\u6298\u201d\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u5c31\u4e0d\u4f1a\u51b2\u7a81\uff0c\u56e0\u6b64\u53ef\u4ee5\u5206\u522b\u8003\u8651\u3002</p> <p>\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5982\u679c\u4e24\u79cd\u6298\u6cd5\uff08\u4e0b\u56fe\u7684\u7ea2\u8272\u56de\u6587\u4e32\u548c\u84dd\u8272\u56de\u6587\u4e32\uff09\u51b2\u7a81\u4e86\uff0c\u8bf4\u660e\u5176\u4e2d\u4e00\u4e2a\u56de\u6587\u4e32\u7684\u5bf9\u79f0\u8f74\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u56de\u6587\u4e32\u5185\u90e8\u3002\u6b64\u65f6\u4e0b\u56fe\u9ed1\u8272\u56de\u6587\u4e32\u662f\u4ee5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e3a\u8d77\u70b9\u7684\u66f4\u77ed\u7684\u56de\u6587\u4e32\uff0c\u8bf4\u660e\u9009\u62e9\u7ea2\u8272\u56de\u6587\u4e32\u4e0d\u7b26\u5408\u201c\u80fd\u6298\u5c31\u6298\u201d\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002</p> <p></p> <p>\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u5206\u522b\u8003\u8651\u56db\u4e2a\u65b9\u5411\uff0c\u6bcf\u4e2a\u65b9\u5411\u9075\u5faa\u201c\u80fd\u6298\u5c31\u6298\u201d\u7684\u8d2a\u5fc3\u7b56\u7565\uff0c\u5c31\u80fd\u6700\u5c0f\u5316 \\(0\\) \u7684\u8fde\u901a\u5757\u6570\u91cf\u3002\u56de\u6587\u4e32\u53ef\u4ee5\u7528 manacher \u7b97\u6cd5\u9884\u5904\u7406\uff0c\u590d\u6742\u5ea6 \\(\\mathcal{O}(nm)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/g/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXPROD ((int) 1e6)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, m, ans;\nstring MAP[MAXPROD];\nchar s[MAXPROD + 10];\n\nstring tmp[MAXPROD];\nint f[MAXPROD];\nvector&lt;bool&gt; vis[MAXPROD];\n\n// \u4ece\u4e0b\u5f80\u4e0a\u6298\uff0c\u80fd\u6298\u5c31\u6298\uff0c\u8fd4\u56de\u6700\u540e\u7684\u4e0b\u8fb9\u754c\nint gao() {\n    // manacher\n    for (int i = 0, l = 0, r = -1; i &lt; n; i++) {\n        int k = (i &gt; r) ? 0 : min(f[l + r - i + 1], r - i + 1);\n        while (0 &lt;= i - k - 1 &amp;&amp; i + k &lt; n &amp;&amp; MAP[i - k - 1] == MAP[i + k]) k++;\n        f[i] = k--;\n        if (i + k &gt; r) l = i - k - 1, r = i + k;\n    }\n\n    // \u679a\u4e3e\u56de\u6587\u4e32\u4e2d\u5fc3 now\n    int ret = n - 1, now = n - 1;\n    while (now - (ret - now + 1) &gt;= 0) {\n        // \u53d1\u73b0\u5305\u542b\u6700\u540e\u4e00\u884c\u7684\u6700\u77ed\u56de\u6587\u4e32\n        if (now + f[now] &gt; ret) ret = now - 1;\n        now--;\n    }\n    return ret + 1;\n}\n\n// bfs \u6c42\u8fde\u901a\u5757\nshort dir[4][2] = {0, 1, 1, 0, -1, 0, 0, -1};\nvoid bfs(int SI, int SJ) {\n    queue&lt;pii&gt; q;\n    q.push(pii(SI, SJ)); vis[SI][SJ] = true;\n    while (!q.empty()) {\n        auto [i, j] = q.front(); q.pop();\n        for (int k = 0; k &lt; 4; k++) {\n            int ii = i + dir[k][0], jj = j + dir[k][1];\n            if (ii &lt; 0 || jj &lt; 0 || ii &gt;= n || jj &gt;= m || MAP[ii][jj] == '1' || vis[ii][jj]) continue;\n            q.push(pii(ii, jj)); vis[ii][jj] = true;\n        }\n    }\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i++) scanf(\"%s\", s), MAP[i] = string(s);\n\n    // \u6bcf\u6b21\u90fd\u4ece\u4e0b\u5f80\u4e0a\u6298\uff0c\u6298\u5b8c\u4ee5\u540e\u65cb\u8f6c 90 \u5ea6\uff0c\u91cd\u590d 4 \u6b21\u5c31\u80fd\u6298 4 \u4e2a\u65b9\u5411\n    for (int k = 1; k &lt;= 4; k++) {\n        n = gao();\n        for (int j = 0; j &lt; m; j++) tmp[j].resize(n);\n        for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; m; j++) tmp[m - 1 - j][i] = MAP[i][j];\n        swap(n, m);\n        for (int i = 0; i &lt; n; i++) MAP[i] = tmp[i];\n    }\n\n    // bfs \u7edf\u8ba1 0 \u7684\u8fde\u901a\u5757\u6570\u91cf\n    ans = 0;\n    for (int i = 0; i &lt; n; i++) vis[i] = vector&lt;bool&gt;(m);\n    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; m; j++) if (MAP[i][j] == '0' &amp;&amp; !vis[i][j]) bfs(i, j), ans++;\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/h/","title":"H - To the Park","text":""},{"location":"2019-provincial-shaanxi/h/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73875/111 (4.5%)"},{"location":"2019-provincial-shaanxi/h/#_2","title":"\u9898\u89e3","text":"<p>\u9996\u5148\u6c42\u4e00\u4e0b\u7b54\u6848\u7684\u4e0a\u754c\u3002\u4e0d\u53ef\u80fd\u548c\u5176\u5b83\u6570\u6210\u5bf9\u7684\u6709\uff1a\\(1\\)\uff0c\u4ee5\u53ca\u6ee1\u8db3 \\(2p &gt; n\\) \u7684\u8d28\u6570 \\(p\\)\u3002\u9664\u6b64\u4e4b\u5916\u7684\u6570\u4e24\u4e24\u6210\u5bf9\u5c31\u662f\u7b54\u6848\u7684\u4e0a\u754c\u3002</p> <p>\u63a5\u4e0b\u6765\u6784\u9020\u4e00\u4e2a\u80fd\u89e6\u78b0\u5230\u4e0a\u754c\u7684\u7b54\u6848\u3002</p> <ol> <li>\u4ece\u5927\u5230\u5c0f\u8003\u8651\u6240\u6709\u5927\u4e8e \\(2\\) \u4e14\u6ee1\u8db3 \\(2p \\le n\\) \u7684\u8d28\u6570 \\(p\\)\uff0c\u6570\u4e00\u4e0b\u8fd8\u672a\u88ab\u52a0\u5165\u7b54\u6848\u7684\u500d\u6570\u6709\u51e0\u4e2a\u3002\u5982\u679c\u6709\u5076\u6570\u4e2a\u90a3\u4e48\u4e24\u4e24\u6210\u5bf9\u52a0\u5165\u7b54\u6848\u3002\u5426\u5219\u628a \\(2p\\) \u7559\u4e0b\uff0c\u5176\u5b83\u6570\u4e24\u4e24\u6210\u5bf9\u52a0\u5165\u7b54\u6848\u3002\u8fd9\u91cc \\(2p\\) \u80af\u5b9a\u6ca1\u6709\u7528\u8fc7\uff0c\u56e0\u4e3a\u5b83\u7684\u8d28\u56e0\u6570\u53ea\u6709 \\(2\\) \u548c \\(p\\)\u3002</li> <li>\u6700\u540e\u8003\u8651\u6240\u6709\u6ca1\u6709\u52a0\u5165\u7b54\u6848\u7684\u5076\u6570\uff0c\u8ba9\u5b83\u4eec\u4e24\u4e24\u6210\u5bf9\u52a0\u5165\u7b54\u6848\u3002</li> </ol> <p>\u4e0a\u8ff0\u6784\u9020\u65b9\u5f0f\u7528\u5230\u4e86\u6240\u6709\u53ef\u80fd\u52a0\u5165\u7b54\u6848\u7684\u6570\uff0c\u56e0\u6b64\u89e6\u78b0\u5230\u4e86\u7b54\u6848\u7684\u4e0a\u754c\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/h/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\nvector&lt;pii&gt; ans;\n\nbool flag[MAXN + 10], vis[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    if (n &lt;= 3) { printf(\"0\\n\"); return; }\n\n    ans.clear();\n    memset(vis, 0, sizeof(bool) * (n + 3));\n    for (int i = n; i &gt; 2; i--) if (!flag[i] &amp;&amp; i * 2 &lt;= n) {\n        assert(!vis[i * 2]);\n        vector&lt;int&gt; vec = {i};\n        for (int j = i * 3; j &lt;= n; j += i) if (!vis[j]) vec.push_back(j);\n        if (vec.size() % 2 == 1) vec.push_back(i * 2);\n        for (int j = 1; j &lt; vec.size(); j += 2) {\n            vis[vec[j - 1]] = vis[vec[j]] = true;\n            ans.push_back(pii(vec[j - 1], vec[j]));\n        }\n    }\n\n    vector&lt;int&gt; vec;\n    for (int i = 2; i &lt;= n; i += 2) if (!vis[i]) vec.push_back(i);\n    for (int i = 1; i &lt; vec.size(); i += 2) ans.push_back(pii(vec[i - 1], vec[i]));\n\n    printf(\"%d\", ans.size());\n    for (pii p : ans) printf(\" %d %d\", p.first, p.second);\n    printf(\"\\n\");\n}\n\nint main() {\n    for (int i = 2; i * i &lt;= MAXN; i++) if (!flag[i])\n        for (int j = i &lt;&lt; 1; j &lt;= MAXN; j += i) flag[j] = true;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/i/","title":"I - Unrooted Trie","text":""},{"location":"2019-provincial-shaanxi/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738713/111 (11.7%)"},{"location":"2019-provincial-shaanxi/i/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c\u4e00\u4e2a\u8282\u70b9 \\(u\\) \u76f8\u90bb\u7684\u8fb9\u6709\u4e09\u4e2a\u4e00\u6837\u7684\u5b57\u6bcd\uff0c\u6216\u8005\u4e24\u5bf9\u4e00\u6837\u7684\u5b57\u6bcd\u5c31\u65e0\u89e3\u3002\u5982\u679c\u76f8\u90bb\u7684\u8fb9\u6ca1\u6709\u4e00\u6837\u7684\u5b57\u6bcd\uff0c\u90a3\u4e48\u4e0d\u5f71\u54cd\u6839\u7684\u9009\u62e9\u3002\u5269\u4e0b\u7684\u60c5\u51b5\u5c31\u662f\u6070\u6709\u4e00\u5bf9\u76f8\u540c\u7684\u5b57\u6bcd\u3002</p> <p>\u8bbe\u6709\u76f8\u540c\u5b57\u6bcd\u7684\u8fb9\u662f \\(u - x\\) \u548c \\(u - y\\)\uff0c\u90a3\u4e48 trie \u7684\u6839\u5fc5\u987b\u5728\u8fd9\u4e24\u6761\u8fb9\u7684\u540c\u4e00\u4fa7\uff0c\u4e0d\u80fd\u5728\u4e24\u6761\u8fb9\u7684\u4e2d\u95f4\u3002\u5148\u968f\u4fbf\u9009\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u6839\u8fdb\u884c DFS\uff08\u53ea\u662f DFS \u7684\u6839\uff0c\u4e0d\u4e00\u5b9a\u662f trie \u7684\u6839\uff09\u3002\u8003\u8651 \\(u\\)\u3001\\(x\\)\u3001\\(y\\) \u4e09\u4e2a\u70b9\u5728 DFS \u5e8f\u4e2d\u7684\u4f4d\u7f6e\u3002</p> <ul> <li>\u5982\u679c \\(u\\) \u5728 \\(x\\) \u548c \\(y\\) \u7684\u524d\u9762\uff0c\u8bf4\u660e\u5728 DFS \u8fc7\u7a0b\u4e2d\uff0c\\(u\\) \u662f \\(x\\) \u548c \\(y\\) \u7684\u7236\u8282\u70b9\u3002\u90a3\u4e48 trie \u7684\u6839\u53ea\u80fd\u5728 \\(x\\) \u7684\u5b50\u6811\u6216\u8005 \\(y\\) \u7684\u5b50\u6811\u91cc\u3002</li> <li>\u5426\u5219 \\(u\\) \u80af\u5b9a\u5728 \\(x\\) \u548c \\(y\\) \u4e4b\u95f4\uff0c\u4e0d\u59a8\u8bbe \\(x\\) \u5728 \\(y\\) \u7684\u524d\u9762\uff0c\u90a3\u4e48 DFS \u8fc7\u7a0b\u4e2d\uff0c\\(x\\) \u662f \\(u\\) \u7684\u7236\u8282\u70b9\u3002\u90a3\u4e48 trie \u7684\u6839\u53ea\u80fd\u5728 \\(y\\) \u7684\u5b50\u6811\u91cc\uff0c\u6216\u8005\u5728\u9664\u4e86 \\(u\\) \u7684\u5b50\u6811\u4ee5\u5916\u7684\u5176\u4ed6\u5730\u65b9\u3002</li> </ul> <p>\u56e0\u4e3a\u5b50\u6811\u5bf9\u5e94\u7684\u5c31\u662f DFS \u5e8f\u91cc\u7684\u4e00\u6bb5\u533a\u95f4\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u5dee\u5206\u6570\u7ec4\uff0c\u628a\u4e0d\u53ef\u80fd\u6210\u4e3a trie \u7684\u6839\u7684\u533a\u95f4\u6807\u51fa\u6765\u3002\u6700\u540e\u7b97\u4e00\u4e0b\u524d\u7f00\u548c\uff0c\u6ca1\u6709\u6807\u8bb0\u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u6210\u4e3a trie \u7684\u6839\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n + m)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/i/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, ans;\n\nvector&lt;int&gt; e[MAXN + 10];\nvector&lt;char&gt; v[MAXN + 10];\n\nint clk, bgn[MAXN + 10], fin[MAXN + 10];\nint f[MAXN + 10];\n\nvoid dfs(int sn, int fa) {\n    bgn[sn] = ++clk;\n    for (int fn : e[sn]) if (fn != fa) dfs(fn, sn);\n    fin[sn] = clk;\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) e[i].clear(), v[i].clear();\n    for (int i = 1; i &lt; n; i++) {\n        int x, y;\n        char z[3];\n        scanf(\"%d%d%s\", &amp;x, &amp;y, z);\n        e[x].push_back(y); v[x].push_back(z[0]);\n        e[y].push_back(x); v[y].push_back(z[0]);\n    }\n\n    clk = 0; dfs(1, 0);\n    memset(f, 0, sizeof(int) * (n + 3));\n    for (int sn = 1; sn &lt;= n; sn++) {\n        vector&lt;int&gt; vec[26];\n        for (int i = 0; i &lt; e[sn].size(); i++) vec[v[sn][i] - 'a'].push_back(e[sn][i]);\n        int t = -1;\n        for (int i = 0; i &lt; 26; i++) {\n            // \u76f8\u540c\u7684\u5b57\u6bcd\u6709\u81f3\u5c11\u4e09\u4e2a\n            if (vec[i].size() &gt; 2) { printf(\"0\\n\"); return; }\n            else if (vec[i].size() == 2) {\n                // \u6709\u81f3\u5c11\u4e24\u5bf9\u76f8\u540c\u7684\u5b57\u6bcd\n                if (t &gt;= 0) { printf(\"0\\n\"); return; }\n                t = i;\n            }\n        }\n        // \u6ca1\u6709\u76f8\u540c\u5b57\u6bcd\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\n        if (t == -1) continue;\n\n        int x = vec[t][0], y = vec[t][1];\n        if (bgn[x] &gt; bgn[y]) swap(x, y);\n        if (bgn[sn] &lt; bgn[x] &amp;&amp; bgn[sn] &lt; bgn[y]) {\n            // sn \u5728 dfs \u4e2d\u662f x \u548c y \u7684\u7236\u8282\u70b9\n            // \u53ea\u6709 x \u7684\u5b50\u6811\u548c y \u7684\u5b50\u6811\u53ef\u80fd\u6210\u4e3a trie \u7684\u6839\n            f[1]++; f[n + 1]--;\n            f[bgn[x]]--; f[fin[x] + 1]++;\n            f[bgn[y]]--; f[fin[y] + 1]++;\n        } else {\n            // x \u5728 dfs \u4e2d\u662f sn \u7684\u7236\u8282\u70b9\n            // \u9664\u4e86 sn \u7684\u5b50\u6811\u4ee5\u5916\u7684\u5730\u65b9\u53ef\u80fd\u6210\u4e3a trie \u7684\u6839\n            f[bgn[sn]]++; f[fin[sn] + 1]--;\n            // y \u7684\u5b50\u6811\u53ef\u80fd\u6210\u4e3a trie \u7684\u6839\n            f[bgn[y]]--; f[fin[y] + 1]++;\n        }\n    }\n\n    ans = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        f[i] += f[i - 1];\n        // \u6ca1\u6709\u6807\u8bb0\u7684\u4f4d\u7f6e\u53ef\u4ee5\u6210\u4e3a trie \u7684\u6839\n        if (f[i] == 0) ans++;\n    }\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/j/","title":"J - Coolbits","text":""},{"location":"2019-provincial-shaanxi/j/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738711/111 (9.9%)"},{"location":"2019-provincial-shaanxi/j/#_2","title":"\u9898\u89e3","text":"<p>\u8003\u8651\u4ece\u9ad8\u4f4d\u5230\u4f4e\u4f4d\u786e\u5b9a\u7b54\u6848\u3002\u5047\u8bbe\u73b0\u5728\u9700\u8981\u786e\u5b9a\u7b2c \\(p\\) \u4f4d\u7684\u7b54\u6848\uff0c\u4ee4 \\(v_i\\) \u8868\u793a\u5df2\u7ecf\u786e\u5b9a\u7b2c \\(i\\) \u4e2a\u6570\u4ece\u6700\u9ad8\u4f4d\u5230\u7b2c \\((p + 1)\\) \u4f4d\u8981\u586b\u4ec0\u4e48\u3002</p> <p>\u5982\u679c\u7b54\u6848\u7684\u7b2c \\(p\\) \u4f4d\u8981\u586b \\(1\\)\uff0c\u90a3\u4e48\u533a\u95f4 \\([v_i + 2^p, v_i + 2^{p + 1} - 1]\\) \u5fc5\u987b\u4e0e \\([l_i, r_i]\\) \u6709\u4ea4\u96c6\u3002\u5982\u679c\u5bf9\u4e8e\u6240\u6709 \\(i\\) \u90fd\u6709\u4ea4\u96c6\uff0c\u90a3\u4e48\u7b54\u6848\u7684\u7b2c \\(p\\) \u4f4d\u53ef\u4ee5\u586b \\(1\\)\uff0c\u6240\u6709\u7684 \\(v_i\\) \u589e\u52a0 \\(2^p\\)\u3002</p> <p>\u5426\u5219\u7b54\u6848\u7684\u7b2c \\(p\\) \u4f4d\u53ea\u80fd\u586b \\(0\\)\uff0c\u6211\u4eec\u8fd8\u8981\u5bf9\u4e8e\u7b2c \\(i\\) \u4e2a\u6570\u8003\u8651\u5b83\u7684\u7b2c \\(p\\) \u4f4d\u586b\u4ec0\u4e48\u3002</p> <ul> <li>\u5982\u679c \\([v_i + 2^p, v_i + 2^{p + 1} - 1]\\) \u548c \\([l_i, r_i]\\) \u6ca1\u6709\u4ea4\u96c6\uff0c\u90a3\u7b2c \\(i\\) \u4e2a\u6570\u7684\u7b2c \\(p\\) \u4f4d\u53ea\u80fd\u586b \\(0\\)\u3002</li> <li>\u5426\u5219\u770b\u4e00\u4e0b \\(x = v_i + 2^p - 1\\) \u662f\u5426\u5728 \\([l_i, r_i]\\) \u7684\u8303\u56f4\u5185\uff0c\u4e5f\u5c31\u662f\u7b2c \\(p\\) \u4f4d\u586b \\(0\\)\uff0c\u540e\u9762\u5168\u586b \\(1\\)\u3002\u5982\u679c\u5728\u8303\u56f4\u5185\uff0c\u56e0\u4e3a\u540e\u9762\u53ef\u4ee5\u5168\u586b \\(1\\)\uff0c\u6240\u4ee5\u8fd9\u4e2a\u6570\u4ee5\u540e\u5c31\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u4e86\uff0c\u8fd9\u4e00\u4f4d\u76f4\u63a5\u586b \\(0\\) \u5c31\u884c\u3002\u5426\u5219\u5fc5\u7136\u6709 \\(x &lt; l_i\\)\uff08\u5982\u679c\u662f \\(x &gt; r_i\\) \u5219 \\(v_i + 2^p = x + 1 &gt; r_i\\)\uff0c\u4e0d\u53ef\u80fd\u548c \\([l_i, r_i]\\) \u6709\u4ea4\u96c6\uff09\uff0c\u90a3\u53ea\u80fd\u586b \\(1\\)\u3002</li> </ul> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log \\max(r_i))\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/j/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXP 29\nusing namespace std;\n\nint n, ans, L[MAXN + 10], R[MAXN + 10];\nint now[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d%d\", &amp;L[i], &amp;R[i]);\n\n    ans = 0;\n    memset(now, 0, sizeof(int) * (n + 3));\n    for (int i = MAXP; i &gt;= 0; i--) {\n        bool flag = true;\n        for (int j = 1; j &lt;= n; j++) {\n            int l = now[j] + (1 &lt;&lt; i), r = now[j] + (2 &lt;&lt; i) - 1;\n            // \u533a\u95f4\u6ca1\u6709\u4ea4\u96c6\uff0c\u7b54\u6848\u65e0\u6cd5\u586b 1\n            if (l &gt; R[j] || r &lt; L[j]) { flag = false; break; }\n        }\n\n        if (flag) {\n            // \u7b54\u6848\u53ef\u4ee5\u586b 1 \u7684\u60c5\u51b5\n            ans |= 1 &lt;&lt; i;\n            for (int j = 1; j &lt;= n; j++) now[j] |= 1 &lt;&lt; i;\n        } else {\n            // \u7b54\u6848\u53ea\u80fd\u586b 0 \u7684\u60c5\u51b5\uff0c\u770b\u6bcf\u4e2a\u6570\u7684\u7b2c i \u4f4d\u586b\u4ec0\u4e48\n            for (int j = 1; j &lt;= n; j++) {\n                int l = now[j] + (1 &lt;&lt; i), r = now[j] + (2 &lt;&lt; i) - 1;\n                if (l &lt;= R[j] &amp;&amp; r &gt;= L[j]) {\n                    if (l - 1 &lt; L[j]) now[j] |= 1 &lt;&lt; i;\n                }\n            }\n        }\n    }\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/k/","title":"K - Escape Plan","text":""},{"location":"2019-provincial-shaanxi/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73873/111 (2.7%)"},{"location":"2019-provincial-shaanxi/k/#_2","title":"\u9898\u89e3","text":"<p>\u7ef4\u62a4 <code>dis[x]</code> \u8868\u793a\u6700\u5dee\u60c5\u51b5\u4e0b\u4ece\u70b9 \\(x\\) \u8d70\u5230\u4efb\u610f\u7ec8\u70b9\u7684\u6700\u77ed\u8def\uff0c\u663e\u7136 <code>dis[\u7ec8\u70b9] = 0</code>\uff0c\u5176\u5b83\u7684 <code>dis</code> \u503c\u8003\u8651\u4ece\u7ec8\u70b9\u5012\u63a8\u56de\u6765\u3002</p> <p>\u8003\u8651\u4ece\u7ec8\u70b9\u5f00\u59cb Dijkstra \u7684\u8fc7\u7a0b\u3002</p> <ul> <li>\u5f53\u6211\u4eec\u4ece Dijkstra \u7684\u5806\u9876\u7b2c\u4e00\u6b21\u53d6\u51fa\u8282\u70b9 \\(v\\) \u65f6\uff08\u5047\u8bbe\u5bf9\u5e94\u7684\u662f\u8fb9 \\(u_1 \\to v\\)\uff09\uff0c\u8bf4\u660e\u4ece \\(v\\) \u51fa\u53d1\uff0c\u8d70 \\(v - u_1\\) \u8fd9\u6761\u8fb9\u662f\u53bb\u7ec8\u70b9\u7684\u6700\u8fd1\u9053\u8def\u3002\u4e3a\u4e86\u8ba9\u7b54\u6848\u5c3d\u53ef\u80fd\u5dee\uff0c\u6211\u4eec\u5fc5\u987b\u5f97\u628a\u8fd9\u6761\u8fb9\u5835\u4e0a\u3002</li> <li>\u540c\u6837\u5730\uff0c\u5f53\u6211\u4eec\u4ece Dijkstra \u7684\u5806\u9876\u7b2c\u4e8c\u6b21\u53d6\u51fa\u8282\u70b9 \\(v\\) \u65f6\uff08\u5047\u8bbe\u5bf9\u5e94\u7684\u662f\u8fb9 \\(u_2 \\to v\\)\uff09\uff0c\u8bf4\u660e\u4ece \\(v\\) \u51fa\u53d1\uff0c\u8d70 \\(v - u_2\\) \u8fd9\u6761\u8fb9\u662f\u53bb\u7ec8\u70b9\u7684\u7b2c\u4e8c\u8fd1\u9053\u8def\u3002\u4e3a\u4e86\u8ba9\u7b54\u6848\u5c3d\u53ef\u80fd\u5dee\uff0c\u6211\u4eec\u4e5f\u5f97\u628a\u8fd9\u6761\u8fb9\u5835\u4e0a\u3002</li> <li>...</li> <li>\u5f53\u6211\u4eec\u4ece Dijkstra \u7684\u5806\u9876\u7b2c \\((d_v + 1)\\) \u6b21\u53d6\u51fa\u8282\u70b9 \\(v\\) \u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u5835\u585e\u6b21\u6570\u5df2\u7ecf\u7528\u5b8c\u4e86\uff0c\u90a3\u4e48 <code>dis[v]</code> \u7684\u503c\u5c31\u786e\u5b9a\u4e3a\u672c\u6b21\u53d6\u51fa\u7684\u8ddd\u79bb\u3002\u8282\u70b9 \\(v\\) \u7ee7\u7eed\u5411\u76f8\u90bb\u8282\u70b9\u8f6c\u79fb\u3002</li> </ul> <p>\u6700\u540e <code>dis[1]</code> \u5c31\u662f\u7b54\u6848\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(m\\log m)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/k/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;long long, int&gt; pli;\n\nint n, m, D[MAXN + 10];\nvector&lt;int&gt; EX;\n\nvector&lt;int&gt; e[MAXN + 10], v[MAXN + 10];\nlong long dis[MAXN + 10];\n\nvoid dijkstra() {\n    memset(dis, -1, sizeof(long long) * (n + 3));\n    priority_queue&lt;pli, vector&lt;pli&gt;, greater&lt;pli&gt;&gt; pq;\n    for (int x : EX) pq.push(pli(0, x));\n    while (!pq.empty()) {\n        pli p = pq.top(); pq.pop();\n        int sn = p.second;\n        if (dis[sn] &gt;= 0) continue;\n        // \u53ea\u6709\u5835\u585e\u6b21\u6570\u4e0d\u591f\u4e86\uff0c\u624d\u80fd\u591f\u66f4\u65b0 dis[sn]\n        if (--D[sn] &gt;= 0) continue;\n        dis[sn] = p.first;\n        for (int i = 0; i &lt; e[sn].size(); i++) {\n            int fn = e[sn][i];\n            if (dis[fn] &gt;= 0) continue;\n            pq.push(pli(dis[sn] + v[sn][i], fn));\n        }\n    }\n}\n\nvoid solve() {\n    int K; scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;K);\n\n    EX.clear();\n    while (K--) {\n        int x; scanf(\"%d\", &amp;x);\n        EX.push_back(x);\n    }\n\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;D[i]);\n    // \u628a\u7ec8\u70b9\u7684\u5835\u585e\u6b21\u6570\u90fd\u6539\u6210 0\uff0c\u9632\u6b62 dijkstra \u65e0\u6cd5\u5f00\u59cb\n    for (int x : EX) D[x] = 0;\n\n    for (int i = 1; i &lt;= n; i++) e[i].clear(), v[i].clear();\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z);\n        e[x].push_back(y); v[x].push_back(z);\n        e[y].push_back(x); v[y].push_back(z);\n    }\n\n    dijkstra();\n    printf(\"%lld\\n\", dis[1]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shaanxi/l/","title":"L - Digit Product","text":""},{"location":"2019-provincial-shaanxi/l/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u9655\u897f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387100/111 (90.1%)"},{"location":"2019-provincial-shaanxi/l/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c \\(x\\) \u662f \\(10\\) \u7684\u500d\u6570\uff0c\u7531\u4e8e\u4e2a\u4f4d\u6570\u662f \\(0\\)\uff0c\u6240\u4ee5 \\(f(x) = 0\\)\u3002</p> <p>\u56e0\u6b64\uff0c\u53ea\u8981 \\([l, r]\\) \u91cc\u5305\u542b \\(10\\) \u7684\u500d\u6570\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f \\(0\\)\u3002\u5426\u5219\u66b4\u529b\u8ba1\u7b97\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\min(r - l + 1, 10) \\times \\log r)\\)\u3002</p>"},{"location":"2019-provincial-shaanxi/l/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MOD ((int) 1e9 + 7)\nusing namespace std;\n\nvoid solve() {\n    int L, R; scanf(\"%d%d\", &amp;L, &amp;R);\n    long long ans = 1;\n    for (int i = L; i &lt;= R; i++) {\n        for (int x = i; x; x /= 10) ans = ans * (x % 10) % MOD;\n        // \u7b54\u6848\u5df2\u7ecf\u662f 0\uff0c\u540e\u9762\u4e0d\u7ba1\u518d\u600e\u4e48\u4e58\u90fd\u662f 0\n        if (ans == 0) break;\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/","title":"2019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2019-provincial-shandong/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2019/05/12 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ | ZOJ 4113 ~ 4125 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2019-provincial-shandong/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 241, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 56, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 29, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 171, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 40, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 189, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 44, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 230, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 53, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 46, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 15, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 48, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 238, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 53, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 11, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 40, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 24, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 94, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 21, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 30, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 18, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2019-provincial-shandong/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2019-provincial-shandong/#_4","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>A - Calandar</li> <li>B - Flipping Game</li> <li>C - Wandering Robot</li> <li>D - Game on a Graph</li> <li>E - BaoBao Loves Reading</li> <li>F - Stones in the Bucket</li> <li>G - Heap</li> <li>H - Tokens on the Segments</li> <li>I - Connected Intervals</li> <li>J - Triangle City</li> <li>K - Happy Equation</li> <li>L - Median</li> <li>M - Sekiro</li> </ul>"},{"location":"2019-provincial-shandong/a/","title":"A - Calandar","text":""},{"location":"2019-provincial-shandong/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387297/307 (96.7%)"},{"location":"2019-provincial-shandong/a/#_2","title":"\u9898\u89e3","text":"<p>\u56e0\u4e3a\u6bcf\u5e74\u90fd\u662f \\(12\\) \u4e2a\u6708\uff0c\u6bcf\u4e2a\u6708\u90fd\u662f \\(30\\) \u5929\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3a \\(y\\) \u5e74 \\(m\\) \u6708 \\(d\\) \u65e5\u662f\u7b2c \\((y \\times 12 \\times 30 + m \\times 30 + d)\\) \u5929\u3002\u5229\u7528\u8d77\u59cb\u548c\u76ee\u6807\u5929\u6570\u7684\u5dee\u503c\u7b97\u51fa\u661f\u671f\u51e0\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\)\u3002</p>"},{"location":"2019-provincial-shandong/a/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// \u661f\u671f\u7684\u540d\u79f0\nchar D[5][10] = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"};\n\n// \u8bfb\u5165\u4e00\u4e2a y-m-d \u7684\u65e5\u671f\uff0c\u5e76\u8fd4\u56de\u8fd9\u662f\u7b2c\u51e0\u5929\nlong long input() {\n    long long y, m, d; scanf(\"%lld%lld%lld\", &amp;y, &amp;m, &amp;d);\n    return y * 12 * 30 + m * 30 + d;\n}\n\nvoid solve() {\n    long long a = input();\n\n    // \u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u6210\u4e00\u4e2a\u661f\u671f\u91cc\u7684\u7b2c\u51e0\u5929\n    char s[10]; scanf(\"%s\", s);\n    long long c;\n    for (c = 0; c &lt; 5; c++) if (strcmp(s, D[c]) == 0) break;\n\n    long long b = input();\n\n    // \u5229\u7528\u8d77\u59cb\u548c\u76ee\u6807\u5929\u6570\u7684\u5dee\u503c\uff0c\u7b97\u51fa\u76ee\u6807\u65e5\u671f\u662f\u4e00\u5468\u91cc\u7684\u7b2c\u51e0\u5929\n    c = ((c + b - a) % 5 + 5) % 5;\n    printf(\"%s\\n\", D[c]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/b/","title":"B - Flipping Game","text":""},{"location":"2019-provincial-shandong/b/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738734/307 (11.1%)"},{"location":"2019-provincial-shandong/b/#_2","title":"\u9898\u89e3","text":"<p>\u4e0d\u5931\u4e00\u822c\u6027\u5730\uff0c\u5047\u8bbe\u6bcf\u4e00\u76cf\u706f\u7684\u76ee\u6807\u72b6\u6001\u90fd\u662f\u7184\u706d\uff08\u5982\u679c \\(t\\) \u4e0d\u662f\u5168 \\(0\\) \u5b57\u7b26\u4e32\uff0c\u5219\u5c06 \\(s\\) \u548c \\(t\\) \u5206\u522b\u5f02\u6216\u539f\u6765\u7684 \\(t\\) \u5373\u53ef\uff09\u3002</p> <p>\u7ef4\u62a4 \\(f(i, j)\\) \u8868\u793a\u8fdb\u884c \\(i\\) \u8f6e\u64cd\u4f5c\u540e\uff0c\u8fd8\u6709 \\(j\\) \u76cf\u706f\u662f\u4eae\u7684\u65b9\u6848\u6570\u3002\u6211\u4eec\u679a\u4e3e\u63a5\u4e0b\u6765\u7184\u706d \\(x\\) \u76cf\u706f\uff08\u4e5f\u5c31\u662f\u8bf4\u8fd8\u8981\u70b9\u4eae \\((m - x)\\) \u76cf\u706f\uff09\uff0c\u5219\u8f6c\u79fb\u65b9\u7a0b\u4e3a</p> \\[ f(i + 1, j - x + (m - x)) \\stackrel{+}{\\longleftarrow} f(i, j) \\times \\binom{j}{x} \\times \\binom{n - j}{m - x} \\] <p>\u5176\u4e2d \\(\\binom{a}{b}\\) \u662f \\(a\\) \u76cf\u706f\u91cc\u9009 \\(b\\) \u76cf\u7684\u65b9\u6848\u6570\uff0c\u4e5f\u5c31\u662f\u7ec4\u5408\u6570\u3002\u521d\u503c\u5c31\u662f \\(f(0, c) = 1\\)\uff0c\u5176\u4e2d \\(c\\) \u662f\u4e00\u5f00\u59cb\u6709\u51e0\u76cf\u706f\u4eae\u7740\uff0c\u4e5f\u5c31\u662f \\(s\\) \u548c \\(t\\) \u91cc\u6709\u51e0\u4e2a\u5b57\u7b26\u4e0d\u540c\u3002\u7b54\u6848\u5c31\u662f \\(f(k, 0)\\)\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(kn^2)\\)\u3002</p>"},{"location":"2019-provincial-shandong/b/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 100\n#define MAXK 100\n#define MOD 998244353\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, K, m;\nchar s[MAXN + 10], t[MAXN + 10];\n\nlong long f[MAXK + 10][MAXN + 10], C[MAXN + 10][MAXN + 10];\n\nvoid addMod(long long &amp;x, long long y) { x = (x + y) % MOD; }\n\nvoid solve() {\n    scanf(\"%d%d%d%s%s\", &amp;n, &amp;K, &amp;m, s + 1, t + 1);\n    // \u8ba1\u7b97 s \u548c t \u6709\u51e0\u4e2a\u5b57\u7b26\u4e0d\u540c\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; i++) if (s[i] != t[i]) cnt++;\n\n    // dp\n    for (int i = 0; i &lt;= K; i++) for (int j = 0; j &lt;= n; j++) f[i][j] = 0;\n    f[0][cnt] = 1;\n    for (int i = 0; i &lt; K; i++) for (int j = 0; j &lt;= n; j++) {\n        int jj = n - j;\n        for (int x = 0; x &lt;= j &amp;&amp; x &lt;= m; x++) {\n            int y = m - x;\n            if (jj &lt; y) continue;\n            addMod(f[i + 1][j - x + y], f[i][j] * C[j][x] % MOD * C[jj][y] % MOD);\n        }\n    }\n    printf(\"%lld\\n\", f[K][0]);\n}\n\nint main() {\n    // \u9884\u5904\u7406\u7ec4\u5408\u6570\n    for (int i = 0; i &lt;= MAXN; i++) {\n        C[i][0] = 1;\n        for (int j = 1; j &lt;= i; j++) C[i][j] = (C[i - 1][j - 1] + C[i - 1][j]) % MOD;\n    }\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/c/","title":"C - Wandering Robot","text":""},{"location":"2019-provincial-shandong/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387211/307 (68.7%)"},{"location":"2019-provincial-shandong/c/#_2","title":"\u9898\u89e3","text":"<p>\u8bbe\u7b2c \\(i\\) \u6b65\u4e4b\u540e\u673a\u5668\u4eba\u7684\u5750\u6807\u662f \\((x_i, y_i)\\)\uff0c\u5219 \\((tn + i)\\) \u6b65\u4e4b\u540e\u673a\u5668\u4eba\u7684\u5750\u6807\u662f \\((tx_n + x_i, ty_n + y_i)\\)\uff0c\u8ddd\u79bb\u539f\u70b9\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u4e3a \\(|tx_n + x_i| + |ty_n + y_i|\\)\u3002</p> <p>\\(f(t) = |tx_n + x_i|\\) \u7684\u51fd\u6570\u56fe\u50cf\u662f\u4e00\u4e2a V \u5f62\uff0c\u4e24\u4e2a\u8fd9\u6837\u7684\u51fd\u6570\u52a0\u8d77\u6765\uff0c\u56fe\u50cf\u662f\u4e00\u4e2a\u5f00\u53e3\u5411\u4e0a\u7684\uff0c\u7531\u4e09\u4e2a\u4e00\u6b21\u51fd\u6570\u7ec4\u6210\u7684\u201c\u7897\u201d\u5f62\u3002</p> <p></p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709 \\(t\\) \u5c3d\u53ef\u80fd\u5c0f\u6216\u8005\u5c3d\u53ef\u80fd\u5927\uff0c\u66fc\u54c8\u987f\u8ddd\u79bb\u624d\u80fd\u5c3d\u53ef\u80fd\u5927\u3002\u800c \\(t \\in [0, k - 1]\\)\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u8003\u8651 \\(t = 0\\) \u548c \\(t = k - 1\\) \u7684\u60c5\u51b5\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2019-provincial-shandong/c/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, K;\nchar s[MAXN + 10];\nlong long ans;\n\nvoid solve() {\n    scanf(\"%d%d%s\", &amp;n, &amp;K, s + 1);\n    // (X, Y) \u662f n \u6b65\u4e4b\u540e\u6240\u5728\u7684\u5750\u6807\n    long long X = 0, Y = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (s[i] == 'U') Y++;\n        else if (s[i] == 'D') Y--;\n        else if (s[i] == 'L') X--;\n        else X++;\n    }\n\n    ans = 0;\n    // (x, y) \u662f i \u6b65\u4e4b\u540e\u6240\u5728\u7684\u5750\u6807\n    long long x = 0, y = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        if (s[i] == 'U') y++;\n        else if (s[i] == 'D') y--;\n        else if (s[i] == 'L') x--;\n        else x++;\n        ans = max({\n            ans,\n            // t = 0\n            abs(x) + abs(y),\n            // t = k - 1\n            abs((K - 1) * X + x) + abs((K - 1) * Y + y)\n        });\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/d/","title":"D - Game on a Graph","text":""},{"location":"2019-provincial-shandong/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387233/307 (75.9%)"},{"location":"2019-provincial-shandong/d/#_2","title":"\u9898\u89e3","text":"<p>\u8fde\u901a\u56fe\u6700\u5c11\u9700\u8981 \\((n - 1)\\) \u6761\u8fb9\uff0c\u56e0\u6b64\u6700\u591a\u53ef\u4ee5\u64cd\u4f5c \\((m - (n - 1))\\) \u6b21\uff0c\u8f93\u7684\u4eba\u5c31\u662f \\((m - (n - 1)) \\bmod k\\)\u3002\u8003\u8651\u5230\u8bfb\u5165\uff0c\u590d\u6742\u5ea6 \\(\\mathcal{O}(k + m)\\)\u3002</p>"},{"location":"2019-provincial-shandong/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXK ((int) 1e5)\nusing namespace std;\n\nint K, n, m;\nchar s[MAXK + 10];\n\nvoid solve() {\n    scanf(\"%d%s%d%d\", &amp;K, s, &amp;n, &amp;m);\n    for (int i = 1; i &lt;= m; i++) scanf(\"%*d%*d\");\n    int delta = m - (n - 1);\n    char lose = s[delta % K];\n    if (lose == '1') printf(\"2\\n\");\n    else printf(\"1\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/e/","title":"E - BaoBao Loves Reading","text":""},{"location":"2019-provincial-shandong/e/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738716/307 (5.2%)"},{"location":"2019-provincial-shandong/e/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c\u684c\u5b50\u7684\u5927\u5c0f\u662f \\(k\\)\uff0c\u90a3\u4e48\u6700\u8fd1\u770b\u8fc7\u7684 \\(k\\) \u79cd\u4e66\u90fd\u4f1a\u5728\u684c\u5b50\u4e0a\u3002\u8003\u8651\u7b2c \\(i\\) \u5206\u949f\u521a\u5f00\u59cb\uff0c\u51c6\u5907\u770b\u4e66 \\(a_i\\)\u3002\u8bbe\u4e0a\u4e00\u6b21\u770b\u5b83\u662f\u5728\u7b2c \\(i'\\) \u5206\u949f\uff0c\u5982\u679c \\([i' + 1, i - 1]\\) \u91cc\u5df2\u7ecf\u6709\u81f3\u5c11 \\(k\\) \u79cd\u4e66\u4e86\uff0c\u8bf4\u660e \\(a_i\\) \u4e0d\u662f\u6700\u8fd1\u770b\u8fc7\u7684 \\(k\\) \u79cd\u4e66\uff0c\u5373 \\(a_i\\) \u4e0d\u5728\u684c\u5b50\u4e0a\u3002</p> <p>\u56e0\u6b64\u4ee4 \\(g(i)\\) \u8868\u793a \\([i' + 1, i - 1]\\) \u91cc\u4e66\u7684\u79cd\u7c7b\u6570\uff0c\u53ea\u8981\u684c\u5b50\u5927\u5c0f\u81f3\u591a\u4e3a \\(g(i)\\)\uff0c\u7b2c \\(i\\) \u5206\u949f\u5c31\u5fc5\u987b\u53bb\u4e66\u67dc\u53d6\u4e66\u3002\u56e0\u6b64\u684c\u5b50\u5927\u5c0f\u4e3a \\(k\\) \u65f6\u7684\u7b54\u6848\u5c31\u662f\u6ee1\u8db3 \\(k \\le g(i)\\) \u7684\u4e0b\u6807 \\(i\\) \u7684\u6570\u91cf\uff0c\u7528\u540e\u7f00\u548c\u4e00\u6b21\u6027\u628a\u6240\u6709\u7b54\u6848\u7b97\u51fa\u6765\u5373\u53ef\u3002</p> <p>\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\u5982\u4f55\u6c42\u51fa \\(g(i)\\)\u3002\u79bb\u7ebf\u8be2\u95ee\u533a\u95f4\u5143\u7d20\u79cd\u7c7b\u6570\u662f\u4e00\u4e2a\u975e\u5e38\u7ecf\u5178\u7684\u95ee\u9898\uff0c\u53ef\u4ee5\u5148\u5c06\u6240\u6709\u8be2\u95ee\u533a\u95f4\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6bcf\u4e2a\u5143\u7d20\u6700\u540e\u51fa\u73b0\u7684\u4e0b\u6807\u5373\u53ef\u3002\u8be6\u7ec6\u505a\u6cd5\u53c2\u89c1 [SDOI2009] HH \u7684\u9879\u94fe\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2019-provincial-shandong/e/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n;\n\n// last[i]\uff1a\u7b2c i \u79cd\u4e66\u6700\u540e\u51fa\u73b0\u7684\u4e0b\u6807\n// f[i]\uff1a\u6709\u51e0\u4e2a\u4e0b\u6807 x \u6ee1\u8db3 g(x) = i\uff0c\u540e\u7f00\u548c\u5c31\u662f\u7b54\u6848\nint last[MAXN + 10], f[MAXN + 10];\nint tree[MAXN + 10];\n\nint lb(int x) { return x &amp; (-x); }\n\nvoid add(int pos, int val) {\n    for (; pos &lt;= n; pos += lb(pos)) tree[pos] += val;\n}\n\nint query(int pos) {\n    int ret = 0;\n    for (; pos; pos -= lb(pos)) ret += tree[pos];\n    return ret;\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    memset(last, 0, sizeof(int) * (n + 3));\n    memset(f, 0, sizeof(int) * (n + 3));\n    memset(tree, 0, sizeof(int) * (n + 3));\n\n    for (int i = 1; i &lt;= n; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        if (last[x] == 0) {\n            // \u7b2c\u4e00\u6b21\u770b\u8fd9\u672c\u4e66\uff0c\u80af\u5b9a\u8981\u53bb\u4e66\u67dc\u62ff\n            f[n]++;\n        } else {\n            // \u684c\u5b50\u5927\u5c0f\u4e0d\u8d85\u8fc7 [last[x] + 1, i - 1] \u91cc\u7684\u5143\u7d20\u79cd\u7c7b\u6570\u65f6\uff0c\u624d\u9700\u8981\u53bb\u4e66\u67dc\u62ff\n            f[query(i - 1) - query(last[x])]++;\n            // \u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6bcf\u79cd\u5143\u7d20\u6700\u540e\u51fa\u73b0\u7684\u4e0b\u6807\n            add(last[x], -1);\n        }\n        // \u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u6bcf\u79cd\u5143\u7d20\u6700\u540e\u51fa\u73b0\u7684\u4e0b\u6807\n        add(i, 1);\n        last[x] = i;\n    }\n\n    // \u540e\u7f00\u548c\u4e00\u6b21\u6027\u6c42\u51fa\u7b54\u6848\n    for (int i = n - 1; i &gt; 0; i--) f[i] += f[i + 1];\n    for (int i = 1; i &lt;= n; i++) printf(\"%d%c\", f[i], \"\\n \"[i &lt; n]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/f/","title":"F - Stones in the Bucket","text":""},{"location":"2019-provincial-shandong/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387283/307 (92.2%)"},{"location":"2019-provincial-shandong/f/#_2","title":"\u9898\u89e3","text":"<p>\u5148\u5047\u8bbe\u6211\u4eec\u53ea\u8fdb\u884c\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u3002</p> <p>\u7b2c\u4e8c\u79cd\u64cd\u4f5c\u77f3\u5934\u7684\u603b\u6570\u4e0d\u53d8\uff0c\u56e0\u6b64\u77f3\u5934\u7684\u603b\u6570 \\(s\\) \u5fc5\u987b\u662f \\(n\\) \u7684\u500d\u6570\u3002\u8bbe\u77f3\u5934\u7684\u603b\u6570\u4e3a \\(kn\\)\uff0c\u90a3\u4e48\u6700\u7ec8\u6bcf\u4e2a\u6876\u91cc\u5fc5\u987b\u6070\u6709 \\(k\\) \u4e2a\u77f3\u5934\u3002</p> <p>\u8bbe\u77f3\u5934\u6bd4 \\(k\\) \u591a\u7684\u6876\u91cc\uff0c\u4e00\u5171\u591a\u51fa\u4e86 \\(p_+\\) \u4e2a\u77f3\u5934\uff0c\u800c\u77f3\u5934\u6bd4 \\(k\\) \u5c11\u7684\u6876\u91cc\uff0c\u4e00\u5171\u5c11\u4e86 \\(p_-\\) \u4e2a\u77f3\u5934\u3002\u56e0\u4e3a\u77f3\u5934\u603b\u6570\u5c31\u662f \\(kn\\)\uff0c\u6211\u4eec\u6709 \\(p_+ = p_-\\)\u3002\u800c\u6bcf\u6b21\u64cd\u4f5c\u90fd\u80fd\u5c06 \\(p_+\\) \u548c \\(p_-\\) \u5206\u522b\u51cf\u5c11 \\(1\\)\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u8fdb\u884c \\(p_-\\) \u6b21\u64cd\u4f5c\u5373\u53ef\u3002</p> <p>\u63a5\u4e0b\u6765\u52a0\u5165\u7b2c\u4e00\u79cd\u64cd\u4f5c\u3002\u56e0\u4e3a\u77f3\u5934\u7684\u603b\u6570 \\(s\\) \u4e0d\u4e00\u5b9a\u662f \\(n\\) \u7684\u500d\u6570\uff0c\u800c\u7b2c\u4e00\u79cd\u64cd\u4f5c\u53ef\u4ee5\u8ba9\u77f3\u5934\u7684\u603b\u6570\u51cf\u5c11 \\(1\\)\uff0c\u56e0\u6b64\u6211\u4eec\u9996\u5148\u901a\u8fc7\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c\u8ba9\u77f3\u5934\u603b\u6570\u51cf\u5c11\u81f3 \\(n\\) \u7684\u500d\u6570\u3002</p> <p>\u63a5\u4e0b\u6765\u8003\u8651\u54ea\u4e2a \\(n\\) \u7684\u500d\u6570\u662f\u6700\u4f18\u7684\u3002\u5982\u679c\u6211\u4eec\u5c06\u77f3\u5934\u603b\u6570\u4ece \\(kn\\) \u51cf\u5c11\u5230 \\((k - 1)n\\)\uff0c\u9700\u8981\u82b1\u8d39 \\(n\\) \u6b21\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c\u800c \\(p_- \\in [0, n]\\)\uff0c\u56e0\u6b64 \\(p_-\\) \u6700\u591a\u51cf\u5c11 \\(n\\)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u968f\u7740 \\(k\\) \u53d8\u5c0f\uff0c\u64cd\u4f5c\u603b\u6570\u4e0d\u4f1a\u53d8\u5c0f\uff0c\u751a\u81f3\u53ef\u80fd\u53d8\u5927\u3002\u56e0\u6b64\u5c06 \\(s\\) \u51cf\u5c0f\u5230\u8ddd\u79bb\u6700\u8fd1\u7684 \\(n\\) \u7684\u500d\u6570\u5373\u53ef\uff0c\u4e5f\u5c31\u662f \\(\\lfloor\\frac{s}{n}\\rfloor \\times n\\)\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2019-provincial-shandong/f/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, A[MAXN + 10];\nlong long ans;\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    long long sm = 0;\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]), sm += A[i];\n    long long goal = sm / n;\n    // \u8fdb\u884c s % n \u6b21\u7b2c\u4e00\u79cd\u64cd\u4f5c\uff0c\u628a\u77f3\u5934\u603b\u6570\u51cf\u5c0f\u6210\u6700\u8fd1\u7684 n \u7684\u500d\u6570\n    ans = sm % n;\n    // \u7b2c\u4e8c\u79cd\u64cd\u4f5c\u9700\u8981 p- \u6b21\n    for (int i = 1; i &lt;= n; i++) if (A[i] &lt; goal) ans += goal - A[i];\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/g/","title":"G - Heap","text":""},{"location":"2019-provincial-shandong/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73872/307 (0.7%)"},{"location":"2019-provincial-shandong/g/#_2","title":"\u9898\u89e3","text":"<p>\u9996\u5148\u56de\u987e\u4e00\u4e0b\u5927\u6839\u5806\u7684\u63d2\u5165\u8fc7\u7a0b\u3002\u5982\u679c\u5f80\u5927\u6839\u5806\u91cc\u63d2\u5165\u7b2c \\(i\\) \u4e2a\u6570\uff0c\u5c06\u4f1a\u4f9d\u6b64\u68c0\u67e5 \\(a_{i / 2}, a_{i / 4}, \\cdots\\) \u5e76\u8fdb\u884c\u4ea4\u6362\uff0c\u76f4\u5230\u6765\u5230\u5806\u9876\uff0c\u6216\u8005\u9047\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u3002</p> <p>\u4f8b\u5982\uff0c\u4e0b\u56fe\u5c55\u793a\u4e86\u5f80\u5927\u6839\u5806\u91cc\u63d2\u5165\u7b2c \\(10\\) \u4e2a\u6570\u524d\u540e\u7684\u53d8\u5316\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u53ea\u6709\u63d2\u5165\u8def\u5f84\u4e0a\u7684\u5143\u7d20\u53d1\u751f\u4e86\u53d8\u5316\u3002\u63d2\u5165\u8def\u5f84\u4e0a\u7684\u5143\u7d20\u90fd\u201c\u5411\u4e0b\u201d\u79fb\u52a8\u4e86\u4e00\u5c42\uff0c\u7a7a\u51fa\u6765\u7684\u4f4d\u7f6e\u5c31\u662f\u65b0\u5143\u7d20\u6700\u7ec8\u63d2\u5165\u7684\u4f4d\u7f6e\u3002</p> <p></p> <p>\u800c\u672c\u9898\u8981\u6c42\u6211\u4eec\u9006\u8f6c\u63d2\u5165\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u8003\u8651\u4ece\u5806\u4e2d\u6309 \\(v_n\\) \u5230 \\(v_1\\) \u7684\u987a\u5e8f\u4f9d\u6b64\u201c\u62bd\u51fa\u201d\u5143\u7d20\u3002\u4e4b\u524d\u63d2\u5165\u7b2c \\(i\\) \u4e2a\u6570\u65f6\uff0c\u53ef\u80fd\u201c\u5411\u4e0b\u201d\u79fb\u52a8\u4e00\u5c42\u7684\u5143\u7d20\u53ea\u6709 \\(a_{i/2}, a_{i/4}, \\cdots\\)\u3002\u56e0\u6b64\u6211\u4eec\u5728\u8fd9\u4e9b\u5143\u7d20\u4e2d\u627e\u51fa \\(v_i\\)\uff0c\u5e76\u628a\u8def\u5f84\u4e0a \\(v_i\\) \u4e0b\u9762\u7684\u5143\u7d20\u5168\u90e8\u201c\u5411\u4e0a\u201d\u79fb\u52a8\u4e00\u5c42\uff0c\u5373\u53ef\u8fd8\u539f\u6210\u63d2\u5165 \\(v_i\\) \u4e4b\u524d\u7684\u6837\u5b50\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\u95ee\u9898\uff1a\u5982\u679c\u8def\u5f84\u4e0a\u6709\u591a\u4e2a \\(v_i\\)\uff0c\u5e94\u8be5\u9009\u62e9\u54ea\u4e00\u4e2a\u5462\uff1f\u663e\u7136\u5e94\u8be5\u9009\u62e9\u6700\u4e0b\u9762\u7684 \\(v_i\\)\uff0c\u56e0\u4e3a\u6839\u636e\u9898\u4e2d\u7684\u4f2a\u4ee3\u7801\uff0c\u5982\u679c\u7236\u8282\u70b9\u548c\u5f53\u524d\u8282\u70b9\u4e00\u6837\u5927\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u9000\u51fa\u5faa\u73af\u3002</p> <p>\u5269\u4e0b\u7684\u95ee\u9898\u5c31\u662f\u786e\u5b9a\u63d2\u5165 \\(v_i\\) \u65f6\uff0c\u662f\u6309\u5c0f\u6839\u5806\u8fd8\u662f\u5927\u6839\u5806\u63d2\u5165\u7684\u3002\u5982\u679c\u62bd\u51fa \\(v_i\\) \u4e4b\u524d\uff0c\u8def\u5f84\u4e0a \\(v_i\\) \u4e0b\u9762\u7684\u5143\u7d20\u90fd\u6bd4\u5b83\u5927\uff0c\u800c\u4e14 \\(v_i\\) \u7684\u7236\u8282\u70b9\u6bd4\u5b83\u5c0f\uff0c\u90a3\u4e48\u5c31\u662f\u6309\u5c0f\u6839\u5806\u63d2\u5165\u7684\uff1b\u5982\u679c\u8def\u5f84\u4e0a \\(v_i\\) \u4e0b\u9762\u7684\u5143\u7d20\u90fd\u6bd4\u5b83\u5c0f\uff0c\u800c\u4e14 \\(v_i\\) \u7684\u7236\u8282\u70b9\u6bd4\u5b83\u5927\uff0c\u90a3\u4e48\u5c31\u662f\u6309\u5927\u6839\u5806\u63d2\u5165\u7684\u3002\u6709\u4e00\u79cd\u7279\u6b8a\u60c5\u51b5\u662f\uff1a\\(v_i\\) \u672c\u6765\u5c31\u4f4d\u4e8e\u6700\u540e\u4e00\u5c42\uff0c\u800c \\(v_i\\) \u7684\u7236\u8282\u70b9\u6070\u597d\u548c\u5b83\u4e00\u6837\u5927\uff0c\u90a3\u4e48\u5927\u6839\u5806\u548c\u5c0f\u6839\u5806\u90fd\u6709\u53ef\u80fd\uff0c\u4e3a\u4e86\u6700\u5c0f\u5316\u7b54\u6848\u7684\u5b57\u5178\u5e8f\u6211\u4eec\u8ba4\u4e3a\u662f\u5c0f\u6839\u5806\u3002\u5269\u4e0b\u7684\u60c5\u51b5\u90fd\u662f <code>Impossible</code>\u3002</p> <p>\u6a21\u62df\u4e0a\u8ff0\u5206\u6790\u8fc7\u7a0b\u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2019-provincial-shandong/g/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, V[MAXN + 10], A[MAXN + 10];\nchar ans[MAXN + 10];\n\n// \u4ece\u5806\u4e2d\u62bd\u51fa v_i\uff0c\u5408\u6cd5\u8fd4\u56de true\uff0c\u975e\u6cd5\u8fd4\u56de false\nbool gao(int i) {\n    // flag\uff1a-1 \u8868\u793a\u4e0d\u786e\u5b9a\u662f\u5c0f\u6839\u5806\u8fd8\u662f\u5927\u6839\u5806\uff0c0 \u8868\u793a\u786e\u5b9a\u4e3a\u5c0f\u6839\u5806\uff0c1 \u8868\u793a\u786e\u5b9a\u4e3a\u5927\u6839\u5806\n    int flag = -1, j = i;\n    // vec \u91cc\u6309\u4ece\u6df1\u5230\u6d45\u4fdd\u5b58\u4e86\u63d2\u5165\u8def\u5f84\u4e0a\u7684\u6240\u6709\u8282\u70b9\n    vector&lt;int&gt; vec;\n\n    while (j &gt; 0) {\n        vec.push_back(j);\n        if (A[j] == V[i]) {\n            // \u627e\u5230\u4e86 v_i\n            if (j / 2 &gt; 0) {\n                // \u68c0\u67e5\u76ee\u6807\u5143\u7d20\u548c\u7236\u8282\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\n                if (A[j / 2] &gt; A[j]) {\n                    // \u6bd4\u7236\u8282\u70b9\u5c0f\uff0c\u5e94\u8be5\u662f\u5927\u6839\u5806\n                    if (flag == 0) return false;\n                    flag = 1;\n                } else if (A[j / 2] &lt; A[j]) {\n                    // \u6bd4\u7236\u8282\u70b9\u5927\uff0c\u5e94\u8be5\u662f\u5c0f\u6839\u5806\n                    if (flag == 1) return false;\n                    flag = 0;\n                }\n            }\n            break;\n        } else if (A[j] &gt; V[i]) {\n            // \u8fd8\u6ca1\u627e\u5230 v_i\uff0cv_i \u4e0b\u9762\u7684\u70b9\u6bd4 v_i \u5927\uff0c\u5e94\u8be5\u662f\u5c0f\u6839\u5806\n            if (flag == 1) return false;\n            flag = 0;\n        } else {\n            // \u8fd8\u6ca1\u627e\u5230 v_i\uff0cv_i \u4e0b\u9762\u7684\u70b9\u6bd4 v_i \u5c0f\uff0c\u5e94\u8be5\u662f\u5927\u6839\u5806\n            if (flag == 0) return false;\n            flag = 1;\n        }\n        // \u5f80\u7236\u8282\u70b9\u79fb\u52a8\n        j &gt;&gt;= 1;\n    }\n    // \u6839\u672c\u6ca1\u627e\u5230 v_i\uff0c\u975e\u6cd5\n    if (j == 0) return false;\n\n    // \u5c0f\u6839\u5927\u6839\u90fd\u53ef\u4ee5\uff0c\u4e3a\u4e86\u6700\u5c0f\u5316\u7b54\u6848\u7684\u5b57\u5178\u5e8f\uff0c\u9009\u62e9\u5c0f\u6839\u5806\n    if (flag == -1) flag = 0;\n    ans[i] = flag + '0';\n    // \u628a\u8def\u5f84\u4e0a v_i \u4e0b\u9762\u7684\u5143\u7d20\u90fd\u5f80\u4e0a\u79fb\u52a8\u4e00\u5c42\n    while (vec.size() &gt; 1) {\n        swap(A[vec.back()], A[vec[vec.size() - 2]]);\n        vec.pop_back();\n    }\n    return true;\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;V[i]);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    ans[n + 1] = 0;\n    for (int i = n; i; i--) if (!gao(i)) { printf(\"Impossible\\n\"); return; }\n    printf(\"%s\\n\", ans + 1);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/h/","title":"H - Tokens on the Segments","text":""},{"location":"2019-provincial-shandong/h/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738755/307 (17.9%)"},{"location":"2019-provincial-shandong/h/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c\u6211\u4eec\u6709\u591a\u6761\u7ebf\u6bb5\u53ef\u4ee5\u653e\u786c\u5e01\uff0c\u663e\u7136\u5e94\u8be5\u9009\u62e9\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\u7ebf\u6bb5\u3002\u7528\u5806\u6a21\u62df\u8fd9\u4e00\u8d2a\u5fc3\u8fc7\u7a0b\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2019-provincial-shandong/h/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, ans;\npii A[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    // \u8bfb\u5165\u7ebf\u6bb5\u5e76\u6309\u5de6\u7aef\u70b9\u6392\u5e8f\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d%d\", &amp;A[i].first, &amp;A[i].second);\n    sort(A + 1, A + n + 1);\n\n    ans = 0;\n    // \u5806\u91cc\u4fdd\u5b58\u76ee\u524d\u6240\u6709\u53ef\u9009\u7ebf\u6bb5\u7684\u53f3\u7aef\u70b9\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;\n    // nxt\uff1a\u4e0b\u4e00\u6761\u7ebf\u6bb5\u7684\u4e0b\u6807\n    // x\uff1a\u6700\u5de6\u8fb9\u7684\u53ef\u4ee5\u653e\u786c\u5e01\u7684\u4f4d\u7f6e\n    int nxt = 1, x = -1;\n    while (true) {\n        // \u79fb\u9664\u6240\u6709\u53f3\u7aef\u70b9\u6bd4 x \u5c0f\u7684\u7ebf\u6bb5\n        while (!pq.empty() &amp;&amp; pq.top() &lt; x) pq.pop();\n        if (pq.empty()) {\n            // \u76ee\u524d\u6ca1\u6709\u7ebf\u6bb5\u53ef\u9009\uff0c\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u6761\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\n            if (nxt &gt; n) break;\n            x = A[nxt].first;\n        } else {\n            // \u6709\u7ebf\u6bb5\u53ef\u9009\uff0c\u9009\u62e9\u53f3\u7aef\u70b9\u6700\u5c0f\u7684\n            ans++;\n            pq.pop();\n            x++;\n        }\n        // \u628a\u5de6\u7aef\u70b9\u7b49\u4e8e x \u7684\u7ebf\u6bb5\u52a0\u5165\u5806\n        while (nxt &lt;= n &amp;&amp; A[nxt].first &lt;= x) {\n            pq.push(A[nxt].second);\n            nxt++;\n        }\n    }\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/i/","title":"I - Connected Intervals","text":""},{"location":"2019-provincial-shandong/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73871/307 (0.3%)"},{"location":"2019-provincial-shandong/i/#_2","title":"\u9898\u89e3","text":"<p>\u8bbe \\(f(l, r)\\) \u8868\u793a\u53ea\u8003\u8651 \\([l, r]\\) \u91cc\u7684\u8282\u70b9\uff0c\u4e00\u5171\u6709\u51e0\u4e2a\u8fde\u901a\u5757\u3002\u8003\u8651\u52a0\u5165\u8282\u70b9 \\((r + 1)\\) \u4f1a\u5e26\u6765\u4ec0\u4e48\u5f71\u54cd\u3002</p> <p>\u5047\u8bbe\u8282\u70b9 \\((r + 1)\\) \u6709\u4e24\u4e2a\u76f8\u90bb\u7684\u8282\u70b9 \\(u, v \\in [l, r]\\)\uff0c\u90a3\u4e48\u5982\u679c\u53ea\u8003\u8651 \\([l, r]\\) \u91cc\u7684\u8282\u70b9\uff0c\u5219 \\(u\\) \u548c \\(v\\) \u4e00\u5b9a\u5728\u4e0d\u540c\u7684\u8fde\u901a\u5757\u4e2d\u3002\u5426\u5219\u539f\u56fe\u4e2d\u4ece \\(u\\) \u5230 \\(v\\) \u5c06\u4f1a\u6709\u81f3\u5c11\u4e24\u79cd\u8def\u5f84\uff1a\u4e00\u79cd\u7ecf\u8fc7 \\((r + 1)\\)\uff0c\u4e00\u79cd\u4e0d\u7ecf\u8fc7\uff0c\u8fd9\u6837\u539f\u56fe\u5c31\u4e0d\u662f\u6811\u4e86\u3002</p> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u8282\u70b9 \\((r + 1)\\) \u6240\u6709\u6ee1\u8db3 \\(u \\in [l, r]\\) \u7684\u76f8\u90bb\u8282\u70b9 \\(u\\)\uff0c\u8282\u70b9 \\((r + 1)\\) \u7684\u52a0\u5165\u4f1a\u5bfc\u81f4\u5b83\u4eec\u4ece\u4e0d\u540c\u7684\u8fde\u901a\u5757\u5168\u90e8\u8fdb\u5165\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u90a3\u4e48 \\(f(l, r + 1) - f(l, r)\\) \u5c31\u662f\u6ee1\u8db3 \\(u \\in [l, r]\\) \u7684\u90bb\u5c45 \\(u\\) \u7684\u6570\u91cf\uff0c\u6362\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u5c31\u662f\u8282\u70b9 \\(u\\) \u5c06\u4f1a\u5bf9\u6240\u6709 \\(l \\le u\\) \u7684 \\(f(l, r)\\) \u4ea7\u751f\u8d21\u732e\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u4ece \\(1\\) \u5230 \\(n\\) \u679a\u4e3e \\(r\\)\uff0c\u540c\u65f6\u7528\u7ebf\u6bb5\u6811\u5bf9\u6bcf\u4e2a \\(l\\) \u7ef4\u62a4 \\(f(l, r)\\) \u7684\u503c\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\)\u3002</p>"},{"location":"2019-provincial-shandong/i/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 3e5)\nusing namespace std;\n\nint n;\nlong long ans;\n\nvector&lt;int&gt; e[MAXN + 10];\n// mino\uff1a\u533a\u95f4\u6700\u5c0f\u503c\n// cnto\uff1a\u533a\u95f4\u91cc\u7b49\u4e8e\u6700\u5c0f\u503c\u7684\u5143\u7d20\u6570\u91cf\nint mino[MAXN * 4 + 10], cnto[MAXN * 4 + 10], lazy[MAXN * 4 + 10];\n\nvoid maintain(int id) {\n    int nxt = id &lt;&lt; 1;\n    mino[id] = min(mino[nxt], mino[nxt | 1]);\n    cnto[id] = 0;\n    if (mino[id] == mino[nxt]) cnto[id] += cnto[nxt];\n    if (mino[id] == mino[nxt | 1]) cnto[id] += cnto[nxt | 1];\n}\n\nvoid build(int id, int l, int r) {\n    lazy[id] = 0;\n    if (l == r) mino[id] = 0, cnto[id] = 1;\n    else {\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        build(nxt, l, mid); build(nxt | 1, mid + 1, r);\n        maintain(id);\n    }\n}\n\nvoid down(int id) {\n    int nxt = id &lt;&lt; 1;\n    mino[nxt] += lazy[id]; lazy[nxt] += lazy[id];\n    mino[nxt | 1] += lazy[id]; lazy[nxt | 1] += lazy[id];\n    lazy[id] = 0;\n}\n\n// \u7ed9\u533a\u95f4 [ql, qr] \u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a val\nvoid add(int id, int l, int r, int ql, int qr, int val) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) mino[id] += val, lazy[id] += val;\n    else {\n        if (lazy[id]) down(id);\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (ql &lt;= mid) add(nxt, l, mid, ql, qr, val);\n        if (qr &gt; mid) add(nxt | 1, mid + 1, r, ql, qr, val);\n        maintain(id);\n    }\n}\n\n// \u8be2\u95ee\u533a\u95f4 [ql, qr] \u4e2d 1 \u6709\u51e0\u4e2a\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u5143\u7d20\u90fd\u81f3\u5c11\u662f 1\nint query(int id, int l, int r, int ql, int qr) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) return mino[id] == 1 ? cnto[id] : 0;\n    else {\n        if (lazy[id]) down(id);\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        return \n            (ql &lt;= mid ? query(nxt, l, mid, ql, qr) : 0) +\n            (qr &gt; mid ? query(nxt | 1, mid + 1, r, ql, qr) : 0);\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) e[i].clear();\n    for (int i = 1; i &lt; n; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        e[x].push_back(y);\n        e[y].push_back(x);\n    }\n\n    build(1, 1, n);\n    ans = 0;\n    for (int sn = 1; sn &lt;= n; sn++) {\n        // sn \u81ea\u5df1\u662f\u4e00\u4e2a\u65b0\u7684\u8fde\u901a\u5757\n        add(1, 1, n, 1, sn, 1);\n        // fn \u5c06\u4f1a\u5bf9\u6240\u6709 l &lt;= fn \u7684 f(l, sn) \u4ea7\u751f\u8d21\u732e\n        for (int fn : e[sn]) if (fn &lt; sn) add(1, 1, n, 1, fn, -1);\n        // \u8be2\u95ee\u6709\u51e0\u4e2a l \u6ee1\u8db3 f(l, sn) == 1\n        ans += query(1, 1, n, 1, sn);\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/j/","title":"J - Triangle City","text":""},{"location":"2019-provincial-shandong/j/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73872/307 (0.7%)"},{"location":"2019-provincial-shandong/j/#_2","title":"\u9898\u89e3","text":"<p>\u5047\u8bbe\u6211\u4eec\u9009\u62e9\u4e86\u4e00\u6761\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \u4e14\u4e0d\u7ecf\u8fc7\u91cd\u590d\u8fb9\u7684\u8def\u5f84 \\(p\\)\u3002\u4ece\u56fe\u4e0a\u53bb\u6389 \\(p\\) \u7684\u6240\u6709\u8fb9\u540e\uff0c\u5269\u4e0b\u7684\u8fb9\u5c31\u662f\u6211\u4eec\u201c\u4e22\u5f03\u201d\u7684\u8fb9\uff0c\u6211\u4eec\u6765\u89c2\u5bdf\u8fd9\u4e9b\u8fb9\u7684\u7279\u5f81\u3002</p> <p>\u9996\u5148\u6ce8\u610f\u5230\u539f\u56fe\u4e2d\u6240\u6709\u8282\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570\uff0c\u800c\u53bb\u6389 \\(p\\) \u4e4b\u540e\uff0c\u53ea\u6709 \\((1, 1)\\) \u548c \\((n, n)\\) \u4e24\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u53d8\u4e3a\u5947\u6570\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u5ea6\u6570\u4ecd\u7136\u4e3a\u5076\u6570\u3002\u7531\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5ea6\u6570\u603b\u548c\u90fd\u662f\u5076\u6570\uff0c\u56e0\u6b64\u53bb\u6389 \\(p\\) \u4e4b\u540e\uff0c\\((1, 1)\\) \u548c \\((n, n)\\) \u4e0d\u80fd\u5206\u522b\u5904\u4e8e\u4e0d\u540c\u7684\u8fde\u901a\u5757\uff0c\u4e00\u5b9a\u5904\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u201c\u4e22\u5f03\u201d\u7684\u8fb9\uff0c\u81f3\u5c11\u5305\u542b\u4e00\u6761\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \u7684\u8def\u5f84\uff0c\u53ef\u80fd\u8fd8\u8981\u52a0\u4e0a\u4e00\u4e9b\u989d\u5916\u7684\u8fb9\u3002</p> <p>\u4e3a\u4e86\u8ba9 \\(p\\) \u5c3d\u91cf\u957f\uff0c\u6211\u4eec\u201c\u4e22\u5f03\u201d\u7684\u8fb9\u6743\u4e4b\u548c\u8981\u5c3d\u91cf\u5c0f\u3002\u90a3\u4e48\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \u8fb9\u6743\u4e4b\u548c\u6700\u5c0f\u7684\u8def\u5f84\u662f\u4ec0\u4e48\u5462\uff1f\u5f53\u7136\u5c31\u662f\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \u7684\u6700\u77ed\u8def\u3002\u56e0\u6b64\u6211\u4eec\u6c42\u51fa\u4e00\u6761\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \u7684\u6700\u77ed\u8def\uff0c\u5e76\u628a\u5b83\u4ece\u56fe\u4e2d\u53bb\u6389\u3002\u5269\u4e0b\u7684\u56fe\u4e2d\uff0c\u53ea\u6709 \\((1, 1)\\) \u548c \\((n, n)\\) \u4e24\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u53d8\u4e3a\u5947\u6570\uff0c\u5269\u4e0b\u7684\u8282\u70b9\u5ea6\u6570\u4ecd\u7136\u4e3a\u5076\u6570\uff0c\u56e0\u6b64\u5b58\u5728\u4e00\u6761\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \u7684\u6b27\u62c9\u8def\u5f84\uff0c\u521a\u597d\u7b26\u5408\u9898\u76ee\u7684\u8981\u6c42\u3002\u6c42\u51fa\u8fd9\u6761\u6b27\u62c9\u8def\u5f84\u5c31\u662f\u7b54\u6848\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2\\log n)\\)\u3002</p> <p>\u6709\u7684\u8bfb\u8005\u53ef\u80fd\u4f1a\u6709\u7591\u95ee\uff1a\u5982\u679c\u53bb\u6389\u6700\u77ed\u8def\u4e4b\u540e\uff0c\u56fe\u53d8\u5f97\u4e0d\u8fde\u901a\u4e86\uff0c\u90a3\u4e48\u6b27\u62c9\u8def\u5f84\u5c31\u4e0d\u5b58\u5728\u4e86\u3002\u7136\u800c\uff0c\u7531\u4e8e\u9898\u76ee\u4fdd\u8bc1\u4e86\u8fb9\u6743\u7b26\u5408\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u56e0\u6b64\u53bb\u6389\u6700\u77ed\u8def\u4e4b\u540e\uff0c\u56fe\u4e00\u5b9a\u4ecd\u7136\u662f\u8fde\u901a\u7684\u3002</p> \u8bc1\u660e <p>\u9996\u5148\u8bc1\u660e\u4ee5\u4e0b\u5f15\u7406\u3002</p> <p>\u5f15\u7406\uff1a\u5bf9\u4e8e\u4efb\u610f \\((i, j)\\)\uff0c\\((i + 1, j)\\) \u548c \\((i + 1, j + 1)\\) \u6784\u6210\u7684\u4e09\u89d2\u5f62\uff0c\u4ece \\((1, 1)\\) \u5230 \\((n, n)\\) \u7684\u6700\u77ed\u8def\u6700\u591a\u7ecf\u8fc7\u4e09\u89d2\u5f62\u7684\u4e00\u6761\u8fb9\u3002</p> <p>\u8fd9\u4e00\u5f15\u7406\u5bb9\u6613\u8bc1\u660e\u3002\u5047\u8bbe\u6700\u77ed\u8def\u9996\u5148\u7ecf\u8fc7\u4e86 \\((i, j) \\to (i + 1, j)\\)\uff0c\u53c8\u7ecf\u8fc7\u4e86 \\((i + 1, j) \\to (i + 1, j + 1)\\)\u3002\u7531\u4e8e\u8fb9\u6743\u6ee1\u8db3\u4e09\u89d2\u5f62\u4e0d\u7b49\u5f0f\uff0c\u56e0\u6b64\u76f4\u63a5\u8d70 \\((i, j) \\to (i + 1, j + 1)\\) \u8ddd\u79bb\u66f4\u77ed\u3002</p> <p>\\(\\blacksquare\\)</p> <p>\u63a5\u4e0b\u6765\u5229\u7528\u53cd\u8bc1\u6cd5\u8bc1\u660e\u53bb\u6389\u6700\u77ed\u8def\u4e4b\u540e\uff0c\u56fe\u4ecd\u7136\u662f\u8fde\u901a\u7684\u3002</p> <p>\u5047\u8bbe\u5171\u4eab\u9876\u70b9 \\(A\\) \u7684\u4e24\u4e2a\u4e09\u89d2\u5f62 \\(\\Delta ABC\\) \u548c \\(\\Delta ADE\\) \u53bb\u6389\u6700\u77ed\u8def\u4e4b\u540e\u4e0d\u8fde\u901a\u4e86\uff0c\u4e0d\u59a8\u5047\u8bbe\u70b9 \\(B\\) \u548c\u70b9 \\(D\\) \u4e0d\u8fde\u901a\u4e86\u3002\u8ba8\u8bba \\(AB\\) \u548c \\(AD\\) \u662f\u5426\u5728\u6700\u77ed\u8def\u4e0a\u3002</p> <ul> <li>\\(AB\\) \u548c \\(AD\\) \u90fd\u4e0d\u5728\u6700\u77ed\u8def\u4e0a\uff1a\u76f4\u63a5 \\(B \\to A \\to D\\)\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002</li> <li>\\(AB\\) \u548c \\(AD\\) \u90fd\u5728\u6700\u77ed\u8def\u4e0a\uff1a\u6b64\u65f6\u4e24\u4e2a\u4e09\u89d2\u5f62\u90fd\u6709\u4e00\u6761\u8fb9\u5728\u6700\u77ed\u8def\u4e0a\uff0c\u800c \\(B \\to C \\to A \\to E \\to D\\) \u4ecd\u7136\u662f\u8fde\u901a\u7684\uff0c\u5fc5\u987b\u518d\u4ece \\(BC\\)\u3001\\(AC\\)\u3001\\(AE\\)\u3001\\(DE\\) \u4e2d\u53bb\u6389\u81f3\u5c11\u4e00\u6761\u8fb9\u3002\u4f46\u8fd9\u6837\u6700\u77ed\u8def\u5c31\u4f1a\u7ecf\u8fc7\u5176\u4e2d\u4e00\u4e2a\u4e09\u89d2\u5f62\u7684\u4e24\u6761\u8fb9\uff0c\u4e0e\u5f15\u7406\u77db\u76fe\u3002</li> <li>\\(AB\\) \u5728\u6700\u77ed\u8def\u4e0a\uff0c\\(AD\\) \u4e0d\u5728\uff1a\u6b64\u65f6\u5fc5\u987b\u518d\u4ece \\(BC\\) \u548c \\(AC\\) \u4e2d\u53bb\u6389\u81f3\u5c11\u4e00\u6761\u8fb9\uff0c\u5426\u5219 \\(B \\to C \\to A \\to D\\) \u662f\u8fde\u901a\u7684\u3002\u4f46\u8fd9\u6837\u6700\u77ed\u8def\u5c31\u4f1a\u7ecf\u8fc7 \\(\\Delta ABC\\) \u7684\u4e24\u6761\u8fb9\uff0c\u4e0e\u5f15\u7406\u77db\u76fe\u3002</li> <li>\\(AD\\) \u5728\u6700\u77ed\u8def\u4e0a\uff0c\\(AB\\) \u4e0d\u5728\uff1a\u540c\u4e0a\u3002</li> </ul> <p>\\(\\blacksquare\\)</p>"},{"location":"2019-provincial-shandong/j/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 300\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\ntypedef pair&lt;long long, pii&gt; plii;\n\nint n;\nvector&lt;int&gt; ans;\n\nint etot, e[MAXN * MAXN * 3 * 2 + 10][3], p[MAXN * MAXN + 10];\nlong long dis[MAXN * MAXN + 10];\nint from[MAXN * MAXN + 10];\nbool ban[MAXN * MAXN * 3 * 2 + 10];\n\nint gao(int i, int j) { return i * n + j; }\n\nvoid adde(int sn, int fn, int val) {\n    etot++; e[etot][0] = fn; e[etot][1] = val; e[etot][2] = p[sn]; p[sn] = etot;\n    etot++; e[etot][0] = sn; e[etot][1] = val; e[etot][2] = p[fn]; p[fn] = etot;\n}\n\n// dijkstra \u6c42\u4ece (1, 1) \u5230 (n, n) \u7684\u6700\u77ed\u8def\nvoid dijkstra() {\n    memset(dis, -1, sizeof(long long) * (n * n + 3));\n    priority_queue&lt;plii&gt; pq;\n    pq.push(plii(0, pii(0, 0)));\n    while (!pq.empty()) {\n        plii tp = pq.top(); pq.pop();\n        int sn = tp.second.first;\n        if (dis[sn] &gt;= 0) continue;\n        dis[sn] = -tp.first;\n        from[sn] = tp.second.second;\n        for (int i = p[sn]; i &gt; 0; i = e[i][2]) {\n            int fn = e[i][0];\n            if (dis[fn] &gt;= 0) continue;\n            pq.push(plii(-dis[sn] - e[i][1], pii(fn, i)));\n        }\n    }\n\n    memset(ban, 0, sizeof(bool) * (etot + 3));\n    for (int sn = gao(n - 1, n - 1); sn &gt; 0; sn = e[from[sn] ^ 1][0]) ban[from[sn]] = ban[from[sn] ^ 1] = true;\n}\n\n// hierholzer \u6c42\u6b27\u62c9\u8def\u5f84\nvoid dfs(int sn) {\n    for (int i = p[sn]; i &gt; 0; i = p[sn]) {\n        if (ban[i]) { p[sn] = e[i][2]; continue; }\n        ban[i] = ban[i ^ 1] = true;\n        dfs(e[i][0]);\n        ans.push_back(e[i][0]);\n    }\n}\n\nshort dir[3][4] = {0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1};\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    etot = 1;\n    memset(p, 0, sizeof(int) * (n * n + 3));\n    long long sm = 0;\n    for (int k = 0; k &lt; 3; k++) for (int i = 0; i &lt; n - 1; i++) for (int j = 0; j &lt;= i; j++) {\n        int x = gao(i + dir[k][0], j + dir[k][1]), y = gao(i + dir[k][2], j + dir[k][3]);\n        int z; scanf(\"%d\", &amp;z);\n        adde(x, y, z);\n        sm += z;\n    }\n\n    // \u6c42\u6700\u77ed\u8def\n    dijkstra();\n    // \u6700\u957f\u8def\u5f84\u5c31\u662f\u8fb9\u6743\u4e4b\u548c\u51cf\u53bb\u6700\u77ed\u8def\u7684\u957f\u5ea6\n    printf(\"%lld\\n\", sm - dis[gao(n - 1, n - 1)]);\n\n    // \u6c42\u6b27\u62c9\u8def\u5f84\n    ans.clear(); dfs(0); reverse(ans.begin(), ans.end());\n    printf(\"%d\\n1 1\", ans.size() + 1);\n    for (int i = 0; i &lt; ans.size(); i++) printf(\" %d %d\", ans[i] / n + 1, ans[i] % n + 1);\n    printf(\"\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/k/","title":"K - Happy Equation","text":""},{"location":"2019-provincial-shandong/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738721/307 (6.8%)"},{"location":"2019-provincial-shandong/k/#_2","title":"\u9898\u89e3","text":"<p>\u901a\u8fc7\u6253\u8868\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53 \\(a\\) \u4e3a\u5947\u6570\u65f6\uff0c\u7b54\u6848\u4e3a \\(1\\)\u3002</p> \u8bc1\u660e <p>\u5f53 \\(a\\) \u4e3a\u5947\u6570\u65f6\uff0c\u53ef\u4ee5\u8bc1\u660e \\(x = a \\bmod 2^p\\) \u662f\u4e00\u4e2a\u89e3\u3002</p> <p>\u9996\u5148\uff0c\u5f53 \\(a &lt; 2^p\\) \u65f6\uff0c\\(x = a \\bmod 2^p = a\\) \u663e\u7136\u6ee1\u8db3 \\(a^x = x^a \\pmod {2^p}\\)</p> <p>\u5f53 \\(a \\ge 2^p\\) \u65f6\uff0c\u6839\u636e\u6a21\u7684\u4e58\u6cd5\u6709 \\(a^x = x^x \\pmod {2^p}\\)\uff0c\u6839\u636e \u6b27\u62c9\u5b9a\u7406 \u6709</p> \\[ x^{\\phi(2^p)} = x^{2^{p - 1}} = 1 \\pmod {2^p} \\] <p>\u5219</p> \\[ \\begin{aligned} x^a &amp;= x^{k \\times 2^p + x} \\\\ &amp;= x^{2k \\times 2^{p - 1} + x} \\\\ &amp;= (x^{2^{p - 1}})^{2k} \\times x^x \\\\ &amp;= x^x \\\\ &amp;= a^x \\pmod {2^p} \\end{aligned} \\] <p>\\(\\blacksquare\\)</p> <p>\u5f53 \\(a\\) \u4e3a\u5947\u6570\u65f6\uff0c\u82e5 \\(x\\) \u4e3a\u5076\u6570\uff0c\u5219 \\(a^x\\) \u662f\u5947\u6570\uff0c\\(x^a\\) \u662f\u5076\u6570\uff0c\u4e0d\u53ef\u80fd\u5bf9 \\(2^p\\) \u53d6\u6a21\u540e\u76f8\u7b49\u3002\u56e0\u6b64 \\(x\\) \u4e5f\u662f\u5947\u6570\u3002</p> <p>\u9996\u5148\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\u4ee5\u4e0b\u5f15\u7406\u3002</p> <p>\u5f15\u7406 1\uff1a\u4e0d\u5b58\u5728\u4e24\u4e2a\u5947\u6570 \\(x\\) \u548c \\(y\\) \u6ee1\u8db3 \\(x, y \\in [1, 2^p]\\) \u4e14 \\(x^a = y^a \\pmod {2^p}\\)\u3002</p> <p>\u5047\u8bbe\u5b58\u5728\u4e24\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u5947\u6570 \\(x\\) \u548c \\(y\\)\uff0c\u8fdb\u884c\u56e0\u5f0f\u5206\u89e3\u5f97</p> \\[ x^a - y^a = (x - y) \\times \\sum\\limits_{i = 0}^{a - 1} x^iy^{a - 1 - i} \\] <p>\\(\\sum\\) \u91cc\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5947\u6570\uff0c\u5171\u6709 \\(a\\) \u9879\uff0c\u5947\u6570\u4e2a\u5947\u6570\u9879\u52a0\u8d77\u6765\u4ecd\u7136\u662f\u5947\u6570\uff0c\u4e0d\u5b58\u5728\u8d28\u56e0\u5b50 \\(2\\)\u3002\u800c \\(x - y \\le 2^p - 1 &lt; 2^p\\)\uff0c\u56e0\u6b64\u8d28\u56e0\u5b50 \\(2\\) \u5c11\u4e8e \\(p\\) \u4e2a\u3002\u5373</p> \\[ x^a - y^a \\ne 0 \\pmod {2^p} \\] <p>\u4e0e\u5047\u8bbe\u77db\u76fe\u3002</p> <p>\\(\\blacksquare\\)</p> <p>\u4ee4 \\(v_2(t)\\) \u8868\u793a \\(t\\) \u7684\u8d28\u56e0\u6570\u5206\u89e3\u4e2d \\(2\\) \u7684\u6570\u91cf\u3002\u63a5\u4e0b\u6765\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\u4ee5\u4e0b\u5f15\u7406\u3002</p> <p>\u5f15\u7406 2\uff1a\u8bbe \\(x = y \\pmod {2^p}\\) \u4e14 \\(v_2(x) &lt; p\\) \u4e14 \\(v_2(y) &lt; p\\)\uff0c\u5219 \\(v_2(x) = v_2(y)\\)\u3002</p> <p>\u4e0d\u5931\u4e00\u822c\u6027\u5730\uff0c\u5047\u8bbe \\(v_2(x) &lt; v_2(y)\\)\uff0c\u7531\u9898\u8bbe\u6709</p> \\[ x - k_x \\times 2^{p} = y - k_y \\times 2^{p} \\] <p>\u7b49\u5f0f\u4e24\u8fb9\u540c\u65f6\u9664\u4ee5 \\(2^{v_2(x)}\\) \u5f97</p> \\[ \\frac{x}{2^{v_2(x)}} - k_x \\times 2^{p - v_2(x)} = \\frac{y}{2^{v_2(y)}} - k_y \\times 2^{p - v_2(x)} \\] <p>\\(\\frac{x}{2^{v_2(x)}}\\) \u662f\u5947\u6570\uff0c\u7531\u4e8e \\(v_2(x) &lt; p\\) \u5219 \\(k_x \\times 2^{p - v_2(x)}\\) \u662f\u5076\u6570\uff0c\u56e0\u6b64\u7b49\u5f0f\u5de6\u8fb9\u662f\u5947\u6570\uff1b\u7531\u4e8e \\(v_2(x) &lt; v_2(y)\\) \u5219 \\(\\frac{y}{2^{v_2(y)}}\\) \u662f\u5076\u6570\uff0c\u7531\u4e8e \\(v_2(x) &lt; p\\) \u5219 \\(k_y \\times 2^{p - v_2(x)}\\) \u662f\u5076\u6570\uff0c\u56e0\u6b64\u7b49\u5f0f\u53f3\u8fb9\u662f\u5076\u6570\u3002\u4ea7\u751f\u77db\u76fe\u3002</p> <p>\\(\\blacksquare\\)</p> <p>\u63a5\u4e0b\u6765\u901a\u8fc7\u53cd\u8bc1\u6cd5\u8bc1\u660e\uff1a\u4e0d\u5b58\u5728\u4e24\u4e2a\u5947\u6570 \\(x\\) \u548c \\(y\\) \u6ee1\u8db3 \\(1 \\le x &lt; y \\le 2^p\\) \u4e14 \\(a^x = x^a \\pmod {2^p}\\) \u4e14 \\(a^y = y^a \\pmod {2^p}\\)\u3002</p> <p>\u5047\u8bbe\u5b58\u5728\u4e24\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u5947\u6570 \\(x\\) \u548c \\(y\\)\uff0c\u76f8\u51cf\u5f97</p> \\[ a^y - a^x = y^a - x^a \\pmod {2^p} \\] <p>\u4ee4 \\(v_2(t)\\) \u8868\u793a \\(t\\) \u7684\u8d28\u56e0\u6570\u5206\u89e3\u4e2d \\(2\\) \u7684\u6570\u91cf\u3002\u7531\u5f15\u7406 1 \u5f97 \\(v_2(y^a - x^a) &lt; p\\)\uff0c\u5219 \\(v_2(a^y - a^x) &lt; p\\)\uff08\u5426\u5219 \\(a^y - a^x = 0 \\ne y^a - x^a \\pmod {2^p}\\)\uff09\uff0c\u7531\u5f15\u7406 2 \u5f97 \\(v_2(a^y - a^x) = v_2(y^a - x^a)\\)</p> <p>\u6839\u636e \u5347\u5e42\uff08LTE\uff09\u5b9a\u7406 \u6709</p> \\[ \\begin{aligned} v_2(a^y - a^x) &amp;= v_2(a^x(a^{y - x} - 1)) &amp; \\text{\uff08\u56e0\u5f0f\u5206\u89e3\uff09} \\\\ &amp;= v_2(a^x(a^{y - x} - 1^{y - x})) &amp; \\\\ &amp;= v_2(a^x) + v_2(a^{y - x} - 1^{y - x}) &amp; \\text{\uff08\u6839\u636e } v_2 \\text{ \u7684\u5b9a\u4e49\uff09} \\\\ &amp;= v_2(a^x) + v_2(a - 1) + v_2(a + 1) + v_2(y - x) - 1 &amp; \\text{\uff08\u5347\u5e42\u5b9a\u7406\uff09} \\end{aligned} \\] \\[ \\begin{aligned} v_2(y^a - x^a) &amp;= v_2(y - x) &amp; \\text{\uff08\u5347\u5e42\u5b9a\u7406\uff09} \\end{aligned} \\] <p>\u5373</p> \\[ v_2(a^x) + v_2(a - 1) + v_2(a + 1) - 1 = 0 \\] <p>\u56e0\u4e3a \\(a^x\\) \u662f\u5947\u6570\uff0c\u6240\u4ee5 \\(v_2(a^x) = 0\\)\u3002\u56e0\u4e3a \\(a\\) \u662f\u5947\u6570\uff0c\u5f53 \\(a \\ge 3\\) \u65f6\uff0c\\((a - 1)\\) \u548c \\((a + 1)\\) \u5747\u4e3a\u6b63\u5076\u6570\uff0c\u56e0\u6b64 \\(v_2(a - 1) \\ge 1\\)\uff0c\\(v_2(a + 1) \\ge 1\\)\u3002\u56e0\u6b64</p> \\[ v_2(a^x) + v_2(a - 1) + v_2(a + 1) - 1 \\ge 1 \\ne 0 \\] <p>\u4ea7\u751f\u77db\u76fe\u3002</p> <p>\u5f53 \\(a = 1\\) \u65f6\uff0c\u6ee1\u8db3 \\(1^x = x^1 \\pmod {2^p}\\) \u4e14 \\(x \\in [1, 2^p]\\) \u7684 \\(x\\) \u663e\u7136\u53ea\u6709 \\(x = 1\\)\u3002</p> <p>\\(\\blacksquare\\)</p> <p>\u5f53 \\(a\\) \u4e3a\u5076\u6570\u65f6\uff0c\u8bbe \\(a\\) \u7684\u8d28\u56e0\u6570\u5206\u89e3\u4e2d\u6709 \\(q\\) \u4e2a \\(2\\)\uff0c\u90a3\u4e48 \\(a^x\\) \u7684\u8d28\u56e0\u6570\u5206\u89e3\u4e2d\u5c31\u6709 \\(qx\\) \u4e2a \\(2\\)\u3002\u5f53 \\(qx \\ge p\\) \u65f6\uff0c\\(a^x \\bmod 2^p = 0\\)\u3002\u56e0\u4e3a \\(a\\) \u662f\u6b63\u5076\u6570\uff0c\u5373 \\(q \\ge 1\\)\uff0c\u6240\u4ee5\u5f53 \\(x \\ge p\\) \u65f6\u6211\u4eec\u53ea\u8981\u8003\u8651\u6ee1\u8db3 \\(x^a \\bmod 2^p = 0\\) \u7684 \\(x\\)\u3002</p> <p>\u540c\u6837\uff0c\u8bbe \\(x\\) \u7684\u8d28\u56e0\u6570\u5206\u89e3\u4e2d\u6709 \\(k\\) \u4e2a \\(2\\)\uff0c\u90a3\u4e48 \\(x^a\\) \u7684\u8d28\u56e0\u6570\u5206\u89e3\u4e2d\u5c31\u6709 \\(ka\\) \u4e2a \\(2\\)\u3002\u4e3a\u4e86\u8ba9 \\(x^a \\bmod 2^p = 0\\)\uff0c\u5fc5\u987b\u8981\u6709 \\(ka \\ge p\\)\uff0c\u5373 \\(k \\ge \\lceil\\frac{p}{a}\\rceil = k'\\)\u3002\\([p, 2^p]\\) \u4e2d\uff0c\\(2^{k'}\\) \u7684\u500d\u6570\u6709 \\((2^{p - k'} - \\lfloor\\frac{p - 1}{2^{k'}}\\rfloor)\\) \u4e2a\u3002</p> <p>\u7531\u4e8e \\(p \\le 30\\)\uff0c\\(x &lt; p\\) \u7684\u90e8\u5206\u679a\u4e3e\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(p \\log (a + p))\\)\u3002</p>"},{"location":"2019-provincial-shandong/k/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nlong long power(long long a, int b, int MOD) {\n    long long y = 1;\n    for (; b; b &gt;&gt;= 1) {\n        if (b &amp; 1) y = y * a % MOD;\n        a = a * a % MOD;\n    }\n    return y;\n}\n\nvoid solve() {\n    int a, p; scanf(\"%d%d\", &amp;a, &amp;p);\n    if (a &amp; 1) { printf(\"1\\n\"); return; }\n\n    int ans = 0;\n    for (int x = 1; x &lt; p; x++) ans += (power(a, x, 1 &lt;&lt; p) == power(x, a, 1 &lt;&lt; p) ? 1 : 0);\n    int k = (p + a - 1) / a;\n    ans += (1 &lt;&lt; (p - k)) - (p - 1) / (1 &lt;&lt; k);\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/l/","title":"L - Median","text":""},{"location":"2019-provincial-shandong/l/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738761/307 (19.9%)"},{"location":"2019-provincial-shandong/l/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c \\(a_u\\) \u4e25\u683c\u6bd4 \\(a_v\\) \u5927\uff0c\u5219\u4ece \\(u\\) \u5411 \\(v\\) \u8fde\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u5f97\u5230\u4e00\u5f20\u6709\u5411\u56fe\u3002\u6709\u5411\u56fe\u4e2d\uff0c\u5982\u679c\u70b9 \\(u\\) \u80fd\u8d70\u5230\u70b9 \\(v\\)\uff0c\u8bf4\u660e \\(u\\) \u4e25\u683c\u6bd4 \\(v\\) \u5927\uff1b\u5982\u679c \\(u\\) \u8d70\u4e0d\u5230 \\(v\\)\uff0c\\(v\\) \u4e5f\u8d70\u4e0d\u5230 \\(u\\)\uff0c\u8bf4\u660e\u4e24\u8005\u4e4b\u95f4\u6ca1\u6709\u5927\u5c0f\u9650\u5236\u3002</p> <p>\u5982\u679c\u6709\u5411\u56fe\u4e2d\u6709\u73af\u8bf4\u660e\u65e0\u89e3\uff08\u56e0\u4e3a\u4e0d\u53ef\u80fd\u81ea\u5df1\u4e25\u683c\u6bd4\u81ea\u5df1\u5927\uff09\uff0c\u5426\u5219\u8fd9\u5f20\u56fe\u662f\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe\u3002\u5bf9\u4e8e\u70b9 \\(u\\)\uff0c\u5982\u679c\u5b83\u7684\u524d\u7ee7\uff08\u80fd\u8d70\u5230\u5b83\u7684\u70b9\uff09\u6570\u91cf\u5927\u4e8e \\(\\lfloor\\frac{n}{2}\\rfloor\\)\uff0c\u8bf4\u660e\u5df2\u77e5\u4e25\u683c\u6bd4\u5b83\u5927\u7684\u6570\u5df2\u7ecf\u8d85\u8fc7\u4e86 \\(\\lfloor\\frac{n}{2}\\rfloor\\) \u4e2a\uff0c\\(u\\) \u4e0d\u53ef\u80fd\u662f\u4e2d\u4f4d\u6570\uff1b\u540c\u7406\uff0c\u5982\u679c \\(u\\) \u7684\u540e\u7ee7\uff08\u5b83\u80fd\u8d70\u5230\u7684\u70b9\uff09\u6570\u91cf\u5927\u4e8e \\(\\lfloor\\frac{n}{2}\\rfloor\\)\uff0c\u8bf4\u660e\u5df2\u77e5\u4e25\u683c\u6bd4\u5b83\u5c0f\u7684\u6570\u5df2\u7ecf\u8d85\u8fc7\u4e86 \\(\\lfloor\\frac{n}{2}\\rfloor\\) \u4e2a\uff0c\\(u\\) \u4e5f\u4e0d\u53ef\u80fd\u662f\u4e2d\u4f4d\u6570\u3002\u5269\u4e0b\u7684\u60c5\u51b5\uff0c\\(u\\) \u5c31\u53ef\u4ee5\u4f5c\u4e3a\u4e2d\u4f4d\u6570\u3002</p> <p>\u56e0\u6b64\u5229\u7528 bfs \u6216 dfs \u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u524d\u7ee7\u548c\u540e\u7ee7\u6570\u91cf\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(nm)\\)\u3002</p>"},{"location":"2019-provincial-shandong/l/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 100\nusing namespace std;\n\nint n, m;\n\nvector&lt;int&gt; e[MAXN + 10];\nint pre[MAXN + 10], suc[MAXN + 10];\nint vis[MAXN + 10];\n\n// \u627e\u51fa S \u7684\u6240\u6709\u540e\u7ee7\uff0c\u5982\u679c\u53d1\u73b0\u5305\u542b S \u7684\u73af\u8fd4\u56de false\uff0c\u5426\u5219\u8fd4\u56de true\nbool bfs(int S) {\n    queue&lt;int&gt; q;\n    q.push(S); vis[S] = S;\n    while (!q.empty()) {\n        int sn = q.front(); q.pop();\n        for (int fn : e[sn]) {\n            if (fn == S) return false;\n            if (vis[fn] == S) continue;\n            q.push(fn); vis[fn] = S;\n            // fn \u662f S \u7684\u540e\u7ee7\uff0cS \u4e5f\u662f fn \u7684\u524d\u7ee7\n            pre[fn]++; suc[S]++;\n        }\n    }\n    return true;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) e[i].clear();\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        e[x].push_back(y);\n    }\n\n    memset(pre, 0, sizeof(int) * (n + 3));\n    memset(suc, 0, sizeof(int) * (n + 3));\n    memset(vis, 0, sizeof(int) * (n + 3));\n    for (int i = 1; i &lt;= n; i++) if (!bfs(i)) {\n        // \u6709\u73af\uff0c\u65e0\u89e3\n        for (int j = 1; j &lt;= n; j++) printf(\"0\");\n        printf(\"\\n\");\n        return;\n    }\n\n    for (int i = 1; i &lt;= n; i++)\n        // \u524d\u540e\u7ee7\u90fd\u4e0d\u8d85\u8fc7 floor(n / 2)\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u4e2d\u4f4d\u6570\n        if (pre[i] &lt;= n / 2 &amp;&amp; suc[i] &lt;= n / 2) printf(\"1\");\n        else printf(\"0\");\n    printf(\"\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-shandong/m/","title":"M - Sekiro","text":""},{"location":"2019-provincial-shandong/m/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042019 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387291/307 (94.8%)"},{"location":"2019-provincial-shandong/m/#_2","title":"\u9898\u89e3","text":"<p>\u9898\u76ee\u6c42\u7684\u662f \\(n\\) \u8fde\u7eed\u8fdb\u884c \\(k\\) \u6b21\u9664\u4ee5 \\(2\\) \u4e0a\u53d6\u6574\u7684\u7ed3\u679c\u3002</p> <p>\u5982\u679c \\(n = 0\\)\uff0c\u663e\u7136\u7b54\u6848\u5c31\u662f \\(0\\)\u3002\u5426\u5219 \\(n\\) \u5c06\u5728 \\(\\mathcal{O}(\\log n)\\) \u6b21\u64cd\u4f5c\u4e4b\u540e\u53d8\u6210 \\(1\\)\uff0c\u56e0\u6b64\u6700\u591a\u53ea\u8981\u6a21\u62df \\(\\mathcal{O}(\\log n)\\) \u6b21\u64cd\u4f5c\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\log n)\\)\u3002</p>"},{"location":"2019-provincial-shandong/m/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid solve() {\n    int n, K; scanf(\"%d%d\", &amp;n, &amp;K);\n    if (n == 0) printf(\"0\\n\");\n    else {\n        while (K &gt; 0 &amp;&amp; n &gt; 1) K--, n = (n + 1) / 2;\n        printf(\"%d\\n\", n);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2019-provincial-zhejiang/","title":"2019 \u6d59\u6c5f\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2019-provincial-zhejiang/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2019/04/27 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board \u5728\u7ebf\u7ec3\u4e60ZOJ 4100 ~ 4112 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2019-provincial-zhejiang/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 70, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 11, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 186, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 280, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 286, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 221, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 242, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 82, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 59, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 35, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 21, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 44, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 84, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 25, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 24, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 21, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 20, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2019-provincial-zhejiang/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2019-school-zju/","title":"2019 \u6d59\u6c5f\u5927\u5b66\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2019-school-zju/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2019/04/14 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board \u5728\u7ebf\u7ec3\u4e60ZOJ 4090 ~ 4099 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2019-school-zju/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 70, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 79, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 52, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 61, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 42, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 50, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 16, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 133, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 93, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 69, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 86, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 25, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 23, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 114, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 92, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 11, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 42, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 15, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 19, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 24, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 21, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2019-school-zju/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2020-icpc-nanjing/","title":"2020 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9","text":""},{"location":"2020-icpc-nanjing/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2020/12/20 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ | \u6d1b\u8c37 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2020-icpc-nanjing/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 322, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 240, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 60, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 29, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 14, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 544, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 481, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 72, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 62, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 140, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 124, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 131, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 42, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 29, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2020-icpc-nanjing/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2020-icpc-nanjing/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>zhihu</li> </ul>"},{"location":"2021-icpc-macau/","title":"2021 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u6fb3\u95e8\u7ad9","text":""},{"location":"2021-icpc-macau/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2022/04/03 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ | \u6d1b\u8c37 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2021-icpc-macau/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 100, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 51, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 37, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 15, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 21, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 81, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 38, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 20, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 95, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 43, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 20, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 35, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 19, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 21, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 12, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2021-icpc-macau/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2021-icpc-macau/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2021-icpc-nanjing/","title":"2021 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9","text":""},{"location":"2021-icpc-nanjing/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2021/12/04 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board | pdf \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2021-icpc-nanjing/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 637, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 43, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 427, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 27, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 172, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 28, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 14, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 277, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 29, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 66, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 605, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 40, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 31, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 173, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 153, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 112, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 92, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 44, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 17, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2021-icpc-nanjing/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2021-icpc-nanjing/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>zhihu</li> </ul>"},{"location":"2021-provincial-sichuan/","title":"2021 \u56db\u5ddd\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2021-provincial-sichuan/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2021/05/30 \u7ade\u8d5b\u8bd5\u9898English \u7ade\u8d5b\u699c\u5355SUA Board | pdf \u5728\u7ebf\u7ec3\u4e60Codeforces Gym \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2021-provincial-sichuan/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 178, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 47, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 107, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 41, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 128, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 42, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 163, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 45, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 17, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 136, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 44, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 44, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 20, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 96, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 39, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 11, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 19, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 46, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 17, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2021-provincial-sichuan/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2021-provincial-sichuan/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2022-icpc-nanjing/","title":"2022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9","text":""},{"location":"2022-icpc-nanjing/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2022/12/18 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2022-icpc-nanjing/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 224, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 86, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 128, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 28, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 372, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 34, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 416, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 48, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 120, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 44, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 121, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 19, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 98, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 59, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 29, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 40, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2022-icpc-nanjing/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2022-icpc-nanjing/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2022-icpc-nanjing/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>A - \u505c\u505c\uff0c\u6628\u65e5\u8bf7\u4e0d\u8981\u518d\u91cd\u73b0</li> <li>B - \u7d22\u9053</li> <li>C - \u667a\u5de7\u7075\u8548\u5927\u7ade\u9010</li> <li>D - \u804a\u5929\u7a0b\u5e8f</li> <li>E - \u6811\u7684\u67d3\u8272</li> <li>F - \u4e09\u89d2\u5f62</li> <li>G - \u90aa\u6076\u94ed\u523b</li> <li>H - \u5de5\u5382\u91cd\u73b0</li> <li>I - \u5b8c\u7f8e\u56de\u6587</li> <li>J - \u5b8c\u7f8e\u5339\u914d</li> <li>K - \u5806\u91cc\u7684 NaN</li> <li>L - \u547d\u9898\u4f5c\u6587</li> <li>M - \u6e05\u7a7a\u6c34\u7bb1</li> </ul>"},{"location":"2022-icpc-nanjing/a/","title":"A - \u505c\u505c\uff0c\u6628\u65e5\u8bf7\u4e0d\u8981\u518d\u91cd\u73b0","text":""},{"location":"2022-icpc-nanjing/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387237/465 (51.0%)"},{"location":"2022-icpc-nanjing/a/#_2","title":"\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/a/#_3","title":"\u7b80\u5316\u95ee\u9898","text":"<p>\u9996\u5148\u8003\u8651\u4e00\u4e2a\u7b80\u5355\u4e00\u70b9\u7684\u95ee\u9898\uff1a\u5982\u679c\u6ca1\u6709\u6d1e\uff0c\u5e94\u7528\u64cd\u4f5c\u5e8f\u5217\u4e4b\u540e\uff0c\u7f51\u683c\u4e0a\u4f1a\u5269\u4e0b\u591a\u5c11\u888b\u9f20\uff1f</p> <p>\u5982\u679c\u6bcf\u4e00\u6b65\u6a21\u62df\u6240\u6709\u888b\u9f20\u7684\u79fb\u52a8\uff0c\u590d\u6742\u5ea6\u5c06\u8fbe\u5230 \\(\\mathcal{O}(|s|nm)\\)\uff0c\u663e\u7136\u4e0d\u53ef\u63a5\u53d7\u3002\u6211\u4eec\u4e0d\u59a8\u53cd\u8fc7\u6765\u60f3\uff1a\u6240\u6709\u888b\u9f20\u90fd\u5411\u4e0a\u79fb\u52a8\u4e00\u6b65\uff0c\u76f8\u5f53\u4e8e\u4e0a\u4e0b\u8fb9\u754c\u5411\u4e0b\u79fb\u52a8\u4e00\u6b65\uff1b\u6240\u6709\u888b\u9f20\u90fd\u5411\u5de6\u79fb\u52a8\u4e00\u6b65\uff0c\u76f8\u5f53\u4e8e\u5de6\u53f3\u8fb9\u754c\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u6bcf\u4e00\u6b65\u4e0d\u6a21\u62df\u6240\u6709\u888b\u9f20\u7684\u79fb\u52a8\uff0c\u800c\u662f\u6a21\u62df\u8fb9\u754c\u7684\u79fb\u52a8\u3002\u7531\u4e8e\u5728\u4efb\u610f\u4e00\u6b65\u6389\u51fa\u8fb9\u754c\u7684\u888b\u9f20\u90fd\u4f1a\u88ab\u79fb\u9664\uff0c\u6211\u4eec\u7ef4\u62a4\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li>\\(u\\) \u8868\u793a\u4e0a\u8fb9\u754c\uff08\u4e00\u5f00\u59cb\u5728\u7b2c \\(1\\) \u884c\uff09\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u6700\u5927\u79fb\u52a8\u5230\u4e86\u54ea\u4e00\u884c\u3002</li> <li>\\(d\\) \u8868\u793a\u4e0b\u8fb9\u754c\uff08\u4e00\u5f00\u59cb\u5728\u7b2c \\(n\\) \u884c\uff09\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u6700\u5c0f\u79fb\u52a8\u5230\u4e86\u54ea\u4e00\u884c\u3002</li> <li>\\(l\\) \u8868\u793a\u5de6\u8fb9\u754c\uff08\u4e00\u5f00\u59cb\u5728\u7b2c \\(1\\) \u5217\uff09\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u6700\u5927\u79fb\u52a8\u5230\u4e86\u54ea\u4e00\u5217\u3002</li> <li>\\(r\\) \u8868\u793a\u53f3\u8fb9\u754c\uff08\u4e00\u5f00\u59cb\u5728\u7b2c \\(m\\) \u5217\uff09\u5728\u79fb\u52a8\u8fc7\u7a0b\u4e2d\u6700\u5c0f\u79fb\u52a8\u5230\u4e86\u54ea\u4e00\u5217\u3002</li> </ul> <p>\u53ea\u6709\u521d\u59cb\u4f4d\u7f6e\u6ee1\u8db3 \\(u \\le i \\le d\\) \u4e14 \\(l \\le j \\le r\\) \u7684\u888b\u9f20\u624d\u4f1a\u88ab\u4fdd\u7559\u3002\u56e0\u6b64\u8fd9\u4e2a\u7b80\u5355\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f \\((d - u + 1) \\times (r - l + 1)\\)\u3002\u5f53\u7136\u8981\u7279\u5224\u5982\u679c \\(u &gt; d\\) \u6216 \\(l &gt; r\\) \u5219\u6ca1\u6709\u4efb\u4f55\u888b\u9f20\u5b58\u7559\u3002</p>"},{"location":"2022-icpc-nanjing/a/#_4","title":"\u539f\u95ee\u9898","text":"<p>\u73b0\u5728\u6211\u4eec\u56de\u5230\u539f\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u76f8\u4f3c\u7684\u601d\u8def\u6a21\u62df\u6d1e\u7684\u53cd\u5411\u79fb\u52a8\u3002\u6211\u4eec\u8bb0\u5f55\u6d1e\u6bcf\u4e00\u6b65\u76f8\u5bf9\u4e8e\u521d\u59cb\u5750\u6807\u7684\u504f\u79fb\u91cf \\((i, j)\\) \u5e76\u53bb\u91cd\uff0c\u7531\u4e8e\u6d1e\u7684\u521d\u59cb\u5750\u6807\u662f \\((i_h, j_h)\\)\uff0c\u56e0\u6b64\u5982\u679c \\(u \\le i_h + i \\le d\\) \u4ee5\u53ca \\(l \\le j_h + j \\le r\\)\uff0c\u90a3\u4e48\u4f4d\u4e8e \\((i_h + i, j_h + j)\\) \u7684\u888b\u9f20\u5c06\u989d\u5916\u88ab\u53bb\u9664\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u679a\u4e3e \\(i_h\\) \u548c \\(j_h\\)\uff0c\u5e76\u8ba1\u7b97\u6d1e\u7ecf\u8fc7\u7684\u504f\u79fb\u91cf\u4e2d\u662f\u5426\u6070\u6709 \\((k - (d - u + 1) \\times (r - l + 1))\\) \u4e2a\u504f\u79fb\u91cf\u6ee1\u8db3 \\(u - i_h \\le i \\le d - i_h\\) \u4ee5\u53ca \\(l - j_h \\le j \\le r - j_h\\)\u3002\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u524d\u7f00\u548c\u95ee\u9898\uff0c\u5728\u679a\u4e3e\u5750\u6807\u4e4b\u524d\u9884\u5904\u7406\u524d\u7f00\u548c\u5373\u53ef\u3002</p> <p>\u60a8\u53ef\u80fd\u8fd8\u6709\u8fd9\u6837\u7684\u7591\u95ee\uff1a\u6d1e\u79fb\u52a8\u7684\u6b21\u6570\u81f3\u591a\u4e3a \\(|s|\\) \u6b21\uff0c\u53ef\u80fd\u7684\u504f\u79fb\u91cf\u8303\u56f4\u662f\u5426\u8fbe\u5230\u4e86 \\(\\mathcal{O}(|s|^2)\\) \u7684\u7ea7\u522b\uff0c\u65e0\u6cd5\u7b80\u5355\u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u89e3\u51b3\uff1f\u5176\u5b9e\u4e0d\u7136\uff0c\u56e0\u4e3a\u6d1e\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u8fb9\u754c\u4e5f\u5728\u79fb\u52a8\u3002\u5982\u679c\u6d1e\u7684\u884c\u5750\u6807\u7684\u7edd\u5bf9\u503c\u8d85\u8fc7\u4e86 \\(n\\)\uff0c\u90a3\u4e48\u5c06\u51fa\u73b0 \\(u &gt; d\\)\uff1b\u5982\u679c\u6d1e\u7684\u5217\u5750\u6807\u7684\u7edd\u5bf9\u503c\u8d85\u8fc7\u4e86 \\(m\\)\uff0c\u90a3\u4e48\u5c06\u51fa\u73b0 \\(l &gt; r\\)\u3002\u53ea\u8981\u4e4b\u524d\u7279\u5224\u4e86\u8fd9\u4e9b\u60c5\u51b5\uff0c\u6d1e\u7684\u504f\u79fb\u91cf\u8303\u56f4\u5c06\u53d7\u5230\u9650\u5236\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e8c\u7ef4\u524d\u7f00\u548c\u5904\u7406\u3002</p> <p>\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathcal{O}(|s| + nm)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/a/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 1000\n#define MAXM 1000\n#define MAXS ((int) 1e6)\nusing namespace std;\n\nint n, m, K, ans;\nchar s[MAXS + 10];\n\nint f[MAXN * 2 + 10][MAXM * 2 + 10];\n\nvoid solve() {\n    scanf(\"%d%d%d%s\", &amp;n, &amp;m, &amp;K, s + 1);\n    // \u7ef4\u62a4\u8fb9\u754c\u79fb\u52a8\u7684\u6700\u503c\n    int U = 1, D = n, L = 1, R = m;\n    for (int i = 1, u = 1, d = n, l = 1, r = m; s[i]; i++) {\n        if (s[i] == 'U') u++, d++;\n        else if (s[i] == 'D') u--, d--;\n        else if (s[i] == 'L') l++, r++;\n        else l--, r--;\n        U = max(U, u);\n        D = min(D, d);\n        L = max(L, l);\n        R = min(R, r);\n    }\n\n    // \u7279\u5224\u6ca1\u6709\u4efb\u4f55\u888b\u9f20\u5b58\u7559\u7684\u60c5\u51b5\n    if (U &gt; D || L &gt; R) {\n        if (K == 0) printf(\"%d\\n\", n * m);\n        else printf(\"0\\n\");\n        return;\n    }\n\n    // \u8ba1\u7b97\u8fd8\u5dee\u51e0\u53ea\u888b\u9f20\u9700\u8981\u7528\u6d1e\u89e3\u51b3\n    int delta = (D - U + 1) * (R - L + 1) - K;\n    if (delta &lt; 0) {\n        printf(\"0\\n\");\n        return;\n    }\n\n    // \u8bb0\u5f55\u6d1e\u7684\u504f\u79fb\u91cf\n    // \u504f\u79fb\u91cf\u8303\u56f4\u662f [-n, n] \u4ee5\u53ca [-m, m]\uff0c\u56e0\u6b64\u90fd\u52a0\u4e0a n + 1 \u548c m + 1 \u53d8\u6210\u975e\u8d1f\u6570\n    for (int i = 0; i &lt;= n * 2 + 5; i++) for (int j = 0; j &lt;= m * 2 + 5; j++) f[i][j] = 0;\n    int BIAS_R = n + 1, BIAS_C = m + 1;\n    f[BIAS_R][BIAS_C] = 1;\n    for (int i = 1, r = BIAS_R, c = BIAS_C; s[i]; i++) {\n        if (s[i] == 'U') r++;\n        else if (s[i] == 'D') r--;\n        else if (s[i] == 'L') c++;\n        else if (s[i] == 'R') c--;\n        f[r][c] = 1;\n    }\n    // \u4e8c\u7ef4\u524d\u7f00\u548c\n    for (int i = 1; i &lt;= n * 2 + 5; i++) for (int j = 1; j &lt;= m * 2 + 5; j++) f[i][j] += f[i][j - 1];\n    for (int i = 1; i &lt;= n * 2 + 5; i++) for (int j = 1; j &lt;= m * 2 + 5; j++) f[i][j] += f[i - 1][j];\n\n    ans = 0;\n    // \u679a\u4e3e\u6d1e\u7684\u521d\u59cb\u5750\u6807\n    for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) {\n        int biasR = BIAS_R - i, biasC = BIAS_C - j;\n        int t = f[D + biasR][R + biasC] - f[U - 1 + biasR][R + biasC] - f[D + biasR][L - 1 + biasC] + f[U - 1 + biasR][L - 1 + biasC];\n        if (t == delta) ans++;\n    }\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/b/","title":"B - \u7d22\u9053","text":""},{"location":"2022-icpc-nanjing/b/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738793/465 (20.0%)"},{"location":"2022-icpc-nanjing/b/#_2","title":"\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/b/#_3","title":"\u5047\u8bbe\u6ca1\u6709\u4fee\u6539","text":"<p>\u9996\u5148\u8003\u8651\u6ca1\u6709\u4fee\u6539\u7684\u65f6\u5019\u5e94\u8be5\u600e\u4e48\u505a\u3002\u7ef4\u62a4 \\(f(i)\\) \u8868\u793a\u53ea\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u4ece\u4f4d\u4e8e \\(0\\) \u7684\u7d22\u9053\u7ad9\u51fa\u53d1\uff0c\u628a\u652f\u6491\u5854\u67b6\u5230\u4e86\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u603b\u6210\u672c\u3002\u5bb9\u6613\u5f97\u51fa\u4ee5\u4e0b\u8f6c\u79fb\u65b9\u7a0b\uff1a</p> \\[ f(i) = \\min\\limits_j f(j) + a_i \\] <p>\u5176\u4e2d \\(j\\) \u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ul> <li>\\(0 \\le j &lt; i\\)\u3002</li> <li>\\(i - j \\le k\\)\u3002</li> <li>\\([j + 1, i - 1]\\) \u7684\u8303\u56f4\u5185\u6ca1\u6709\u5fc5\u987b\u67b6\u8bbe\u7684\u652f\u6491\u5854\u3002</li> </ul> <p>\u53ef\u4ee5\u628a\u4f4d\u4e8e \\((n + 1)\\) \u7684\u7d22\u9053\u7ad9\u770b\u6210\u4e00\u4e2a\u6210\u672c\u4e3a \\(0\\) \u4e14\u5fc5\u987b\u67b6\u8bbe\u7684\u652f\u6491\u5854\uff0c\u7b54\u6848\u5373\u4e3a \\(f(n + 1)\\)\uff0c\u521d\u503c \\(f(0) = 0\\)\u3002</p> <p>\u76f4\u63a5\u5b9e\u73b0\u8be5\u8f6c\u79fb\u65b9\u7a0b\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(nk)\\) \u7684\uff0c\u4f46\u6211\u4eec\u5f88\u5bb9\u6613\u5229\u7528\u5355\u8c03\u961f\u5217\u76f4\u63a5\u9009\u51fa\u6700\u4f18\u7684 \\(\\min\\limits_j f(j)\\)\uff0c\u5c06\u590d\u6742\u5ea6\u964d\u81f3 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/b/#_4","title":"\u5982\u4f55\u5904\u7406\u4fee\u6539","text":"<p>\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u5904\u7406\u4fee\u6539\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4f4d\u7f6e \\(p\\) \u7684\u4fee\u6539\uff0c\u5c06\u4f1a\u5f71\u54cd\u6240\u6709 \\(p \\le i \\le n + 1\\) \u7684 \\(f(i)\\) \u503c\u3002\u5982\u679c\u76f4\u63a5\u91cd\u7b97\u6240\u6709\u53d7\u5f71\u54cd\u7684 \\(f(i)\\) \u503c\uff0c\u603b\u4f53\u590d\u6742\u5ea6\u5c06\u53d8\u4e3a \\(\\mathcal{O}(nq)\\)\u3002\u80fd\u5426\u51cf\u5c11\u91cd\u7b97\u7684\u8303\u56f4\u5462\uff1f</p> <p>\u6211\u4eec\u53ef\u4ee5\u6ce8\u610f\u5230\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\uff1a</p> <p>\u4efb\u610f\u4e00\u6bb5\u957f\u5ea6\u4e3a \\(k\\) \u7684\u8fde\u7eed\u4f4d\u7f6e\u4e2d\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u4f4d\u7f6e\u88ab\u5305\u542b\u5728\u6700\u7ec8\u65b9\u6848\u91cc\u3002</p> <p>\u8fd9\u4e2a\u91cd\u8981\u6027\u8d28\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u5982\u679c\u5b58\u5728\u4e00\u6bb5\u957f\u5ea6\u4e3a \\(k\\) \u7684\u8fde\u7eed\u4f4d\u7f6e\u90fd\u6ca1\u6709\u67b6\u8bbe\u652f\u6491\u5854\uff0c\u90a3\u4e48\u5206\u522b\u4f4d\u4e8e\u8fd9\u4e00\u533a\u95f4\u4e24\u4fa7\u7684\u652f\u6491\u5854\u4e4b\u95f4\u7684\u8ddd\u79bb\u5c06\u5927\u4e8e \\(k\\)\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u8fd8\u77e5\u9053 \\(g(i)\\) \u8868\u793a\u53ea\u8003\u8651\u540e \\((n - i + 1)\\) \u4e2a\u4f4d\u7f6e\uff0c\u4f4d\u7f6e \\(i\\) \u5df2\u7ecf\u67b6\u8bbe\u4e86\u652f\u6491\u5854\uff08\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u6210\u672c\u770b\u4f5c \\(0\\)\uff09\uff0c\u5e76\u4e00\u8def\u67b6\u8bbe\u5230\u4f4d\u4e8e \\((n + 1)\\) \u7684\u7d22\u9053\u7ad9\u7684\u6700\u5c0f\u603b\u6210\u672c\u3002\u5982\u679c\u4f4d\u7f6e \\(i\\) \u88ab\u5305\u542b\u5728\u6700\u7ec8\u65b9\u6848\u91cc\uff0c\u90a3\u4e48\u6700\u7ec8\u65b9\u6848\u7684\u603b\u6210\u672c\u5c31\u662f \\(f(i) + g(i)\\)\u3002</p> <p>\u66f4\u5999\u7684\u662f\uff0c\u5bf9\u4e8e\u6240\u6709 \\(p \\le i \\le n + 1\\)\uff0c\\(g(i)\\) \u7684\u503c\u4e0d\u53d7\u4f4d\u7f6e \\(p\\) \u4fee\u6539\u7684\u5f71\u54cd\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u6240\u6709\u4fee\u6539\u5f00\u59cb\u524d\u9884\u5904\u7406 \\(g\\) \u7684\u503c\u3002\u56e0\u6b64\u5bf9\u4e8e\u4f4d\u7f6e \\(p\\) \u7684\u4fee\u6539\uff0c\u6211\u4eec\u8003\u8651 \\([p, \\min(p + k - 1, n + 1)]\\) \u8fd9\u4e00\u8fde\u7eed\u533a\u95f4\uff0c\u53ea\u91cd\u7b97 \\(p \\le i \\le \\min(p + k - 1, n + 1)\\) \u7684 \\(f(i)\\) \u503c\uff0c\u5e76\u679a\u4e3e\u54ea\u4e2a\u4f4d\u7f6e\u88ab\u5305\u542b\u5728\u6700\u7ec8\u65b9\u6848\u91cc\u3002\u7b54\u6848\u5c31\u662f \\(\\min\\limits_{i=p}^{\\min(p + k - 1, n + 1)} f(i) + g(i)\\)\u3002</p> <p>\u6211\u4eec\u8981\u91cd\u7b97\u7684\u7b2c\u4e00\u4e2a\u503c\u662f \\(f(p)\\)\u3002\u7531\u4e8e \\(f(p)\\) \u662f\u7531 \\(f(p - k)\\) \u5230 \\(f(p - 1)\\) \u8f6c\u79fb\u6765\u7684\uff0c\u56e0\u6b64\u5728\u91cd\u7b97\u4e4b\u524d\uff0c\u8981\u5148\u628a\u8fd9 \\(k\\) \u4e2a\u503c\u653e\u8fdb\u5355\u8c03\u961f\u5217\u3002</p> <p>\u6bcf\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(k)\\)\uff0c\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathcal{O}(n + kq)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/b/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 5e5)\n#define INF ((long long) 1e18)\nusing namespace std;\ntypedef pair&lt;long long, int&gt; pli;\n\nint n, m, K, A[MAXN + 10];\nchar must[MAXN + 10];\n\nlong long f[MAXN + 10], g[MAXN + 10], h[MAXN + 10];\n\n// \u8ba1\u7b97\u65e0\u4fee\u6539\u65f6\u7684 dp \u503c\uff0c\u7ed3\u679c\u5b58\u5728 f \u91cc\nvoid dp(long long *f) {\n    deque&lt;pli&gt; dq;\n    f[0] = 0;\n    dq.push_back(pli(0, 0));\n    for (int i = 1; i &lt;= n + 1; i++) {\n        while (dq.front().second &lt; i - K) dq.pop_front();\n        f[i] = dq.front().first + A[i];\n        if (must[i] == '1') dq.clear();\n        while (!dq.empty() &amp;&amp; dq.back().first &gt;= f[i]) dq.pop_back();\n        dq.push_back(pli(f[i], i));\n    }\n}\n\n// \u8ba1\u7b97\u628a a[x] \u6539\u6210 y \u7684\u7b54\u6848\nlong long dp2(int x, int y) {\n    int old = A[x]; A[x] = y;\n\n    long long ret = INF;\n    deque&lt;pli&gt; dq;\n    // \u7b2c\u4e00\u4e2a\u8981\u91cd\u7b97\u7684\u503c\u662f f[x]\n    // \u5b83\u7531 f[x - K] ~ f[x - 1] \u8f6c\u79fb\u8fc7\u6765\n    // \u56e0\u6b64\u5148\u628a\u8fd9\u4e9b\u6570\u653e\u8fdb\u5355\u8c03\u961f\u5217\u91cc\n    for (int i = K; i &gt; 0; i--) if (x - i &gt;= 0) {\n        if (must[x - i] == '1') dq.clear();\n        while (!dq.empty() &amp;&amp; dq.back().first &gt;= f[x - i]) dq.pop_back();\n        dq.push_back(pli(f[x - i], x - i));\n    }\n    // \u91cd\u7b97 f[x] ~ f[x + K - 1]\n    for (int i = x; i &lt; x + K &amp;&amp; i &lt;= n + 1; i++) {\n        while (dq.front().second &lt; i - K) dq.pop_front();\n        h[i] = dq.front().first + A[i];\n        // \u8ba1\u7b97\u6bcf\u4e2a\u4e2d\u95f4\u70b9\u7684\u7b54\u6848\n        ret = min(ret, h[i] + g[i]);\n        if (must[i] == '1') dq.clear();\n        while (!dq.empty() &amp;&amp; dq.back().first &gt;= h[i]) dq.pop_back();\n        dq.push_back(pli(h[i], i));\n    }\n\n    A[x] = old;\n    return ret;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;K);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n    A[n + 1] = 0;\n    scanf(\"%s\", must + 1);\n\n    // \u9884\u5904\u7406 f\n    dp(f);\n\n    // \u9884\u5904\u7406 g\n    // \u540e\u7f00\u7684 dp \u503c\uff0c\u5176\u5b9e\u5c31\u662f\u628a\u6574\u4e2a\u5e8f\u5217\u5012\u8fc7\u6765\uff0c\u7136\u540e\u7b97\u524d\u7f00\u7684 dp \u503c\n    reverse(A + 1, A + n + 1);\n    reverse(must + 1, must + n + 1);\n    dp(g);\n    reverse(A + 1, A + n + 1);\n    reverse(must + 1, must + n + 1);\n    reverse(g, g + n + 2);\n    for (int i = 1; i &lt;= n; i++) g[i] -= A[i];\n\n    // \u5904\u7406\u8be2\u95ee\n    int q; scanf(\"%d\", &amp;q);\n    while (q--) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        printf(\"%lld\\n\", dp2(x, y));\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/c/","title":"C - \u667a\u5de7\u7075\u8548\u5927\u7ade\u9010","text":""},{"location":"2022-icpc-nanjing/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73871/465 (0.2%)"},{"location":"2022-icpc-nanjing/c/#_2","title":"\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/c/#_3","title":"\u8d2a\u5fc3\u7b56\u7565","text":"<p>\u76f4\u63a5\u505a\u6bd4\u8f83\u96be\u4ee5\u5904\u7406\u76d6\u7ae0\u64cd\u4f5c\uff0c\u8003\u8651\u65f6\u5149\u5012\u6d41\uff0c\u4ece\u76ee\u6807\u72b6\u6001\u5f00\u59cb\u4e00\u6b65\u6b65\u64a4\u9500\u64cd\u4f5c\u5f97\u5230\u80fd\u5339\u914d\u521d\u59cb\u72b6\u6001\u7684\u77e9\u9635\u3002\u4ea4\u6362\u64cd\u4f5c\u4e0e\u65cb\u8f6c\u64cd\u4f5c\u5747\u53ef\u9006\uff0c\u5bf9\u4e8e\u76d6\u7ae0\u64cd\u4f5c\uff0c\u9006\u64cd\u4f5c\u76f8\u5f53\u4e8e\u5c06\u4e00\u4e2a\u80fd\u4e0e\u8981\u76d6\u7684\u7ae0\u5339\u914d\u4e0a\u7684\u5b50\u77e9\u9635\u5168\u53d8\u4e3a\u901a\u914d\u7b26\u3002</p> <p>\u7531\u4e8e\u5b58\u5728\u4ea4\u6362\u64cd\u4f5c\uff0c\u5b57\u7b26\u7684\u4f4d\u7f6e\u51e0\u4e4e\u662f\u65e0\u5173\u7d27\u8981\u7684\uff0c\u53ea\u9700\u8981\u5bf9\u6bcf\u79cd\u5b57\u7b26\u5224\u65ad\u4e2a\u6570\u5c31\u80fd\u77e5\u9053\u4e00\u4e2a\u7ae0\u662f\u5426\u53ef\u80fd\u76d6\u4e0b\u53bb\u3002\u5c06\u4e00\u4e2a\u5b57\u7b26\u53d8\u4e3a\u901a\u914d\u7b26\u540e\uff0c\u4f1a\u5c06\u539f\u6765\u4e0d\u80fd\u76d6\u7684\u7ae0\u53d8\u5f97\u80fd\u76d6\uff08\u800c\u4e0d\u4f1a\u5012\u8fc7\u6765\u4f7f\u539f\u6765\u80fd\u76d6\u7684\u7ae0\u53d8\u5f97\u4e0d\u80fd\u76d6\uff09\uff0c\u56e0\u6b64\u901a\u914d\u7b26\u8d8a\u591a\u8d8a\u597d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u53ef\u4ee5\u9075\u5faa\u201c\u80fd\u76d6\u7684\u7ae0\u73b0\u5728\u5c31\u76d6\u201d\u7684\u8d2a\u5fc3\u7b56\u7565\u3002\u5982\u679c\u4fdd\u8bc1\u6bcf\u6b21\u76d6\u7ae0\u64cd\u4f5c\u81f3\u5c11\u65b0\u589e\u4e00\u4e2a\u901a\u914d\u7b26\uff0c\u76d6\u7ae0\u6b21\u6570\u5c31\u4e0d\u4f1a\u8d85\u8fc7 \\(nm\\) \u6b21\uff0c\u7b26\u5408 \\(400\\) \u6b21\u76d6\u7ae0\u64cd\u4f5c\u7684\u9650\u5236\u3002</p> <p>\u4e0d\u59a8\u9009\u5b9a\u76d6\u7ae0\u7684\u4f4d\u7f6e\u5c31\u662f\u77e9\u9635\u5de6\u4e0a\u89d2\u3002\u4e00\u5f00\u59cb\u9009\u5b9a\u4e00\u4e2a\u80fd\u76d6\u7684\u7ae0\u540e\uff0c\u901a\u8fc7\u4ea4\u6362\u64cd\u4f5c\u4f7f\u5f97\u5de6\u4e0a\u89d2\u77e9\u9635\u4e0e\u7ae0\u5339\u914d\u4e0a\uff0c\u4f7f\u7528\u76d6\u7ae0\u64cd\u4f5c\u5c06\u8fd9\u4e9b\u4f4d\u7f6e\u5168\u53d8\u6210\u901a\u914d\u7b26\u3002\u63a5\u4e0b\u6765\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u7ae0\u91cc\u6709\u7684\u5b57\u7b26\u5230\u5de6\u4e0a\u89d2\u77e9\u9635\u5bf9\u5e94\u4f4d\u7f6e\uff0c\u518d\u8fdb\u884c\u76d6\u7ae0\u64cd\u4f5c\u5c31\u80fd\u65b0\u589e\u4e00\u4e2a\u901a\u914d\u7b26\u3002\u4e00\u76f4\u76d6\u540c\u4e00\u4e2a\u7ae0\uff0c\u76f4\u5230\u65e0\u6cd5\u518d\u65b0\u589e\u66f4\u591a\u901a\u914d\u7b26\uff0c\u8fd9\u4e2a\u7ae0\u4e4b\u540e\u4e5f\u90fd\u7528\u4e0d\u4e0a\u4e86\u3002\u63a5\u4e0b\u6765\u627e\u5230\u4e0b\u4e00\u4e2a\u80fd\u76d6\u7684\u7ae0\uff0c\u91cd\u590d\u4ee5\u4e0a\u64cd\u4f5c\u3002</p> <p>\u5f53\u6240\u6709\u7684\u7ae0\u90fd\u5df2\u7ecf\u7528\u4e0d\u4e0a\u65f6\uff0c\u68c0\u67e5\u5f53\u524d\u77e9\u9635\u6bcf\u79cd\u5b57\u7b26\u7684\u6570\u91cf\u5224\u65ad\u662f\u5426\u53ef\u80fd\u7ecf\u8fc7\u82e5\u5e72\u6b21\u4ea4\u6362\u64cd\u4f5c\u540e\u4e0e\u521d\u59cb\u77e9\u9635\u8fdb\u884c\u5339\u914d\u3002\u5176\u5b9e\u5c31\u662f\u628a\u521d\u59cb\u77e9\u9635\u4e5f\u89c6\u4e3a\u4e00\u4e2a\u7ae0\uff0c\u7136\u540e\u68c0\u67e5\u8fd9\u4e2a\u7ae0\u662f\u5426\u80fd\u76d6\u4e0a\u3002\u5982\u679c\u53ef\u80fd\u5339\u914d\u5219\u6709\u89e3\uff0c\u5e76\u6784\u9020\u4ea4\u6362\u65b9\u6848\uff0c\u5426\u5219\u65e0\u89e3\u3002</p>"},{"location":"2022-icpc-nanjing/c/#_4","title":"\u64cd\u4f5c\u6b65\u6570\u5206\u6790","text":"<p>\u4ee5\u4e0a\u64cd\u4f5c\u65b9\u6848\u4e2d\uff0c\u5206\u4e3a\u201c\u76d6\u4e00\u4e2a\u65b0\u7ae0\u201d\u548c\u201c\u7528\u65e7\u7ae0\u8f6c\u5316\u4e00\u4e2a\u5b57\u7b26\u201d\u4e24\u79cd\u64cd\u4f5c\u3002\u4ee5\u4e0b\u5206\u6790\u6bcf\u79cd\u64cd\u4f5c\u9700\u8981\u6d88\u8017\u7684\u4ea4\u6362\u6b65\u6570\u3002</p> <p>\u5982\u679c\u628a\u521d\u59cb\u77e9\u9635\u4e5f\u89c6\u4e3a\u4e00\u4e2a\u7ae0\uff0c\u5219\u201c\u76d6\u4e00\u4e2a\u65b0\u7ae0\u201d\u64cd\u4f5c\u5c06\u8fdb\u884c \\((k + 1)\\) \u6b21\uff0c\u6bcf\u6b21\u53ef\u80fd\u4f1a\u79fb\u52a8\u77e9\u9635\u4e2d\u6240\u6709\u7684\u5b57\u7b26\uff08\u4e5f\u5c31\u662f \\(nm\\) \u4e2a\u5b57\u7b26\uff09\uff0c\u800c\u6bcf\u4e2a\u5b57\u7b26\u79fb\u52a8\u5230\u76ee\u6807\u4f4d\u7f6e\u6700\u591a\u4f1a\u82b1 \\((n + m - 1)\\) \u6b65\u3002\u56e0\u6b64\uff0c\u201c\u76d6\u4e00\u4e2a\u65b0\u7ae0\u201d\u6700\u591a\u6d88\u8017 \\(nm(n + m - 1)(k + 1)\\) \u6b65\u4ea4\u6362\u3002</p> <p>\u800c\u201c\u7528\u65e7\u7ae0\u8f6c\u5316\u4e00\u4e2a\u5b57\u7b26\u201d\u6700\u591a\u8fdb\u884c \\(nm\\) \u6b21\uff0c\u6bcf\u6b21\u53ea\u79fb\u52a8\u7ed9\u4e00\u4e2a\u5b57\u7b26\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u6700\u591a\u82b1\u8d39 \\((n + m - 1)\\) \u6b65\u3002\u56e0\u6b64\uff0c\u201c\u7528\u65e7\u7ae0\u8f6c\u5316\u4e00\u4e2a\u5b57\u7b26\u201d\u6700\u591a\u6d88\u8017 \\(nm(n + m - 1)\\) \u6b65\u4ea4\u6362\u3002</p> <p>\u56e0\u6b64\uff0c\u6240\u6709\u64cd\u4f5c\u6700\u591a\u603b\u5171\u6d88\u8017 \\(nm(n + m - 1)(k + 2)\\) \u6b65\u4ea4\u6362\uff0c\u52a0\u4e0a \\(400\\) \u6b21\u76d6\u7ae0\u64cd\u4f5c\u4e5f\u7b26\u5408 \\(4 \\times 10^5\\) \u6b21\u64cd\u4f5c\u7684\u9650\u5236\u3002\u8fd9\u4e2a\u9650\u5236\u5b9e\u9645\u4e0a\u662f\u6bd4\u8f83\u5bbd\u677e\u7684\uff0c\u65cb\u8f6c\u64cd\u4f5c\u4e5f\u7528\u4e0d\u4e0a\u3002</p>"},{"location":"2022-icpc-nanjing/c/#_5","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<p>\u63a5\u4e0b\u6765\u5206\u6790\u7a0b\u5e8f\u7684\u590d\u6742\u5ea6\u3002\u6211\u4eec\u5728\u6a21\u62df\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u7528\u4e00\u4e2a\u6570\u7ec4\u52a8\u6001\u7ef4\u62a4\u5f53\u524d\u77e9\u9635\u4e2d\u6bcf\u79cd\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u4ee5\u53ca\u901a\u914d\u7b26\u7684\u6570\u91cf\u3002</p> <p>\u7531\u4e8e\u6bcf\u6b21\u64cd\u4f5c\u90fd\u81f3\u5c11\u5c06\u4e00\u4e2a\u5b57\u7b26\u53d8\u4e3a\u901a\u914d\u7b26\uff0c\u6211\u4eec\u9700\u8981\u68c0\u67e5 \\(nm\\) \u6b21\u5f53\u524d\u7ae0\u662f\u5426\u8fd8\u80fd\u76d6\u3002\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(nm|\\Sigma|)\\)\uff0c\u5176\u4e2d \\(|\\Sigma|\\) \u662f\u5b57\u7b26\u96c6\u7684\u5927\u5c0f\u3002</p> <p>\u5982\u679c\u5f53\u524d\u7ae0\u4e0d\u80fd\u76d6\u4e86\uff0c\u6211\u4eec\u8981\u6362\u4e00\u4e2a\u65b0\u7ae0\u6765\u76d6\u3002\u6362\u7ae0\u5c06\u4f1a\u8fdb\u884c \\((k + 1)\\) \u6b21\u3002\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u63a5\u4e0b\u6765\u76d6\u54ea\u4e2a\u7ae0\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(k^2|\\Sigma|)\\)\u3002</p> <p>\u63a5\u4e0b\u6765\uff0c``\u76d6\u4e00\u4e2a\u65b0\u7ae0'' \u64cd\u4f5c\u5c06\u8fdb\u884c \\((k + 1)\\) \u6b21\uff0c\u6bcf\u6b21\u6211\u4eec\u66b4\u529b\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u7684\u521d\u59cb\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5b83\u79fb\u52a8\u5230\u76ee\u6807\u4f4d\u7f6e\u3002\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(n^2m^2(n + m))\\)\u3002</p> <p>\u6700\u540e\uff0c``\u7528\u65e7\u7ae0\u8f6c\u5316\u4e00\u4e2a\u5b57\u7b26'' \u64cd\u4f5c\u5c06\u8fdb\u884c \\(nm\\) \u6b21\uff0c\u6bcf\u6b21\u4ecd\u7136\u66b4\u529b\u5bfb\u627e\u76ee\u6807\u5b57\u7b26\u7684\u521d\u59cb\u4f4d\u7f6e\uff0c\u5e76\u5c06\u5b83\u79fb\u52a8\u5230\u76ee\u6807\u4f4d\u7f6e\u3002\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(n^2m^2(n + m))\\)\u3002</p> <p>\u56e0\u6b64\u603b\u4f53\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n^2m^2(n + m) + (nm + k^2)|\\Sigma|)\\)\uff0c\u5927\u6982\u4e0d\u5230 \\(10^7\\)\uff0c\u80fd\u5f88\u5feb\u8fd0\u884c\u5b8c\u6210\u3002</p>"},{"location":"2022-icpc-nanjing/c/#_6","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 20\n#define MAXM 20\n#define MAXK 20\n#define MAXC ((int) 'z')\nusing namespace std;\n\nint n, m, K;\nvector&lt;vector&lt;int&gt;&gt; ans;\nchar MAP[MAXN + 5][MAXM + 5];\nint nn[MAXK + 5], mm[MAXK + 5];\nchar PAT[MAXK + 5][MAXN + 5][MAXM + 5];\n\n// star\uff1a\u76ee\u524d\u6709\u51e0\u4e2a\u901a\u914d\u7b26\n// have[c]\uff1a\u76ee\u524d\u6709\u51e0\u4e2a\u5b57\u7b26 c\n// need[p][c]\uff1a\u76d6\u7ae0 p \u9700\u8981\u51e0\u4e2a\u5b57\u7b26 c\nint star, have[MAXC + 1], need[MAXK + 1][MAXC + 1];\n\n// \u68c0\u67e5\u7ae0 which \u73b0\u5728\u81f3\u5c11\u9700\u8981\u51e0\u4e2a\u901a\u914d\u7b26\u624d\u80fd\u76d6\nint miss(int which) {\n    int ret = 0;\n    for (int i = '0'; i &lt;= MAXC; i++) ret += max(0, need[which][i] - have[i]);\n    return ret;\n}\n\n// \u68c0\u67e5\u76d6\u7ae0 which \u80fd\u5426\u65b0\u4ea7\u751f\u901a\u914d\u7b26\nbool haveAny(int which) {\n    for (int i = '0'; i &lt;= MAXC; i++) if (need[which][i] &amp;&amp; have[i]) return true;\n    return false;\n}\n\n// \u4e0a\u6b21\u76d6\u7684\u7ae0\u662f now\uff0c\u770b\u63a5\u4e0b\u6765\u76d6\u54ea\u4e2a\u7ae0\n// return 0\uff1a\u6240\u6709\u7ae0\u90fd\u4e0d\u80fd\u76d6\n// return 1\uff1a\u4e0a\u4e00\u6b21\u7684\u7ae0\u8fd8\u80fd\u63a5\u7740\u76d6\n// return 2\uff1a\u6362\u4e86\u4e00\u4e2a\u65b0\u7ae0\nint choose(int &amp;now) {\n    if (now &gt; 0) { if (!haveAny(now) || star &lt; miss(now)) now = 0; }\n    // \u8fd9\u4e2a\u7ae0\u80fd\u76d6\u5c31\u7ee7\u7eed\u76d6\n    if (now &gt; 0) return 1;\n    // \u4e0d\u80fd\u76d6\u5c31\u9009\u65b0\u7ae0\n    for (int k = 1; k &lt;= K; k++) if (haveAny(k) &amp;&amp; star &gt;= miss(k)) {\n        now = k;\n        return 2;\n    }\n    return 0;\n}\n\n// \u8bb0\u5f55\u4ea4\u6362\u64cd\u4f5c\nvoid Swap(int i, int j, int ii, int jj) {\n    if (i &gt; ii) ans.push_back({-4, i, j});\n    else if (i &lt; ii) ans.push_back({-3, i, j});\n    else if (j &gt; jj) ans.push_back({-2, i, j});\n    else ans.push_back({-1, i, j});\n    swap(MAP[i][j], MAP[ii][jj]);\n}\n\n// \u8bb0\u5f55\u76d6\u7ae0\u64cd\u4f5c\nvoid Stamp(int which) {\n    for (int i = 1; i &lt;= nn[which]; i++) for (int j = 1; j &lt;= mm[which]; j++) MAP[i][j] = '*';\n    ans.push_back({which, 1, 1});\n}\n\n// \u628a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26 c \u79fb\u52a8\u5230 (GI, GJ)\n// \u76d6\u7ae0\u8303\u56f4\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 (SI, SJ)\nvoid Move(char c, int GI, int GJ, int SI, int SJ) {\n    for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) {\n        bool smaller = (i &lt; GI) || (i == GI &amp;&amp; j &lt; GJ);\n        // \u6211\u4eec\u4e0d\u60f3\u7834\u574f (GI, GJ) \u4e4b\u524d\u5df2\u7ecf\u6574\u7406\u597d\u7684\u90e8\u5206\n        if (i &lt;= SI &amp;&amp; j &lt;= SJ &amp;&amp; smaller) continue;\n        // \u5728\u53ef\u4ee5\u7834\u574f\u7684\u8303\u56f4\u5185\u627e\u5230\u4e86\u5b57\u7b26 c\n        if (MAP[i][j] == c) {\n            // \u4e3a\u4e86\u4e0d\u7834\u574f\u5df2\u7ecf\u6574\u7406\u597d\u7684\u90e8\u5206\n            // \u5148\u628a\u5b83\u5728 (SI, SJ) \u7684\u8303\u56f4\u5916\u79fb\u52a8\u5230\u5bf9\u5e94\u884c / \u5217\uff0c\u518d\u4e00\u6b21\u6027\u79fb\u52a8\u8fc7\u53bb\n            if (i &lt;= GI) {\n                while (i &lt; GI) Swap(i, j, i + 1, j), i++;\n                while (i &gt; GI) Swap(i, j, i - 1, j), i--;\n                while (j &lt; GJ) Swap(i, j, i, j + 1), j++;\n                while (j &gt; GJ) Swap(i, j, i, j - 1), j--;\n            } else {\n                while (j &lt; GJ) Swap(i, j, i, j + 1), j++;\n                while (j &gt; GJ) Swap(i, j, i, j - 1), j--;\n                while (i &lt; GI) Swap(i, j, i + 1, j), i++;\n                while (i &gt; GI) Swap(i, j, i - 1, j), i--;\n            }\n            return;\n        }\n    }\n    assert(false);\n}\n\n// \u63a5\u7740\u76d6\u540c\u4e00\u4e2a\u7ae0\nvoid gao1(int which) {\n    for (int i = 1; i &lt;= nn[which]; i++) for (int j = 1; j &lt;= mm[which]; j++)\n        if (have[PAT[which][i][j]]) {\n            // \u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u53d8\u6210\u901a\u914d\u7b26\n            Move(PAT[which][i][j], i, j, nn[which], mm[which]);\n            star++;\n            have[PAT[which][i][j]]--;\n            Stamp(which);\n            return;\n        }\n    assert(false);\n}\n\n// \u76d6\u4e00\u4e2a\u65b0\u7ae0\nvoid gao2(int which) {\n    for (int i = 1; i &lt;= nn[which]; i++) for (int j = 1; j &lt;= mm[which]; j++) {\n        if (have[PAT[which][i][j]]) {\n            // \u9700\u8981\u7684\u5b57\u7b26\u8fd8\u6709\uff0c\u628a\u5b83\u79fb\u52a8\u5230\u76ee\u6807\u4f4d\u7f6e\n            Move(PAT[which][i][j], i, j, nn[which], mm[which]);\n            star++;\n            have[PAT[which][i][j]]--;\n        } else {\n            // \u9700\u8981\u7684\u5b57\u7b26\u6ca1\u4e86\uff0c\u7528\u901a\u914d\u7b26\u4ee3\u66ff\n            Move('*', i, j, nn[which], mm[which]);\n        }\n    }\n    Stamp(which);\n}\n\nint main() {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;K);\n\n    for (int i = 1; i &lt;= n; i++) scanf(\"%s\", PAT[0][i] + 1);\n    nn[0] = n; mm[0] = m;\n\n    for (int i = 1; i &lt;= n; i++) scanf(\"%s\", MAP[i] + 1);\n    for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) have[MAP[i][j]]++;\n\n    for (int k = 1; k &lt;= K; k++) {\n        scanf(\"%d%d\", &amp;nn[k], &amp;mm[k]);\n        for (int i = 1; i &lt;= nn[k]; i++) scanf(\"%s\", PAT[k][i] + 1);\n    }\n    for (int k = 0; k &lt;= K; k++) for (int i = 1; i &lt;= nn[k]; i++) for (int j = 1; j &lt;= mm[k]; j++) need[k][PAT[k][i][j]]++;\n\n    // \u6301\u7eed\u76d6\u7ae0\uff0c\u76f4\u5230\u4efb\u4f55\u4e00\u4e2a\u7ae0\u90fd\u4e0d\u80fd\u76d6\n    int now = 0;\n    while (true) {\n        int t = choose(now);\n        if (t == 0) break;\n        else if (t == 1) gao1(now);\n        else gao2(now);\n    }\n\n    // \u628a\u521d\u59cb\u5c40\u9762\u770b\u6210\u7ae0 0\uff0c\u68c0\u67e5\u7ae0 0 \u662f\u5426\u80fd\u76d6\n    if (miss(0) &lt;= star) {\n        // \u80fd\u76d6\u7ae0 0\uff0c\u6709\u89e3\n        if (haveAny(0)) {\n            gao2(0);\n            ans.pop_back();\n        }\n        printf(\"%d\\n\", ans.size());\n        while (!ans.empty()) {\n            printf(\"%d %d %d\\n\", ans.back()[0], ans.back()[1], ans.back()[2]);\n            ans.pop_back();\n        }\n    } else {\n        // \u4e0d\u80fd\u76d6\u7ae0 0\uff0c\u65e0\u89e3\n        printf(\"-1\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/d/","title":"D - \u804a\u5929\u7a0b\u5e8f","text":""},{"location":"2022-icpc-nanjing/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387139/465 (29.9%)"},{"location":"2022-icpc-nanjing/d/#_2","title":"\u9898\u89e3","text":"<p>\u9996\u5148\u4e8c\u5206\u7b54\u6848 \\(x\\)\uff0c\u5c06\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6570\u770b\u6210 \\(1\\)\uff0c\u5c0f\u4e8e \\(x\\) \u7684\u6570\u770b\u6210 \\(0\\)\u3002\u95ee\u9898\u53d8\u4e3a\u201c\u5224\u65ad\u80fd\u5426\u901a\u8fc7\u81f3\u591a\u4e00\u6b21\u64cd\u4f5c\uff0c\u4f7f\u5e8f\u5217\u4e2d \\(1\\) \u7684\u6570\u91cf\u5927\u4e8e\u7b49\u4e8e \\(k\\)\u201d\u3002</p> <p>\u63a5\u4e0b\u6765\u679a\u4e3e\u64cd\u4f5c\u4f4d\u7f6e\uff0c\u5e76\u8ba1\u7b97\u8fdb\u884c\u64cd\u4f5c\u540e\u80fd\u5426\u6ee1\u8db3\u8981\u6c42\u3002\u8003\u8651\u4e00\u4e2a\u5143\u7d20 \\(a_t\\)\uff08\\(a_t &lt; x\\)\uff09\u5bb9\u6613\u53d1\u73b0\uff0c\u5728\u64cd\u4f5c\u8303\u56f4\u4ece\u5de6\u5f80\u53f3\u79fb\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5f53 \\(a_t\\) \u7b2c\u4e00\u6b21\u8fdb\u5165\u64cd\u4f5c\u8303\u56f4\u65f6\uff0c\u5b83\u4f1a\u53d8\u6210\u6700\u5927\u503c\uff0c\u4e4b\u540e\u6162\u6162\u53d8\u5c0f\uff0c\u6700\u540e\u53c8\u53d8\u56de\u539f\u6765\u7684\u503c\u3002\u56e0\u6b64\u6bcf\u4e2a\u6570\u53ea\u4f1a\u4ece \\(0\\) \u53d8\u6210 \\(1\\) \u4e00\u6b21\uff0c\u518d\u4ece \\(1\\) \u53d8\u6210 \\(0\\) \u4e00\u6b21\u3002</p> <p>\u6211\u4eec\u53ea\u8981\u5bf9\u6bcf\u4e2a\u5143\u7d20\u627e\u51fa\u8fd9\u4e24\u6b21\u53d8\u5316\u7684\u4f4d\u7f6e\uff0c\u5c31\u80fd\u5229\u7528\u524d\u7f00\u548c\u7b97\u51fa\u5728\u6bcf\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u64cd\u4f5c\u5bf9 \\(1\\) \u7684\u6570\u91cf\u7684\u5f71\u54cd\u3002\u5177\u4f53\u5982\u4f55\u8ba1\u7b97\uff0c\u8be6\u89c1\u53c2\u8003\u4ee3\u7801\u3002</p> <p>\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log A)\\)\uff0c\u5176\u4e2d \\(A\\) \u662f\u7b54\u6848\u53ef\u80fd\u7684\u6700\u5927\u503c\u3002</p>"},{"location":"2022-icpc-nanjing/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 2e5)\nusing namespace std;\n\nint n, K, m;\nlong long A[MAXN + 10], C, D;\n\nint f[MAXN + 10];\n\n// X \u662f\u4e8c\u5206\u7684\u7b54\u6848\nbool check(long long X) {\n    // \u8ba1\u7b97\u4e0d\u8fdb\u884c\u64cd\u4f5c\uff0c1 \u7684\u6570\u91cf\u662f\u591a\u5c11\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; i++) cnt += A[i] &gt;= X ? 1 : 0;\n    // \u5df2\u7ecf\u6ee1\u8db3\u8981\u6c42\uff0c\u76f4\u63a5\u8fd4\u56de\n    if (cnt &gt;= K) return true;\n\n    // f[i] \u8868\u793a\u64cd\u4f5c\u8303\u56f4\u6700\u53f3\u7aef\u4ece (i - 1) \u53d8\u6210 i \u540e\uff0c1 \u7684\u6570\u91cf\u7684\u53d8\u5316\u91cf\n    memset(f, 0, sizeof(int) * (n + 3));\n    // \u8003\u8651 a_i &lt; X \u7684\u6240\u6709\u5143\u7d20\n    for (int i = 1; i &lt;= n; i++) if (A[i] &lt; X) {\n        // \u8ba1\u7b97 a_i \u8fdb\u5165\u64cd\u4f5c\u8303\u56f4\u540e\u80fd\u53d8\u6210\u7684\u6700\u5927\u503c\n        int R = min(m - 1, i - 1);\n        long long mx = A[i] + C + D * R;\n        // \u6700\u5927\u503c\u4e5f\u65e0\u6cd5\u8d85\u8fc7 X\uff0c\u8df3\u8fc7\n        if (mx &lt; X) continue;\n        // \u6700\u5927\u503c\u8d85\u8fc7 X\uff0c0 \u53d8\u6210 1 \u5c31\u53d1\u751f\u5728 a_i \u521a\u8fdb\u5165\u64cd\u4f5c\u8303\u56f4\u65f6\n        f[max(m, i)]++;\n        // \u8ba1\u7b97 1 \u4ec0\u4e48\u65f6\u5019\u53d8\u56de 0\n        long long mn = A[i] + C;\n        // \u8fde\u6700\u5c0f\u503c\u90fd\u6ee1\u8db3\u8981\u6c42\uff0c\u53ea\u6709\u5728 a_i \u79bb\u5f00\u64cd\u4f5c\u8303\u56f4\u65f6\u624d\u4f1a\u53d8\u6210 0\n        if (mn &gt;= X) f[min(n + 1, i + m)]--;\n        else {\n            // \u8ba1\u7b97\u6700\u5927\u7684\u6ee1\u8db3 a_i + C + pos * D &lt; X \u7684 pos\n            // \u8fd9\u91cc\u4e0d\u7528\u8003\u8651 D = 0\uff0c\u56e0\u4e3a\u8fd9\u6837\u4f1a\u4f7f mn == mx\uff0c\u4e0d\u4f1a\u8fdb\u5165 else \u5206\u652f\n            long long t = X - A[i] - C;\n            int pos;\n            if (t % D == 0) pos = t / D - 1;\n            else pos = t / D;\n            f[min(n + 1, i + m - pos - 1)]--;\n        }\n    }\n\n    // \u679a\u4e3e\u64cd\u4f5c\u8303\u56f4\u6700\u53f3\u7aef\u7684\u4f4d\u7f6e\n    for (int i = m; i &lt;= n; i++) {\n        cnt += f[i];\n        if (cnt &gt;= K) return true;\n    }\n    return false;\n}\n\nint main() {\n    scanf(\"%d%d%d%lld%lld\", &amp;n, &amp;K, &amp;m, &amp;C, &amp;D);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%lld\", &amp;A[i]);\n\n    long long head = 0, tail = 1e15;\n    while (head &lt; tail) {\n        long long mid = (head + tail + 1) &gt;&gt; 1;\n        if (check(mid)) head = mid;\n        else tail = mid - 1;\n    }\n    printf(\"%lld\\n\", head);\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/e/","title":"E - \u6811\u7684\u67d3\u8272","text":""},{"location":"2022-icpc-nanjing/e/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738730/465 (6.5%)"},{"location":"2022-icpc-nanjing/e/#_2","title":"\u603b\u4f53\u601d\u8def","text":"<p>\u6ce8\u610f\u5230\u4e00\u6b21\u67d3\u8272\u64cd\u4f5c\u53ea\u4f1a\u5f71\u54cd\u67d0\u4e00\u5c42\u7684\u8282\u70b9\u3002\u56e0\u6b64\u6bcf\u5c42\u8282\u70b9\u5206\u5f00\u8003\u8651\uff0c\u7b54\u6848\u5c31\u662f\u628a\u6bcf\u5c42\u8282\u70b9\u67d3\u9ed1\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e4b\u548c\u3002\u7528\u865a\u6811\u5c06\u590d\u6742\u5ea6\u964d\u4f4e\u5230 \\(\\mathcal{O}(n \\log n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/e/#_3","title":"\u8be6\u7ec6\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/e/#dp","title":"\u4ece\u66b4\u529b DP \u5f00\u59cb","text":"<p>\u6ce8\u610f\u5230\u4e00\u6b21\u67d3\u8272\u64cd\u4f5c\u53ea\u4f1a\u5f71\u54cd\u67d0\u4e00\u5c42\u7684\u8282\u70b9\u3002\u56e0\u6b64\u6211\u4eec\u5c06\u6bcf\u5c42\u8282\u70b9\u5206\u5f00\u8003\u8651\uff0c\u7b54\u6848\u5c31\u662f\u628a\u6bcf\u5c42\u8282\u70b9\u67d3\u9ed1\u7684\u6700\u5c0f\u4ee3\u4ef7\u4e4b\u548c\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u8003\u8651\u67d3\u9ed1\u6df1\u5ea6\u4e3a \\(D\\) \u7684\u8282\u70b9\u3002\u7531\u4e8e\u6df1\u5ea6\u5927\u7684\u8282\u70b9\u65e0\u6cd5\u67d3\u9ed1\u6df1\u5ea6\u5c0f\u7684\u8282\u70b9\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u6df1\u5ea6\u5927\u4e8e \\(D\\) \u7684\u8282\u70b9\u6682\u65f6\u5220\u6389\uff0c\u8fd9\u6837\u6df1\u5ea6\u4e3a \\(D\\) \u7684\u8282\u70b9\u5c31\u53d8\u6210\u4e86\u6811\u7684\u53f6\u5b50\u3002</p> <p>\u8bb0 \\(f(u)\\) \u8868\u793a\u628a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u53f6\u5b50\u5168\u90e8\u67d3\u9ed1\u9700\u8981\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002\u8bb0\u8282\u70b9 \\(u\\) \u7684\u6df1\u5ea6\u4e3a \\(d_u\\)\uff0c\u8bb0\u8282\u70b9 \\(u\\) \u7684\u6240\u6709\u5b50\u8282\u70b9\u5f62\u6210\u7684\u96c6\u5408\u4e3a \\(\\text{son}(u)\\)\uff0c\u6211\u4eec\u6709\u5982\u4e0b\u8f6c\u79fb\u65b9\u7a0b\uff1a</p> \\[ f(u) = \\min(a_{D - d_u}, \\sum\\limits_{v \\in \\text{son}(u)} f(v)) \\] <p>\u8fd9\u4e2a\u8f6c\u79fb\u65b9\u7a0b\u5f88\u597d\u7406\u89e3\uff1a\u8981\u4e48\u7236\u8282\u70b9\u4e00\u6b21\u6027\u628a\u6240\u6709\u5b50\u8282\u70b9\u7684\u6d3b\u90fd\u5e72\u4e86\uff0c\u8981\u4e48\u7236\u8282\u70b9\u5b8c\u5168\u4e0d\u5e72\u6d3b\uff0c\u5168\u90e8\u7531\u5b50\u8282\u70b9\u5e72\u6d3b\u3002\u7531\u4e8e\u4ee3\u4ef7\u90fd\u662f\u6b63\u6570\uff0c\u56e0\u6b64\u5b50\u8282\u70b9\u67d3\u4e00\u4e9b\u53f6\u5b50\uff0c\u518d\u8ba9\u7236\u8282\u70b9\u5168\u90e8\u67d3\u5b8c\u80af\u5b9a\u662f\u4e0d\u4f18\u7684\u3002\u7b54\u6848\u5373\u4e3a \\(f(1)\\)\u3002</p> <p>\u7531\u4e8e\u6df1\u5ea6\u6700\u5927\u4e3a \\(n\\)\uff0c\u800c\u6bcf\u6b21 dp \u7684\u6811\u6700\u591a\u53ef\u80fd\u6709 \\(n\\) \u4e2a\u8282\u70b9\uff0c\u56e0\u6b64\u76f4\u63a5\u5957\u7528\u6b64 dp \u65b9\u7a0b\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n^2)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/e/#_4","title":"\u4f18\u5316\u590d\u6742\u5ea6","text":"<p>\u5982\u679c\u6709\u4e00\u68f5\u6811\u7684\u5927\u5c0f\u53ea\u548c\u53f6\u5b50\u7684\u6570\u91cf\u5448\u7ebf\u6027\u76f8\u5173\uff0c\u540c\u65f6\u53c8\u4e0d\u4e22\u5931\u5173\u952e\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u80fd\u5728\u603b\u5171 \\(\\mathcal{O}(n)\\) \u7684\u65f6\u95f4\u5185\u5b8c\u6210\u6bcf\u4e00\u5c42\u7684 dp\u3002\u5bf9\u4e86\uff01\u865a\u6811 \u7684\u5927\u5c0f\u5c31\u4e0e\u53f6\u5b50\u7684\u6570\u91cf\u5448\u7ebf\u6027\u76f8\u5173\u3002</p> <p>\u540c\u6837\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u8003\u8651\u67d3\u9ed1\u6df1\u5ea6\u4e3a \\(D\\) \u7684\u8282\u70b9\u3002\u6211\u4eec\u5efa\u7acb\u4ee5\u8fd9\u4e9b\u8282\u70b9\u4e3a\u53f6\u5b50\uff0c\u4e14\u5305\u542b\u8282\u70b9 \\(1\\) \u7684\u865a\u6811\u3002\u8bb0\u865a\u6811\u4e2d\u7684\u8282\u70b9 \\(u\\) \u5728\u539f\u6811\u4e2d\u7684\u6df1\u5ea6\u4e3a \\(d_u\\)\uff0c\u8bb0\u8282\u70b9 \\(u\\) \u5728\u865a\u6811\u4e2d\u7684\u6240\u6709\u5b50\u8282\u70b9\u5f62\u6210\u7684\u96c6\u5408\u4e3a \\(\\text{virt-son}(u)\\)\uff0c\u8bb0\u8282\u70b9 \\(u\\) \u5728\u865a\u6811\u4e2d\u7684\u7236\u8282\u70b9\u4e3a \\(p_u\\)\uff0c\u5219\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u6539\u5199\u4e3a\uff1a</p> \\[ f(u) = \\min(\\min\\limits_{i = d_{p_u} + 1}^{d_u} a_{D - i}, \\sum\\limits_{v \\in \\text{virt-son}(u)} f(v)) \\] <p>\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u7528\u865a\u6811\u52a0\u901f\u4e86\u4e00\u6761\u94fe\u4e0a\u7684 dp \u8fd0\u7b97\u3002\u7b54\u6848\u540c\u6837\u4e3a \\(f(1)\\)\u3002</p> <p></p> <p>\u62ec\u53f7\u4e2d\u7684\u7b2c\u4e00\u9879\u5bb9\u6613\u7528 ST \u8868\u6216\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u5728 \\(\\mathcal{O}(\\log n)\\) \u7684\u590d\u6742\u5ea6\u5185\u6c42\u51fa\uff0c\u540c\u65f6\u5efa\u7acb\u865a\u6811\u7684\u603b\u4f53\u590d\u6742\u5ea6\u4e5f\u662f \\(\\mathcal{O}(n\\log n)\\) \u7684\u3002\u56e0\u6b64\u603b\u4f53\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/e/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXP 20\n#define INF ((int) 1e9)\nusing namespace std;\n\nint n;\nlong long ans, A[MAXN + 10];\n\nlong long mino[MAXN * 4 + 10];\n\nvector&lt;int&gt; e[MAXN + 10];\nint pa[MAXN + 10][MAXP], dep[MAXN + 10];\nvector&lt;int&gt; vec[MAXN + 10];\n\nint tp, stk[MAXN + 10];\nvector&lt;int&gt; E[MAXN + 10];\n\n// \u5efa\u7acb\u7ebf\u6bb5\u6811\nvoid build(int id, int l, int r) {\n    if (l == r) mino[id] = A[l];\n    else {\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        build(nxt, l, mid); build(nxt | 1, mid + 1, r);\n        mino[id] = min(mino[nxt], mino[nxt | 1]);\n    }\n}\n\n// \u7ebf\u6bb5\u6811\u67e5 ql ~ qr \u7684\u6700\u5c0f\u503c\nlong long query(int id, int l, int r, int ql, int qr) {\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) return mino[id];\n    int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n    return min(\n        ql &lt;= mid ? query(nxt, l, mid, ql, qr) : INF,\n        qr &gt; mid ? query(nxt | 1, mid + 1, r, ql, qr) : INF\n    );\n}\n\nvoid dfs(int sn, int fa, int d) {\n    pa[sn][0] = fa;\n    for (int i = 1; i &lt; MAXP; i++) pa[sn][i] = pa[pa[sn][i - 1]][i - 1];\n    dep[sn] = d;\n    vec[d].push_back(sn);\n    for (int fn : e[sn]) if (fn != fa) dfs(fn, sn, d + 1);\n}\n\nint lca(int x, int y) {\n    if (dep[x] &lt; dep[y]) swap(x, y);\n    for (int i = MAXP - 1; i &gt;= 0; i--) if (dep[pa[x][i]] &gt;= dep[y]) x = pa[x][i];\n    if (x == y) return x;\n    for (int i = MAXP - 1; i &gt;= 0; i--) if (pa[x][i] != pa[y][i]) x = pa[x][i], y = pa[y][i];\n    return pa[x][0];\n}\n\nlong long dp(int sn, int faD, int D) {\n    long long ret;\n    if (E[sn].empty()) ret = INF;\n    else {\n        ret = 0;\n        for (int fn : E[sn]) ret += dp(fn, dep[sn], D);\n    }\n    ret = min(ret, query(1, 0, n - 1, D - dep[sn], D - faD - 1));\n    return ret;\n}\n\n// \u4e3a\u6240\u6709\u6df1\u5ea6\u4e3a D \u7684\u8282\u70b9\u5efa\u7acb\u865a\u6811\u5e76 dp\nlong long gao(int D) {\n    E[1].clear(); stk[tp = 1] = 1;\n    for (int x : vec[D]) {\n        E[x].clear();\n        int a = lca(x, stk[tp]);\n        if (a == stk[tp]) {\n            stk[++tp] = x;\n            continue;\n        }\n        while (dep[stk[tp - 1]] &gt; dep[a]) {\n            E[stk[tp - 1]].push_back(stk[tp]);\n            tp--;\n        }\n        if (a == stk[tp - 1]) {\n            E[a].push_back(stk[tp]);\n            tp--;\n        } else {\n            E[a].clear(); E[a].push_back(stk[tp]);\n            stk[tp] = a;\n        }\n        stk[++tp] = x;\n    }\n    while (tp &gt; 1) {\n        E[stk[tp - 1]].push_back(stk[tp]);\n        tp--;\n    }\n\n    return dp(1, 0, D);\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++) scanf(\"%lld\", &amp;A[i]);\n    build(1, 0, n - 1);\n\n    for (int i = 1; i &lt;= n; i++) e[i].clear();\n    for (int i = 1; i &lt; n; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        e[x].push_back(y); e[y].push_back(x);\n    }\n    for (int i = 1; i &lt;= n; i++) vec[i].clear();\n    dfs(1, 0, 1);\n\n    ans = A[0];\n    for (int i = 2; i &lt;= n &amp;&amp; vec[i].size() &gt; 0; i++) ans += gao(i);\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/f/","title":"F - \u4e09\u89d2\u5f62","text":""},{"location":"2022-icpc-nanjing/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73872/465 (0.4%)"},{"location":"2022-icpc-nanjing/f/#_2","title":"\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/f/#_3","title":"\u7ed3\u8bba","text":"<p>\u81f3\u5c11\u9700\u8981 \\(8\\) \u4e2a\u9510\u89d2\u4e09\u89d2\u5f62\u624d\u80fd\u6784\u6210\u4e00\u4e2a\u6b63\u65b9\u5f62\u3002</p> \u8bc1\u660e <p>\u628a\u6240\u6709\u7528\u5230\u7684\u70b9\u5206\u6210\u4ee5\u4e0b\u4e09\u7c7b\uff1a</p> <ul> <li>\u6b63\u65b9\u5f62\u7684 \\(4\\) \u4e2a\u9876\u70b9\uff1a\u8fd9\u6837\u7684\u70b9\u4e00\u5171 \\(4\\) \u4e2a\uff0c\u6bcf\u4e2a\u540c\u65f6\u81f3\u5c11\u662f \\(\\frac{90}{90}+1=2\\) \u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u3002</li> <li>\u4f4d\u4e8e\u6b63\u65b9\u5f62\u6216\u67d0\u4e2a\u4e09\u89d2\u5f62\u8fb9\u4e0a\uff08\u4e0d\u5305\u62ec\u7aef\u70b9\uff09\u7684\u70b9\uff1a\u5047\u8bbe\u8fd9\u6837\u7684\u70b9\u4e00\u5171 \\(x\\) \u4e2a\uff0c\u6bcf\u4e2a\u540c\u65f6\u81f3\u5c11\u662f \\(\\frac{180}{90}+1=3\\) \u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u3002</li> <li>\u5176\u4f59\u4e0d\u5728\u6b63\u65b9\u5f62\u6216\u4efb\u4f55\u4e00\u4e2a\u4e09\u89d2\u5f62\u8fb9\u4e0a\uff08\u4e0d\u5305\u62ec\u7aef\u70b9\uff09\u7684\u70b9\uff1a\u5047\u8bbe\u8fd9\u6837\u7684\u70b9\u4e00\u5171 \\(y\\) \u4e2a\uff0c\u6bcf\u4e2a\u540c\u65f6\u81f3\u5c11\u662f \\(\\frac{360}{90}+1=5\\) \u4e2a\u4e09\u89d2\u5f62\u7684\u9876\u70b9\u3002</li> </ul> <p>\u56e0\u6b64\u6709 \\(3k\\geq 2\\times 4+3x+5y\\)\u3002\u53e6\u5916\u6240\u6709\u89d2\u5ea6\u4e4b\u548c\u5e94\u8be5\u7b49\u4e8e\u6240\u6709\u4e09\u89d2\u5f62\u5185\u89d2\u4e4b\u548c\uff0c\u56e0\u6b64 \\(180k = 90 \\times 4 + 180x + 360y\\)\uff0c\u5373 \\(k=2+x+2y\\)\u3002\u4ee3\u5165\u524d\u8ff0\u4e0d\u7b49\u5f0f\u5f97 \\(y\\geq 2\\)\u3002</p> <p>\u8fd9 \\(y\\) \u4e2a\u70b9\u6bcf\u4e2a\u540c\u65f6\u81f3\u5c11\u662f \\(5\\) \u4e2a\u9510\u89d2\u4e09\u89d2\u5f62\u7684\u9876\u70b9\uff0c\u800c\u540c\u65f6\u62e5\u6709\u8fd9\u4e24\u4e2a\u70b9\u4f5c\u4e3a\u9876\u70b9\u7684\u9510\u89d2\u4e09\u89d2\u5f62\u81f3\u591a \\(2\\) \u4e2a\uff0c\u56e0\u6b64\u4e00\u5171\u81f3\u5c11\u6709 \\(8\\) \u4e2a\u9510\u89d2\u4e09\u89d2\u5f62\u3002</p>"},{"location":"2022-icpc-nanjing/f/#_4","title":"\u6784\u9020\u65b9\u6848","text":"<p>\u5982\u679c\u53ef\u4ee5\u5c06\u5355\u4f4d\u6b63\u65b9\u5f62\u5212\u5206\u6210 \\(k\\) \u4e2a\u9510\u89d2\u4e09\u89d2\u5f62\uff0c\u90a3\u4e48\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u9510\u89d2\u4e09\u89d2\u5f62\u5e76\u5c06\u5176\u4e09\u6761\u8fb9\u4e0a\u7684\u4e2d\u70b9\u4e24\u4e24\u76f8\u8fde\uff0c\u4ece\u800c\u5f97\u5230\u4e00\u4e2a\u5c06\u6b63\u65b9\u5f62\u5212\u5206\u6210 \\((k+3)\\) \u4e2a\u9510\u89d2\u4e09\u89d2\u5f62\u7684\u65b9\u6848\u3002</p> \u8bc1\u660e <p>\u8fd9\u662f\u4e00\u9053\u521d\u4e2d\u6570\u5b66\u7ea7\u522b\u7684\u8bc1\u660e\u9898\uff0c\u8fd8\u8bf7\u8bfb\u8005\u81ea\u884c\u8bc1\u660e\u3002</p> <p>\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u6784\u9020\u51fa \\(k=8,9,10\\) \u7684\u4f8b\u5b50\u5373\u53ef\u3002</p> <p></p>"},{"location":"2022-icpc-nanjing/f/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// n = 8, 9, 10 \u7684\u65b9\u6848\n\nint A[8][6] = {\n    0, 0, 9, 4, 0, 20,\n    0, 20, 9, 4, 10, 20,\n    10, 20, 9, 4, 11, 4,\n    10, 20, 11, 4, 20, 20,\n    20, 0, 20, 20, 11, 4,\n    0, 0, 10, 0, 9, 4,\n    10, 0, 11, 4, 9, 4,\n    10, 0, 20, 0, 11, 4\n};\n\nint B[9][6] = {\n    0, 0, 20, 0, 16, 12,\n    0, 0, 16, 12, 0, 20,\n    0, 20, 12, 14, 13, 20,\n    20, 0, 20, 13, 16, 12,\n    16, 16, 16, 12, 20, 13,\n    16, 16, 20, 13, 20, 20,\n    16, 16, 20, 20, 13, 20,\n    16, 16, 13, 20, 12, 14,\n    16, 16, 12, 14, 16, 12\n};\n\nint C[10][6] = {\n    0, 0, 10, 8, 0, 20,\n    20, 0, 10, 8, 20, 20,\n    0, 20, 10, 8, 20, 20,\n    0, 0, 8, 0, 5, 4,\n    10, 3, 5, 4, 8, 0, \n    10, 3, 10, 8, 5, 4,\n    10, 3, 8, 0, 12, 0,\n    10, 3, 12, 0, 15, 4,\n    10, 3, 15, 4, 10, 8,\n    20, 0, 15, 4, 12, 0\n};\n\nvoid solve(int A[][6], int X, int Y) {\n    // \u7528\u961f\u5217\u8f6e\u6d41\u628a\u6bcf\u4e2a\u4e09\u89d2\u5f62\u62c6\u6210 4 \u4e2a\n    // \u6bcf\u4e2a\u5750\u6807\u540e\u9762\u90fd\u81f3\u5c11 7 \u4e2a\u96f6\uff0c\u800c\u6240\u6709\u4e09\u89d2\u5f62\u62c6\u4e00\u8f6e\u6570\u91cf\u4e58 4\uff0c\u6240\u4ee5\u62c6\u4e24\u8f6e\u5c31\u591f\u4e86\uff0c\u65e0\u7cbe\u5ea6\u95ee\u9898\n    queue&lt;vector&lt;int&gt;&gt; q;\n    for (int i = 0; i &lt; X; i++) {\n        vector&lt;int&gt; vec;\n        for (int j = 0; j &lt; 6; j++) vec.push_back(A[i][j] * ((int) 5e7));\n        q.push(vec);\n    }\n\n    while (q.size() &lt; Y) {\n        vector&lt;int&gt; vec = q.front(); q.pop();\n        int x1 = vec[0], y1 = vec[1];\n        int x2 = vec[2], y2 = vec[3];\n        int x3 = vec[4], y3 = vec[5];\n        int x4 = (x1 + x2) / 2, y4 = (y1 + y2) / 2;\n        int x5 = (x2 + x3) / 2, y5 = (y2 + y3) / 2;\n        int x6 = (x3 + x1) / 2, y6 = (y3 + y1) / 2;\n        q.push({x1, y1, x4, y4, x6, y6});\n        q.push({x2, y2, x5, y5, x4, y4});\n        q.push({x3, y3, x6, y6, x5, y5});\n        q.push({x4, y4, x5, y5, x6, y6});\n    }\n\n    while (!q.empty()) {\n        vector&lt;int&gt; vec = q.front(); q.pop();\n        for (int i = 0; i &lt; 6; i++) printf(\"%d%c\", vec[i], \"\\n \"[i &lt; 5]);\n    }\n}\n\nint main() {\n    int n; scanf(\"%d\", &amp;n);\n    if (n &lt; 8) {\n        printf(\"No\\n\");\n        return 0;\n    }\n\n    printf(\"Yes\\n\");\n    if (n % 3 == 2) solve(A, 8, n);\n    else if (n % 3 == 0) solve(B, 9, n);\n    else solve(C, 10, n);\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/g/","title":"G - \u90aa\u6076\u94ed\u523b","text":""},{"location":"2022-icpc-nanjing/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387406/465 (87.3%)"},{"location":"2022-icpc-nanjing/g/#_2","title":"\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/g/#_3","title":"\u9898\u610f\u6982\u62ec","text":"<p>\u9996\u5148\u7b80\u5355\u603b\u7ed3\u4e00\u4e0b\u672c\u9898\u7684\u9898\u610f\uff1a\u60a8\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5e8f\u5217\uff0c\u5e8f\u5217\u91cc\u4e00\u5f00\u59cb\u53ea\u6709\u4e00\u4e2a \\(1\\)\u3002\u60a8\u8981\u5904\u7406 \\(n\\) \u4e2a\u4e8b\u4ef6\uff0c\u4e8b\u4ef6\u53ef\u80fd\u6709\u4ee5\u4e0b\u4e09\u79cd\uff1a</p> <ul> <li>\u5f80\u5e8f\u5217\u91cc\u6dfb\u52a0\u4e00\u4e2a \\(1\\)\u3002</li> <li>\u4ece\u5e8f\u5217\u91cc\u62ff\u51fa\u4e24\u4e2a\u6570\uff0c\u52a0\u8d77\u6765\u518d\u653e\u56de\u53bb\u3002</li> <li>\u4ece\u4ee5\u4e0a\u4e24\u79cd\u4e8b\u4ef6\u4e2d\u81ea\u7531\u9009\u4e00\u4e2a\u3002</li> </ul> <p>\u5728\u6bcf\u6b21\u90fd\u80fd\u4ece\u5e8f\u5217\u91cc\u62ff\u51fa\u4e24\u4e2a\u6570\u7684\u524d\u63d0\u4e0b\uff0c\u6c42\u5e8f\u5217\u5e73\u5747\u503c\u7684\u6700\u5927\u503c\u3002</p>"},{"location":"2022-icpc-nanjing/g/#_4","title":"\u8d2a\u5fc3\u7b56\u7565","text":"<p>\u5e8f\u5217\u7684\u5e73\u5747\u503c\u4ec5\u7531\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u548c\u4ee5\u53ca\u5e8f\u5217\u7684\u5143\u7d20\u6570\u91cf\u51b3\u5b9a\u3002</p> <p>\u8fdb\u884c\u7b2c\u4e00\u79cd\u4e8b\u4ef6\u540e\uff0c\u7b54\u6848\u7684\u5206\u5b50\u548c\u5206\u6bcd\u90fd\u52a0 \\(1\\)\uff08\u7531\u4e8e\u7b54\u6848\u603b\u662f\u5927\u4e8e\u7b49\u4e8e \\(1\\)\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4f1a\u8ba9\u7b54\u6848\u4e0d\u53d8\u6216\u53d8\u5c0f\uff09\uff1b\u8fdb\u884c\u7b2c\u4e8c\u79cd\u4e8b\u4ef6\u540e\uff0c\u7b54\u6848\u7684\u5206\u6bcd\u51cf \\(1\\)\uff08\u4e5f\u5c31\u662f\u7b54\u6848\u53d8\u5927\u4e86\uff09\u3002</p> <p>\u663e\u7136\u6211\u4eec\u8981\u5728\u5408\u6cd5\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u8fdb\u884c\u7b2c\u4e8c\u79cd\u4e8b\u4ef6\u3002\u9664\u975e\u63a5\u4e0b\u6765\u9a6c\u4e0a\u5c31\u8981\u53d8\u6210\u975e\u6cd5\u72b6\u6001\uff0c\u624d\u8003\u8651\u5c06\u4e4b\u524d\u4e00\u6b21\u81ea\u7531\u9009\u62e9\u4ece\u4e8b\u4ef6\u4e8c\u53cd\u6094\u6210\u4e8b\u4ef6\u4e00\u3002</p> <p>\u6a21\u62df\u8fd9\u4e2a\u8d2a\u5fc3\u7b56\u7565\u5373\u53ef\uff0c\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002\u5177\u4f53\u5b9e\u73b0\u8be6\u89c1\u53c2\u8003\u4ee3\u7801\u3002</p>"},{"location":"2022-icpc-nanjing/g/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n;\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    // s\uff1a\u5e8f\u5217\u5143\u7d20\u4e4b\u548c\n    // c\uff1a\u5e8f\u5217\u5143\u7d20\u6570\u91cf\n    // t\uff1a\u4e4b\u524d\u6240\u6709\u81ea\u7531\u9009\u62e9\u4e8b\u4ef6\u4e2d\uff0c\u9009\u4e86\u51e0\u6b21\u4e8b\u4ef6\u4e8c\n    int s = 1, c = 1, t = 0;\n    bool failed = false;\n    // \u6309\u987a\u5e8f\u5904\u7406\u6240\u6709\u4e8b\u4ef6\n    for (int i = 1; i &lt;= n; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        // \u4e8b\u4ef6\u4e00\n        if (x == 1) s++, c++;\n        // \u4e8b\u4ef6\u4e8c\n        else if (x == -1) {\n            // \u5c1d\u8bd5\u76f4\u63a5\u6267\u884c\n            if (c &gt; 1) c--;\n            // \u65e0\u6cd5\u76f4\u63a5\u6267\u884c\uff0c\u5c1d\u8bd5\u53cd\u6094\u4e00\u6b21\u81ea\u7531\u9009\u62e9\n            else if (t &gt;= 1) t--, s++, c++;\n            // \u65e0\u6cd5\u53cd\u6094\uff0c\u65e0\u89e3\n            else failed = true;\n        } else {\n            // \u81ea\u7531\u9009\u62e9\u4e8b\u4ef6\uff0c\u5c3d\u53ef\u80fd\u9009\u62e9\u4e8b\u4ef6\u4e8c\n            if (c &gt; 1) t++, c--;\n            else s++, c++;\n        }\n    }\n    if (failed) printf(\"-1\\n\");\n    else {\n        int g = gcd(s, c);\n        printf(\"%d %d\\n\", s / g, c / g);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/h/","title":"H - \u5de5\u5382\u91cd\u73b0","text":""},{"location":"2022-icpc-nanjing/h/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73870/465 (0.0%)"},{"location":"2022-icpc-nanjing/h/#_2","title":"\u603b\u4f53\u601d\u8def","text":"<p>\u5148\u628a \\(\\mathcal{O}(n^2)\\) \u7684 dp \u65b9\u7a0b\u5199\u51fa\u6765\uff0c\u53d1\u73b0\u662f Minkowski Sum \u7684\u5f62\u5f0f\u3002\u56e0\u6b64\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76\u5e73\u8861\u6811\u4f18\u5316\u590d\u6742\u5ea6\u3002</p>"},{"location":"2022-icpc-nanjing/h/#_3","title":"\u8be6\u7ec6\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/h/#dp","title":"\u4ece\u66b4\u529b DP \u5f00\u59cb","text":"<p>\u4efb\u9009\u4e00\u4e2a\u70b9\u5b9a\u6839\uff0c\u8bb0\u8282\u70b9 \\(u\\) \u7684\u7236\u8282\u70b9\u662f \\(fa_u\\)\u3002\u5bf9\u4e8e\u4e00\u6761\u8fde\u63a5 \\(u\\) \u548c \\(fa_u\\) \u7684\u6743\u503c\u4e3a \\(w_u\\) \u7684\u8fb9\uff0c\u5982\u679c \\(u\\) \u7684\u5b50\u6811\u5185\u9009\u4e86 \\(i\\)\uff08\\(0 \\le i \\le k\\)\uff09\u4e2a\u5173\u952e\u70b9\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u5bf9\u5173\u952e\u70b9\u4e24\u4e24\u8ddd\u79bb\u4e4b\u548c\u7684\u8d21\u732e\u662f \\(w_u i(k-i)\\)\u3002</p> <p>\u8bb0 \\(dp_{u,i}\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u91cc\u9009\u4e86 \\(i\\)\uff08\\(0 \\le i \\le k\\)\uff09\u4e2a\u5173\u952e\u70b9\u65f6\u5b50\u6811\u91cc\u6bcf\u6761\u8fb9\u8d21\u732e\u4e4b\u548c\u7684\u6700\u5927\u503c\u3002\u8003\u8651 \\(u\\) \u7684\u6bcf\u4e2a\u5b50\u8282\u70b9 \\(v\\)\uff0c\u5f53\u628a\u4ee5 \\(v\\) \u4e3a\u6839\u4e14\u5305\u542b \\(j\\)\uff08\\(0 \\le j, i + j \\le k\\)\uff09\u4e2a\u5173\u952e\u70b9\u7684\u5b50\u6811\u5408\u5e76\u4e0a\u6765\u65f6\uff0c\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b</p> \\[ tdp_{u,ti} = \\max_{i+j=ti}\\{dp_{u,i} + dp_{v,j} + w_v j(k-j)\\} \\] <p>\u8fd9\u91cc \\(tdp_u\\) \u5373\u4e3a\u4ee5 \\(v\\) \u4e3a\u6839\u7684\u5b50\u6811\u5408\u5e76\u5230 \\(u\\) \u4e0a\u4e4b\u540e\u7684 \\(dp_u\\)\u3002\u5728\u6ca1\u6709\u5b50\u6811\u5408\u5e76\u5230 \\(u\\) \u4e0a\u65f6\uff0c\u53ea\u9700\u8981\u8003\u8651\u662f\u5426\u9009 \\(u\\)\uff0c\u56e0\u6b64\u521d\u59cb\u6709 \\(dp_{u,0}=dp_{u,1}=0\\)\u3002</p> <p>\u76f4\u63a5\u8ba1\u7b97\u8fd9\u4e00 dp \u65b9\u7a0b\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n^2)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/h/#_4","title":"\u4f18\u5316\u590d\u6742\u5ea6","text":"<p>\u7531\u4e8e\u4e24\u4e2a\u4e0a\u51f8\u6570\u7ec4\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\u7684\u7ed3\u679c\u4ecd\u7136\u662f\u4e0a\u51f8\u6570\u7ec4\uff0c\u4e24\u4e2a\u4e0a\u51f8\u6570\u7ec4\u7684 \\((\\max,+)\\) \u5377\u79ef\u7684\u7ed3\u679c\u4ecd\u7136\u662f\u4e0a\u51f8\u6570\u7ec4\uff08\u5b9e\u9645\u5c31\u662f Minkowski Sum\uff09\uff0c\u53ef\u4ee5\u5f52\u7eb3\u8bc1\u660e\u6240\u6709 \\(dp_u\\) \u90fd\u662f\u4e0a\u51f8\u7684\uff0c\u4e5f\u5c31\u662f\u5dee\u5206\u6570\u7ec4\u603b\u662f\u5355\u8c03\u4e0d\u589e\u7684\u3002\u53ef\u4ee5\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u6c42\u51fa\u6bcf\u4e2a \\(dp_u\\) \u7684\u5dee\u5206\u6570\u7ec4\u3002</p> \u5982\u4f55\u4f7f\u7528\u542f\u53d1\u5f0f\u5408\u5e76\u6c42\u4e24\u4e2a\u4e0a\u51f8\u6570\u7ec4\u7684 Minkowski Sum <p>\u8003\u8651\u8fd9\u6837\u7684\u95ee\u9898\uff1a</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u4e0a\u51f8\u6570\u7ec4 \\(a_0, a_1, \\cdots, a_n\\) \u4e0e \\(b_0, b_1, \\cdots, b_m\\)\uff08\u4e0a\u51f8\u6570\u7ec4\u6307\u7684\u662f \\((a_i - a_{i - 1})\\) \u7684\u503c\u5355\u8c03\u4e0d\u589e\uff09\uff0c\u5bf9\u6240\u6709 \\(0 \\le k \\le n + m\\) \u6c42 \\(c_k = \\max\\limits_{i + j = k} (a_i + b_j)\\) \u7684\u503c\u3002</p> <p>\u4ece\u5dee\u5206\u6570\u7ec4\u7684\u89d2\u5ea6\u8003\u8651\u95ee\u9898\u3002\u4ee4 \\(a'_i = a_i - a_{i - 1}\\)\uff0c\\(b'_i = b_i - b_{i - 1}\\)\uff0c\u4e0a\u8ff0\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a</p> <p>\u5bf9\u4e8e\u6240\u6709 \\(0 \\le k \\le n + m\\)\uff0c\u4ece \\(A'\\) \u91cc\u62ff\u51fa\u524d \\(i\\) \u4e2a\u6570\uff0c\u4ece \\(B'\\) \u91cc\u62ff\u51fa\u524d \\(j\\) \u4e2a\u6570\uff0c\u8981\u6c42 \\(i + j = k\\)\uff0c\u4e14\u62ff\u51fa\u6765\u7684\u6570\u52a0\u8d77\u6765\u6700\u5927\u3002</p> <p>\u7531\u4e8e \\(A'\\) \u548c \\(B'\\) \u90fd\u662f\u5355\u8c03\u4e0d\u589e\u7684\uff0c\u6240\u4ee5\u7b54\u6848\u5176\u5b9e\u5c31\u662f\u62ff\u51fa\u6240\u6709\u6570\u91cc\u6700\u5927\u7684 \\(k\\) \u4e2a\u6570\u3002\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u628a\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4\u5408\u5e76\u6210\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u6709\u5e8f\u6570\u7ec4\uff0c\u518d\u628a\u5c0f\u7684\u5e73\u8861\u6811\u5408\u5e76\u5230\u5927\u7684\u5e73\u8861\u6811\u91cc\u3002</p> <p>\u6ce8\u610f\u4e0a\u8ff0 dp \u65b9\u7a0b\u4e2d\uff0c\u6570\u7ec4 \\(dp_v\\) \u7684\u6bcf\u4e2a\u5143\u7d20\u9700\u8981\u52a0\u4e0a \\(w_vj(k - j)\\) \u624d\u80fd\u5408\u5e76\u5230\u7236\u8282\u70b9\u4e2d\uff08\u76f8\u5f53\u4e8e \\(dp_v\\) \u7684\u5dee\u5206\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u52a0\u4e0a \\((w_v(k + 1) - 2w_vj)\\)\uff09\uff0c\u56e0\u6b64\u9700\u8981\u652f\u6301\u5bf9\u4e00\u4e2a\u6570\u7ec4\u52a0\u5e38\u6570\u4ee5\u53ca\u52a0\u7b49\u5dee\u6570\u5217\u7684\u64cd\u4f5c\u3002</p> <p>\u6211\u4eec\u4f7f\u7528\u5e73\u8861\u6811 + lazy tag \u4e0b\u63a8\u7684\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u3002\u5982\u679c\u4f7f\u7528 Treap \u7b49\u5e73\u8861\u6811\uff0c\u52a0\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u603b\u4f53\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n \\log^2 n)\\)\uff1b\u5982\u679c\u4f7f\u7528 Splay Tree \u5219\u590d\u6742\u5ea6\u4e3a \\(O(n\\log{n})\\)\uff08\u5177\u4f53\u539f\u56e0\u8be6\u89c1 Dynamic Finger Theorem\uff09\u3002</p>"},{"location":"2022-icpc-nanjing/h/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, K;\nlong long ans;\n\nvector&lt;int&gt; e[MAXN + 10], v[MAXN + 10];\nint rt[MAXN + 10], sz[MAXN + 10], chL[MAXN + 10], chR[MAXN + 10], prio[MAXN + 10];\nlong long keyo[MAXN + 10], lc[MAXN + 10], ld[MAXN + 10];\n\n// \u4e0b\u63a8 lazy tag\nvoid down(int id) {\n    if (lc[id] == 0 &amp;&amp; ld[id] == 0) return;\n    long long t = lc[id] + (sz[chL[id]] + 1) * ld[id];\n    keyo[id] += t;\n    if (chL[id]) lc[chL[id]] += lc[id], ld[chL[id]] += ld[id];\n    if (chR[id]) lc[chR[id]] += t, ld[chR[id]] += ld[id];\n    lc[id] = ld[id] = 0;\n}\n\n// \u6c42\u5e73\u8861\u6811\u7b2c pos \u5927\u7684\u503c\nlong long query(int id, int pos) {\n    assert(id);\n    down(id);\n    int t = sz[chL[id]] + 1;\n    if (t == pos) return keyo[id];\n    else if (t &gt; pos) return query(chL[id], pos);\n    else return query(chR[id], pos - t);\n}\n\nvoid update(int id) {\n    sz[id] = sz[chL[id]] + sz[chR[id]] + 1;\n}\n\n// \u65e0\u65cb treap split\npii split(int id, long long key) {\n    down(id);\n    if (!id) return pii(0, 0);\n    if (keyo[id] &lt;= key) {\n        pii p = split(chR[id], key);\n        chR[id] = p.first;\n        update(id);\n        return pii(id, p.second);\n    } else {\n        pii p = split(chL[id], key);\n        chL[id] = p.second;\n        update(id);\n        return pii(p.first, id);\n    }\n}\n\n// \u65e0\u65cb treap merge\nint merge(int x, int y) {\n    down(x); down(y);\n    if (!x &amp;&amp; !y) return 0;\n    else if (x &amp;&amp; !y) return x;\n    else if (!x &amp;&amp; y) return y;\n\n    if (prio[x] &lt;= prio[y]) {\n        chR[x] = merge(chR[x], y);\n        update(x);\n        return x;\n    } else {\n        chL[y] = merge(x, chL[y]);\n        update(y);\n        return y;\n    }\n}\n\n// \u542f\u53d1\u5f0f\u5408\u5e76\u5e73\u8861\u6811\nint mix(int x, int y) {\n    if (sz[x] &gt; sz[y]) swap(x, y);\n    while (x) {\n        long long key = query(x, 1);\n        pii p = split(x, key);\n        x = p.second;\n        pii q = split(y, key);\n        y = merge(merge(q.first, p.first), q.second);\n    }\n    return y;\n}\n\n// \u6811 dp\nvoid dfs(int sn, int fa) {\n    rt[sn] = sn; sz[sn] = 1; prio[sn] = rand();\n    for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i];\n        if (fn == fa) continue;\n        dfs(fn, sn);\n        lc[rt[fn]] -= 1LL * v[sn][i] * (K + 1);\n        ld[rt[fn]] += 2LL * v[sn][i];\n        rt[sn] = mix(rt[sn], rt[fn]);\n    }\n}\n\nint main() {\n    srand(time(0));\n    scanf(\"%d%d\", &amp;n, &amp;K);\n    for (int i = 1; i &lt; n; i++) {\n        int x, y, z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z);\n        e[x].push_back(y); v[x].push_back(z);\n        e[y].push_back(x); v[y].push_back(z);\n    }\n\n    dfs(1, 0);\n    for (int i = 1; i &lt;= K; i++) ans -= query(rt[1], i);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/i/","title":"I - \u5b8c\u7f8e\u56de\u6587","text":""},{"location":"2022-icpc-nanjing/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387464/465 (99.8%)"},{"location":"2022-icpc-nanjing/i/#_2","title":"\u9898\u89e3","text":"<p>\\(f(A, d)\\) \u662f\u56de\u6587\u4e32\uff0c\u8bf4\u660e \\(a_d = a_{(d + n - 1) \\bmod n}\\)\u3002\u56e0\u6b64\u82e5 \\(A\\) \u662f\u5b8c\u7f8e\u56de\u6587\uff0c\u8bf4\u660e \\(a_0 = a_1 = \\cdots = a_{n - 1}\\)\u3002</p> <p>\u56e0\u6b64\u679a\u4e3e\u6700\u7ec8\u5c06 \\(A\\) \u7edf\u4e00\u6210\u54ea\u4e2a\u5b57\u7b26 \\(c\\)\uff0c\u6211\u4eec\u9700\u8981\u5c06\u6240\u6709\u975e \\(c\\) \u7684\u5b57\u7b26\u90fd\u53d8\u6210 \\(c\\)\u3002\u7b54\u6848\u5c31\u662f \\(\\min(n - cnt_c)\\)\uff0c\u5176\u4e2d \\(cnt_c\\) \u662f\u5b57\u7b26 \\(c\\) \u5728 \\(A\\) \u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n + |\\Sigma|)\\)\uff0c\u5176\u4e2d \\(|\\Sigma|\\) \u662f\u5b57\u7b26\u96c6\u5927\u5c0f\u3002</p>"},{"location":"2022-icpc-nanjing/i/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, ans;\nchar s[MAXN + 10];\n\nint cnt[26];\n\nvoid solve() {\n    scanf(\"%s\", s + 1); n = strlen(s + 1);\n    memset(cnt, 0, sizeof(cnt));\n    for (int i = 1; i &lt;= n; i++) cnt[s[i] - 'a']++;\n\n    ans = n;\n    for (int i = 0; i &lt; 26; i++) ans = min(ans, n - cnt[i]);\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/j/","title":"J - \u5b8c\u7f8e\u5339\u914d","text":""},{"location":"2022-icpc-nanjing/j/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738713/465 (2.8%)"},{"location":"2022-icpc-nanjing/j/#_2","title":"\u9898\u89e3","text":"<p>\u5f53 \\(i - a_i = j - a_j\\) \u6216 \\(i + a_i = j + a_j\\) \u65f6\uff0c\\(i\\) \u548c \\(j\\) \u6709\u8fde\u8fb9\u3002\u6211\u4eec\u6784\u5efa\u8fd9\u6837\u4e00\u4e2a\u4e8c\u5206\u56fe\uff1a\u6bcf\u4e2a \\(i\\) \u53ef\u4ee5\u770b\u505a\u662f\u4e00\u6761\u8fb9\uff0c\u8fd9\u6761\u8fb9\u8fde\u63a5\u4e8c\u5206\u56fe\u5de6\u8fb9\u7f16\u53f7\u4e3a \\((i - a_i)\\) \u7684\u70b9\uff0c\u4ee5\u53ca\u53f3\u8fb9\u7f16\u53f7\u4e3a \\((i + a_i)\\) \u7684\u70b9\u3002\u6b64\u65f6 \\(i\\) \u548c \\(j\\) \u80fd\u5339\u914d\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u5728\u4e8c\u5206\u56fe\u91cc\u5bf9\u5e94\u7684\u8fb9\u6709\u516c\u5171\u9876\u70b9\u3002</p> <p>\u95ee\u9898\u8f6c\u5316\u6210\u5c06\u4e00\u5f20\u56fe\u5206\u89e3\u6210\u82e5\u5e72\u6761\u8fb9\u4e0d\u76f8\u4ea4\uff08\u70b9\u53ef\u4ee5\u76f8\u4ea4\uff09\u7684\u957f\u5ea6\u4e3a \\(2\\) \u7684\u94fe\u3002\u9996\u5148\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5982\u679c\u5b83\u542b\u6709\u5947\u6570\u6761\u8fb9\uff0c\u90a3\u663e\u7136\u662f\u65e0\u89e3\u7684\u3002\u5426\u5219\u8003\u8651\u4ee5\u4e0b\u6784\u9020\u89e3\u7684\u65b9\u5f0f\u3002</p> <p>\u5148\u968f\u4fbf\u627e\u4e00\u68f5 dfs \u6811\uff0c\u7136\u540e\u4ece\u6df1\u5230\u6d45\u8003\u8651\u6bcf\u4e00\u4e2a\u70b9\u3002\u627e\u5230\u6240\u6709\u548c\u5b83\u76f8\u8fde\u7684\u672a\u88ab\u5339\u914d\u7684\u8fb9\uff0c\u9664\u4e86\u5b83\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\uff08\u8fd9\u6761\u8fb9\u663e\u7136\u672a\u88ab\u5339\u914d\uff09\u3002\u5982\u679c\u8fd9\u4e9b\u8fb9\u662f\u5076\u6570\u6761\uff0c\u4e24\u4e24\u5339\u914d\u5373\u53ef\uff0c\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\u4f1a\u5728\u5904\u7406\u7236\u4eb2\u65f6\u88ab\u5339\u914d\u4e0a\u3002\u5982\u679c\u8fd9\u4e9b\u8fb9\u662f\u5947\u6570\u6761\uff0c\u5c31\u628a\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\u4e5f\u52a0\u5165\u5339\u914d\u3002</p> <p>\u8fd9\u4e2a\u6784\u9020\u65b9\u5f0f\u552f\u4e00\u53ef\u80fd\u51fa\u95ee\u9898\u7684\u5730\u65b9\uff0c\u5728\u4e8e\u6839\u8282\u70b9\u4e0d\u5b58\u5728\u8fde\u5411\u7236\u4eb2\u7684\u8fb9\u3002\u4f46\u8003\u8651\u5230\u6784\u9020\u8fc7\u7a0b\u5bb9\u6613\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u9012\u5f52\u56de\u5230\u6839\u8282\u70b9\u65f6\uff0c\u6b64\u65f6 dfs \u6811\u4e0a\u672a\u5339\u914d\u7684\u8fb9\u90fd\u662f\u4ece\u6839\u8282\u70b9\u8fde\u5411\u5b50\u8282\u70b9\u7684\u8fb9\uff08\u8fd9\u91cc\u7684\u5b50\u8282\u70b9\u662f\u76f4\u63a5\u5b50\u8282\u70b9\uff0c\u800c\u4e0d\u662f\u5b50\u6811\u4e2d\u7684\u8282\u70b9\uff09\u3002\u7531\u4e8e\u4e4b\u524d\u5904\u7406\u6bcf\u4e2a\u70b9\u65f6\u90fd\u8ba9\u6bcf\u4e24\u6761\u8fb9\u4e92\u76f8\u5339\u914d\u4e86\uff0c\u5982\u679c\u6b64\u65f6\u672a\u88ab\u5339\u914d\u7684\u8fb9\u6709\u5947\u6570\u6761\uff0c\u8bf4\u660e\u6574\u4e2a\u8fde\u901a\u5757\u8fb9\u7684\u603b\u6570\u4e5f\u662f\u5947\u6570\u6761\uff0c\u4e0d\u7b26\u5408\u4e4b\u524d\u7684\u5047\u8bbe\u3002\u56e0\u6b64\u8fd9\u4e2a\u6784\u9020\u65b9\u5f0f\u4e00\u5b9a\u80fd\u6784\u9020\u51fa\u53ef\u884c\u89e3\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u6784\u9020\u7684\u5b50\u95ee\u9898\u8f83\u4e3a\u7ecf\u5178\u3002\u5728 POJ3222 \u4ee5\u53ca CF858F \u90fd\u66fe\u51fa\u73b0\u8fc7\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/j/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, A[MAXN + 10];\nvector&lt;pii&gt; ans;\n\nint L, R;\nunordered_map&lt;int, int&gt; mpL, mpR;\n\nvector&lt;int&gt; e[MAXN * 2 + 10], v[MAXN * 2 + 10];\nint deg[MAXN * 2 + 10], dep[MAXN * 2 + 10];\nbool vis[MAXN * 2 + 10];\n\n// BFS \u7528\u6765\u7edf\u8ba1\u8fde\u901a\u5757\u5185\u8fb9\u7684\u6570\u91cf\nint bfs(int S) {\n    int ret = 0;\n    queue&lt;int&gt; q;\n    q.push(S); vis[S] = true;\n    while (!q.empty()) {\n        int sn = q.front(); q.pop();\n        ret += deg[sn];\n        for (int fn : e[sn]) if (!vis[fn]) {\n            q.push(fn);\n            vis[fn] = true;\n        }\n    }\n    return ret / 2;\n}\n\n// \u8fd4\u56de\u8fd8\u6ca1\u6709\u5339\u914d\u7684\u8fb9\nint dfs(int sn, int fa, int from, int d) {\n    dep[sn] = d;\n    vector&lt;int&gt; vec;\n    for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i], idx = v[sn][i];\n        if (fn == fa) continue;\n        // \u628a\u8fd4\u7956\u8fb9\u548c\u5b50\u8282\u70b9\u4f20\u4e0a\u6765\u7684\u8fb9\u90fd\u8bb0\u5f55\u4e0b\u6765\n        if (dep[fn] &gt; 0) {\n            if (dep[fn] &lt; dep[sn]) vec.push_back(idx);\n        } else {\n            int t = dfs(fn, sn, idx, d + 1);\n            if (t &gt; 0) vec.push_back(t);\n        }\n    }\n\n    // \u628a\u8bb0\u5f55\u4e0b\u6765\u7684\u8fb9\u4e24\u4e24\u5339\u914d\n    while (vec.size() &gt; 1) {\n        int x = vec.back(); vec.pop_back();\n        int y = vec.back(); vec.pop_back();\n        ans.push_back(pii(x, y));\n    }\n    if (vec.size() == 1) {\n        // \u8fd8\u5269\u4e00\u6761\u8fb9\u6ca1\u5339\u914d\uff0c\u628a\u8fde\u5411\u7236\u8282\u70b9\u7684\u8fb9\u4e5f\u7528\u6765\u5339\u914d\n        assert(from &gt; 0);\n        ans.push_back(pii(vec.back(), from));\n        return -1;\n    } else {\n        // \u8fde\u5411\u7236\u8282\u70b9\u7684\u8fb9\u4ea4\u7ed9\u7236\u8282\u70b9\u5339\u914d\n        return from;\n    }\n}\n\nvoid solve() {\n    mpL.clear(); mpR.clear();\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;A[i]);\n        mpL[A[i] - i] = 0;\n        mpR[A[i] + i] = 0;\n    }\n    // \u79bb\u6563\u5316\n    L = R = 0;\n    for (auto it = mpL.begin(); it != mpL.end(); it++) it-&gt;second = ++L;\n    for (auto it = mpR.begin(); it != mpR.end(); it++) it-&gt;second = ++R;\n\n    // \u5efa\u7acb\u4e8c\u5206\u56fe\n    for (int i = 1; i &lt;= n * 2; i++) e[i].clear(), v[i].clear();\n    memset(deg, 0, sizeof(int) * (n * 2 + 3));\n    for (int i = 1; i &lt;= n; i++) {\n        int x = mpL[A[i] - i], y = L + mpR[A[i] + i];\n        e[x].push_back(y); v[x].push_back(i);\n        e[y].push_back(x); v[y].push_back(i);\n        deg[x]++;  deg[y]++;\n    }\n\n    ans.clear();\n    memset(vis, 0, sizeof(bool) * (n * 2 + 3));\n    memset(dep, 0, sizeof(int) * (n * 2 + 3));\n    // \u679a\u4e3e\u6bcf\u4e2a\u8fde\u901a\u5757\n    for (int i = 1; i &lt;= L + R; i++) if (!vis[i]) {\n        // \u5947\u6570\u6761\u8fb9\u5219\u65e0\u89e3\n        if (bfs(i) &amp; 1) { printf(\"No\\n\"); return; }\n        // \u5076\u6570\u6761\u8fb9\u5219\u6784\u9020\u7b54\u6848\n        dfs(i, 0, -1, 1);\n    }\n\n    printf(\"Yes\\n\");\n    for (pii p : ans) printf(\"%d %d\\n\", p.first, p.second);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/k/","title":"K - \u5806\u91cc\u7684 NaN","text":""},{"location":"2022-icpc-nanjing/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73877/465 (1.5%)"},{"location":"2022-icpc-nanjing/k/#_2","title":"\u603b\u4f53\u601d\u8def","text":"<p>\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\uff0c\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\uff08\u79f0\u4e3a\u7279\u6b8a\u70b9\uff09\u4ee5\u5916\uff0c\u5176\u5b83\u8282\u70b9\u7684\u5b50\u6811\u90fd\u662f\u6ee1\u4e8c\u53c9\u6811\u3002\u56e0\u6b64\u8ba8\u8bba NaN \u8282\u70b9\u662f\u5426\u5728\u7279\u6b8a\u70b9\u5373\u53ef\u3002</p>"},{"location":"2022-icpc-nanjing/k/#_3","title":"\u8be6\u7ec6\u9898\u89e3","text":"<p>\u4ee5\u4e0b\u9898\u89e3\u4e2d\uff0c\u7528\u201c\u9ad8\u5ea6\u201d\u8868\u793a\u4e00\u68f5\u4e8c\u53c9\u6811\u6709\u591a\u5c11\u5c42\uff0c\u800c\u7528\u201c\u6df1\u5ea6\u201d\u8868\u793a\u67d0\u4e00\u4e2a\u8282\u70b9\u4f4d\u4e8e\u7b2c\u51e0\u5c42\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4e00\u68f5\u9ad8\u5ea6\u4e3a \\(3\\) \u7684\u6ee1\u4e8c\u53c9\u6811\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u6709 \\(2^3 - 1\\) \u4e2a\u8282\u70b9\u7684\u6ee1\u4e8c\u53c9\u6811\uff09\uff0c\u8282\u70b9 \\(1\\) \u7684\u6df1\u5ea6\u4e3a \\(1\\)\uff0c\u800c\u8282\u70b9 \\(6\\) \u7684\u6df1\u5ea6\u4e3a \\(3\\)\u3002</p>"},{"location":"2022-icpc-nanjing/k/#_4","title":"\u5e38\u7528\u7ed3\u8bba","text":"<p>\u9996\u5148\uff0c\u60a8\u9700\u8981\u77e5\u9053\u4e00\u4e2a\u5e38\u7528\u7ed3\u8bba\u3002\u8003\u8651\u4ee5\u4e0b\u95ee\u9898\u3002</p> <p>\u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u4e2d\u586b\u4e00\u4e2a\u4ece \\(1\\) \u5230 \\(n\\)\uff08\u542b\u4e24\u7aef\uff09\u7684\u6570\uff0c\u8981\u6c42\u6bcf\u4e2a\u8282\u70b9\u586b\u7684\u6570\u90fd\u4e0d\u4e00\u6837\uff0c\u4e14\u540e\u4ee3\u8282\u70b9\u7684\u6570\u8981\u6bd4\u7956\u5148\u8282\u70b9\u7684\u6570\u5927\u3002\u6c42\u65b9\u6848\u6570\u3002\u8fd9\u4e2a\u95ee\u9898\u6709\u4e2a\u6bd4\u8f83\u5e38\u89c1\u7684\u540d\u5b57\uff0c\u5c31\u662f\u201c\u6811\u7684\u62d3\u6251\u5e8f\u8ba1\u6570\u201d</p> <p>\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u662f \\(\\frac{n!}{\\prod\\limits_{u \\in \\mathbb{T}} s_u}\\)\uff0c\u5176\u4e2d \\(\\mathbb{T}\\) \u8868\u793a\u6811\u7684\u6240\u6709\u8282\u70b9\u6784\u6210\u7684\u96c6\u5408\uff0c\\(s_u\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u51e0\u4e2a\u8282\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7b54\u6848\u5c31\u662f \\(n\\) \u7684\u9636\u4e58\u9664\u4ee5\u6bcf\u4e2a\u5b50\u6811\u5927\u5c0f\u7684\u4e58\u79ef\u3002</p> \u5e38\u7528\u7ed3\u8bba\u7684\u8bc1\u660e <p>\u9012\u63a8\u65b9\u7a0b</p> <p>\u4ee4 \\(f(i)\\) \u8868\u793a\u4ee5\u8282\u70b9 \\(i\\) \u4e3a\u6839\u7684\u5b50\u6811\u7684\u62d3\u6251\u5e8f\u6570\u91cf\uff0c\\(s_i\\) \u8868\u793a\u5b50\u6811 \\(i\\) \u4e2d\u7684\u8282\u70b9\u6570\u91cf\uff0c\u5219\u9012\u63a8\u65b9\u7a0b\u5982\u4e0b\uff1a</p> \\[ f(u) = (s_u - 1)! \\times \\prod\\limits_{v \\in \\text{son}(u)} \\frac{f(v)}{s_v!} \\] <p>\u9012\u63a8\u65b9\u7a0b\u7684\u89e3\u91ca\u5982\u4e0b\u3002</p> <p>\u9996\u5148\uff0c\u62d3\u6251\u5e8f\u91cc\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4e00\u5b9a\u662f\u8282\u70b9 \\(u\\) \u5360\u636e\u7684\uff0c\u5b50\u6811\u91cc\u7684\u8282\u70b9\u53ea\u80fd\u5360\u636e\u5269\u4e0b\u7684 \\((s_u - 1)\\) \u4e2a\u4f4d\u7f6e\u3002\u7531\u4e8e\u4e0d\u540c\u5b50\u6811\u91cc\u7684\u8282\u70b9\u4e0d\u4f1a\u4e92\u76f8\u5f71\u54cd\uff0c\u56e0\u6b64\u6211\u4eec\u5148\u7ed9\u6bcf\u4e2a\u5b50\u6811\u5206\u597d\u4f4d\u7f6e\uff0c\u7136\u540e\u518d\u4e58\u4e0a\u6bcf\u4e2a\u5b50\u6811\u5185\u90e8\u7684\u65b9\u6848\u6570\u5373\u53ef\u3002</p> <p>\u7ed9\u6bcf\u4e2a\u5b50\u6811\u5206\u597d\u4f4d\u7f6e\u7684\u65b9\u6848\u6570\uff0c\u76f8\u5f53\u4e8e\u5171\u6709 \\(|\\text{son}(u)|\\) \u79cd\u989c\u8272\u7684\u7403\uff0c\u5176\u4e2d\u7b2c \\(v\\) \u79cd\u989c\u8272\u7684\u7403\u5171\u6709 \\(s_v\\) \u4e2a\uff0c\u6c42\u6392\u5217\u7684\u65b9\u6848\u6570\u3002\u8fd9\u662f\u7ecf\u5178\u7684\u53ef\u91cd\u6392\u5217\u95ee\u9898\uff0c\u65b9\u6848\u6570\u4e3a</p> \\[ \\frac{(\\sum s_v)! = (s_u - 1)!}{\\prod s_v!} \\] <p>\u7136\u540e\u518d\u4e58\u4e0a\u6bcf\u4e2a\u5b50\u6811\u5185\u90e8\u7684\u65b9\u6848\u6570\uff0c\u5373 \\(\\prod f(v)\\)\uff0c\u5c31\u5f97\u5230\u4e86\u9012\u63a8\u65b9\u7a0b\u3002</p> <p>\u516c\u5f0f\u8bc1\u660e</p> <p>\u5bf9\u5b50\u6811\u4f7f\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\uff0c\u628a\u7b54\u6848\u516c\u5f0f\u5957\u8fdb\u9012\u63a8\u65b9\u7a0b\u3002</p> \\[ \\begin{matrix} f(u) &amp; = &amp; (s_u - 1)! \\times \\prod\\limits_{v \\in \\text{son}(u)} s_v! \\div \\prod\\limits_{v \\in \\text{son}(u)}\\prod\\limits_{w \\in \\text{tree}(v)} s_w \\div \\prod\\limits_{v \\in \\text{son}(u)} s_v! \\\\ &amp; = &amp; (s_u - 1)! \\div \\prod\\limits_{w \\in \\text{tree}(u) \\backslash u} s_w \\\\ &amp; = &amp; s_u! \\div \\prod\\limits_{w \\in \\text{tree}(u)} s_w \\end{matrix} \\] <p>\\(\\blacksquare\\)</p>"},{"location":"2022-icpc-nanjing/k/#_5","title":"\u5957\u7528\u7ed3\u8bba","text":"<p>\u63a5\u4e0b\u6765\u56de\u5230\u539f\u95ee\u9898\u3002\u6839\u636e\u5806\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u539f\u95ee\u9898\u8f6c\u5316\u4e3a\u4ee5\u4e0b\u8ba1\u6570\u95ee\u9898\u3002</p> <p>\u7ed9\u5b9a\u4e00\u68f5 \\(n\\) \u4e2a\u8282\u70b9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u9009\u62e9\u4e00\u4e2a\u8282\u70b9 \\(u\\)\uff0c\u5c06\u5b8c\u5168\u4e8c\u53c9\u6811\u5206\u4e3a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811 \\(U\\) \u548c\u5b50\u6811\u4e4b\u5916\u7684\u90e8\u5206 \\(U'\\)\u3002\u5c06 \\(0\\) \u586b\u5165\u8282\u70b9 \\(u\\) \u4e2d\uff0c\u8fd8\u9700\u8981\u5c06 \\(1\\) \u5230 \\((n - 1)\\) \u586b\u5165 \\(U\\) \u548c \\(U'\\) \u4e2d\uff0c\u4f7f\u5f97 \\(U\\) \u548c \\(U'\\) \u5206\u522b\u6ee1\u8db3\u540e\u4ee3\u8282\u70b9\u7684\u6570\u8981\u6bd4\u7956\u5148\u8282\u70b9\u7684\u6570\u5927\u3002\u6c42\u65b9\u6848\u6570\u3002</p> <p>\u5c1d\u8bd5\u5957\u7528\u4e0a\u9762\u7684\u5e38\u7528\u7ed3\u8bba\u8ba1\u7b97\u7b54\u6848\u3002\u8bbe \\(\\binom{n}{m}\\) \u8868\u793a\u4ece \\(n\\) \u4e2a\u7269\u54c1\u91cc\u9009 \\(m\\) \u4e2a\u7684\u7ec4\u5408\u6570\uff0c\\(P\\) \u8868\u793a \\(U\\) \u4e2d\u6bcf\u4e2a\u5b50\u6811\u5927\u5c0f\u7684\u4e58\u79ef\uff0c\\(P'\\) \u8868\u793a \\(U'\\) \u4e2d\u6bcf\u4e2a\u5b50\u6811\u5927\u5c0f\u7684\u4e58\u79ef\uff0c\u7b54\u6848\u4e3a</p> \\[ \\begin{matrix} &amp; \\frac{s_u!}{P} \\times \\frac{(n - s_u)!}{P'} \\times \\binom{n - 1}{s_u - 1} \\\\ = &amp; \\frac{s_u!}{P} \\times \\frac{(n - s_u)!}{P'} \\times \\frac{(n - 1)!}{(s_u - 1)! \\times (n - s_u)!} \\\\ = &amp; \\frac{(n - 1)! \\times s_u}{P \\times P'} \\end{matrix} \\] <p>\u53ea\u8981 \\(0\\) \u7684\u4f4d\u7f6e\u4e0d\u4e00\u6837\uff0c\u80af\u5b9a\u5c31\u662f\u4e0d\u540c\u7684\u65b9\u6848\uff0c\u56e0\u6b64\u6700\u7ec8\u603b\u7684\u65b9\u6848\u6570\u5c31\u662f \\(\\sum\\limits_{u=1}^n \\frac{(n - 1)! \\times s_u}{P \\times P'}\\)\u3002\u56e0\u4e3a\u6211\u4eec\u7b97\u7684\u662f\u4ece \\(n!\\) \u4e2a\u6392\u5217\u4e2d\u7b49\u6982\u7387\u62bd\u53d6\u7684\u6982\u7387\uff0c\u56e0\u6b64\u6982\u7387\u5c31\u662f\u603b\u65b9\u6848\u6570\u9664\u4ee5 \\(n!\\)\uff0c\u5373 \\(\\sum\\limits_{u=1}^n\\frac{s_u}{P \\times P' \\times n}\\)\u3002</p> <p>\u76f4\u63a5\u8ba1\u7b97\u8fd9\u4e2a\u5f0f\u5b50\u7684\u590d\u6742\u5ea6\u81f3\u5c11\u662f \\(\\mathcal{O}(n)\\) \u7684\uff0c\u4f46\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\u6709\u8bb8\u591a\u540c\u6784\u7684\u5b50\u6811\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u51cf\u5c11\u8ba1\u7b97\u3002</p>"},{"location":"2022-icpc-nanjing/k/#_6","title":"\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u6027\u8d28","text":"<p>\u5177\u4f53\u6765\u8bf4\uff0c\u5b8c\u5168\u4e8c\u53c9\u6811\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a\u79f0\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\u7f16\u53f7\u6700\u5927\u7684\u70b9\u4ee5\u53ca\u5b83\u7684\u7956\u5148\u8282\u70b9\u4e3a\u201c\u7279\u6b8a\u70b9\u201d\uff0c\u9664\u4e86\u7279\u6b8a\u70b9\u4ee5\u5916\uff0c\u4ee5\u5176\u5b83\u4efb\u610f\u4e00\u4e2a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u90fd\u662f\u6ee1\u4e8c\u53c9\u6811\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u7ea2\u8272\u7684\u70b9\u5c31\u662f\u7279\u6b8a\u70b9\uff0c\u800c\u4ee5\u4efb\u610f\u4e00\u4e2a\u9ed1\u8272\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u90fd\u662f\u6ee1\u4e8c\u53c9\u6811\u3002</p> <p></p> <p>\u53e6\u5916\u8fd8\u53ef\u4ee5\u53d1\u73b0\uff0c\u9664\u4e86\u8282\u70b9 \\(1\\) \u4ee5\u5916\uff0c\u6bcf\u4e00\u4e2a\u7279\u6b8a\u70b9\u90fd\u6709\u4e00\u4e2a\u6839\u8282\u70b9\u4e0e\u5b83\u540c\u6df1\u5ea6\u7684\u6ee1\u4e8c\u53c9\u5b50\u6811\u3002\u79f0\u8be5\u6ee1\u4e8c\u53c9\u6811\u4e3a\u8be5\u7279\u6b8a\u70b9\u7684\u201c\u5144\u5f1f\u6811\u201d\u3002\u4f8b\u5982\uff0c\u8282\u70b9 \\(2\\) \u7684\u5144\u5f1f\u6811\u662f\u4ee5\u8282\u70b9 \\(3\\) \u4e3a\u6839\u7684\u6ee1\u4e8c\u53c9\u6811\uff0c\u8282\u70b9 \\(5\\) \u7684\u5144\u5f1f\u6811\u662f\u4ee5\u8282\u70b9 \\(4\\) \u4e3a\u6839\u7684\u6ee1\u4e8c\u53c9\u6811\u3002\u8282\u70b9 \\(20\\) \u867d\u7136\u770b\u4f3c\u6ca1\u6709\u5144\u5f1f\u6811\uff0c\u4f46\u53ef\u4ee5\u8ba4\u4e3a\u8282\u70b9 \\(20\\) \u4e5f\u6709\u4e00\u68f5\u9ad8\u5ea6\u4e3a \\(0\\) \u7684\u5144\u5f1f\u6811\u3002</p> <p>\u56e0\u4e3a\u5144\u5f1f\u6811\u662f\u6ee1\u4e8c\u53c9\u6811\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u5173\u5fc3\u5b83\u7684\u9ad8\u5ea6\u3002\u8bbe\u6574\u68f5\u6811\u9ad8\u5ea6\u4e3a \\(D\\)\uff0c\u67d0\u4e2a\u7279\u6b8a\u70b9\u7684\u6df1\u5ea6\u4e3a \\(d\\)\u3002\u5982\u679c\u8be5\u7279\u6b8a\u70b9\u662f\u7236\u8282\u70b9\u7684\u5de6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5144\u5f1f\u6811\u7684\u9ad8\u5ea6\u4e3a \\((D - d)\\)\uff1b\u5982\u679c\u8be5\u7279\u6b8a\u70b9\u662f\u7236\u8282\u70b9\u7684\u53f3\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5144\u5f1f\u6811\u7684\u9ad8\u5ea6\u4e3a \\((D - d + 1)\\)\u3002</p> <p>\u8bb0 \\(sh(d)\\) \u8868\u793a\u6df1\u5ea6\u4e3a \\(d\\) \u7684\u7279\u6b8a\u70b9\u7684\u5144\u5f1f\u6811\u7684\u9ad8\u5ea6\uff0c\u8bb0 \\(sz(d)\\) \u8868\u793a\u4ee5\u6df1\u5ea6\u4e3a \\(d\\) \u7684\u7279\u6b8a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u6709\u51e0\u4e2a\u8282\u70b9\u3002\u5bb9\u6613\u5f97\u5230\u9012\u63a8\u5f0f\uff1a</p> \\[ \\begin{matrix} sz(D) = 1 \\\\ sz(d) = sz(d + 1) + 2^{sh(d)} \\end{matrix} \\]"},{"location":"2022-icpc-nanjing/k/#_7","title":"\u9884\u5904\u7406","text":"<p>\u63a5\u4e0b\u6765\u5c1d\u8bd5\u8ba1\u7b97 \\(P\\) \u548c \\(P'\\) \u7684\u503c\u3002\u9996\u5148\u9884\u5904\u7406\u5982\u4e0b\u503c\u3002</p> <ul> <li>\\(g(i)\\) \u8868\u793a\u4e00\u68f5\u9ad8\u5ea6\u4e3a \\(i\\) \u7684\u6ee1\u4e8c\u53c9\u6811\uff0c\u6240\u6709\u5b50\u6811\u5927\u5c0f\u7684\u4e58\u79ef\u3002\u5bb9\u6613\u5f97\u5230\u9012\u63a8\u5f0f\uff1a</li> </ul> \\[ \\begin{matrix} g(1) = 1 \\\\ g(i) = g(i - 1) \\times g(i - 1) \\times (2^i - 1) \\end{matrix} \\] <ul> <li>\\(h(i, j)\\) \u8868\u793a\u4e00\u68f5\u9ad8\u5ea6\u4e3a \\(i\\) \u6ee1\u4e8c\u53c9\u6811\uff0c\u518d\u53bb\u6389\u4efb\u610f\u4e00\u68f5\u9ad8\u5ea6\u4e3a \\(j\\) \u7684\u5b50\u6811\uff08\u8981\u6c42 \\(j \\le i\\)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u73b0\u5728\u8fd9\u68f5\u6811\u6709 \\((2^i - 2^j)\\) \u4e2a\u8282\u70b9\uff09\uff0c\u6240\u6709\u5b50\u6811\u5927\u5c0f\u7684\u4e58\u79ef\u3002\u5bb9\u6613\u5f97\u5230\u9012\u63a8\u5f0f\uff1a</li> </ul> \\[ \\begin{matrix} h(i, i) = 1 \\\\ h(i, j) = h(i - 1, j) \\times g(i - 1) \\times (2^i - 2^j) \\end{matrix} \\] <p>\u5bb9\u6613\u5f97\u5230\u6574\u68f5\u4e8c\u53c9\u6811\u5b50\u6811\u5927\u5c0f\u7684\u4e58\u79ef\u4e3a</p> \\[ X = (\\prod\\limits_{d=1}^D sz(d)) \\times (\\prod\\limits_{d=2}^D g(d)) \\] <p>\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(\\log^2 n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/k/#nan","title":"\u8ba8\u8bba NaN \u8282\u70b9\u7684\u4f4d\u7f6e","text":"<p>\u63a5\u4e0b\u6765\u6211\u4eec\u8ba8\u8bba\u4e24\u79cd\u60c5\u51b5\uff1a\\(u\\) \u662f\u7279\u6b8a\u70b9\uff0c\u4ee5\u53ca \\(u\\) \u4e0d\u662f\u7279\u6b8a\u70b9\u3002</p>"},{"location":"2022-icpc-nanjing/k/#_8","title":"\u7279\u6b8a\u70b9","text":"<p>\u5982\u679c \\(u\\) \u662f\u7279\u6b8a\u70b9\uff0c\u8bbe\u8be5\u7279\u6b8a\u70b9\u6df1\u5ea6\u4e3a \\(d\\)\uff0c\u5219\u6240\u6709\u4ee5\u6df1\u5ea6\u5c0f\u4e8e \\(d\\) \u7684\u7279\u6b8a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u5c06\u51cf\u5c11 \\(sz(d)\\)\uff0c\u800c\u5176\u5b83\u5b50\u6811\u7684\u5927\u5c0f\u4e0d\u53d7\u5f71\u54cd\u3002\u4e5f\u5c31\u662f\u8bf4</p> \\[ \\begin{matrix} s_u = sz(d) \\\\ P \\times P' = X \\div (\\prod\\limits_{i=1}^{d-1}sz(i)) \\times (\\prod\\limits_{i=1}^{d-1}(sz(i) - sz(d))) \\end{matrix} \\] <p>\u7279\u6b8a\u70b9\u53ea\u6709 \\(\\log n\\) \u4e2a\uff0c\u679a\u4e3e\u6240\u6709\u7279\u6b8a\u70b9\u5373\u53ef\u3002\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(\\log^2 n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/k/#_9","title":"\u975e\u7279\u6b8a\u70b9","text":"<p>\u5982\u679c \\(u\\) \u4e0d\u662f\u7279\u6b8a\u70b9\uff0c\u90a3\u4e48\u5b83\u4e00\u5b9a\u4f4d\u4e8e\u67d0\u4e2a\u7279\u6b8a\u70b9\u7684\u5144\u5f1f\u6811\u4e2d\u3002\u8bbe\u5b83\u4f4d\u4e8e\u6df1\u5ea6\u4e3a \\(d\\) \u7684\u7279\u6b8a\u70b9\u7684\u5144\u5f1f\u6811\u4e2d\uff0c\u4e14 \\(u\\) \u7684\u5b50\u6811\u9ad8\u5ea6\u4e3a \\(w\\)\uff0c\u5219\u6240\u6709\u4ee5\u6df1\u5ea6\u5c0f\u4e8e \\(d\\) \u7684\u7279\u6b8a\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u5927\u5c0f\u90fd\u5c06\u51cf\u5c11 \\((2^w - 1)\\)\uff0c\u5f53\u7136\u8be5\u5144\u5f1f\u6811\u5185\u90e8\u7684\u8282\u70b9\u4e5f\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u800c\u5176\u5b83\u5b50\u6811\u7684\u5927\u5c0f\u4e0d\u53d7\u5f71\u54cd\u3002</p> <p>\u4e3a\u4e86\u5904\u7406\u8fd9\u4e00\u60c5\u51b5\uff0c\u6211\u4eec\u53e6\u5916\u8ba1\u7b97\u4ee5\u4e0b\u503c\u3002</p> \\[ f(d, w) = \\prod\\limits_{i=1}^d (sz(d) - 2^w + 1) \\] <p>\u9012\u63a8\u5f0f\u5c31\u662f</p> \\[ \\begin{matrix} f(1, w) = n - 2^w + 1 \\\\ f(d, w) = f(d - 1, w) \\times (sz(d) - 2^w + 1) \\end{matrix} \\] <p>\u90a3\u4e48</p> \\[ \\begin{matrix} s_u = 2^w - 1 \\\\ P \\times P' = X \\div (\\prod\\limits_{i=1}^{d-1}sz(i)) \\times f(d - 1, w) \\div g(sh(d)) \\times h(sh(d), w) \\end{matrix} \\] <p>\u5176\u4e2d \\(\\prod\\limits_{i=1}^{d-1}sz(i) = f(d - 1, 0)\\)\uff0c\u6240\u4ee5\u5f0f\u5b50\u53ef\u4ee5 \\(\\mathcal{O}(1)\\) \u8ba1\u7b97\u3002\u6211\u4eec\u679a\u4e3e\u7279\u6b8a\u70b9\u4ee5\u53ca \\(w\\) \u5373\u53ef\u3002\u53e6\u5916\uff0c\u6ee1\u8db3 \\(d\\) \u548c \\(w\\) \u7684\u70b9 \\(u\\) \u5171\u6709 \\(2^{sh(d) - w}\\) \u79cd\uff0c\u6240\u4ee5\u8fd9\u4e00\u60c5\u51b5\u6c42\u51fa\u6765\u7684\u5f0f\u5b50\u8981\u4e58\u4ee5\u8be5\u503c\u3002\u8fd9\u4e00\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e5f\u662f \\(\\mathcal{O}(\\log^2 n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/k/#_10","title":"\u5f97\u5230\u7b54\u6848","text":"<p>\u7b54\u6848\u5c31\u662f\u4e24\u79cd\u60c5\u51b5\u52a0\u8d77\u6765\uff0c\u53e6\u5916\u9664\u6cd5\u9700\u8981\u901a\u8fc7\u9006\u5143\u8ba1\u7b97\u3002\u603b\u4f53\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\log^2 n \\log M)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/k/#_11","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXP 30\n#define MOD ((int) 1e9 + 7)\nusing namespace std;\n\nint n;\nlong long ans;\n\nint sz[MAXP + 10];\nlong long f[MAXP + 10][MAXP + 10];\nlong long g[MAXP + 10], h[MAXP + 10][MAXP + 10];\n\nlong long power(long long a, long long b) {\n    long long y = 1;\n    for (; b; b &gt;&gt;= 1) {\n        if (b &amp; 1) y = y * a % MOD;\n        a = a * a % MOD;\n    }\n    return y;\n}\n\nlong long inv(long long x) {\n    return power(x, MOD - 2);\n}\n\n// \u9884\u5904\u7406 g \u4e0e h\nvoid prepare() {\n    g[0] = g[1] = 1;\n    for (int i = 2; i &lt;= MAXP; i++) g[i] = g[i - 1] * g[i - 1] % MOD * ((1 &lt;&lt; i) - 1) % MOD;\n    h[1][1] = 1;\n    for (int i = 2; i &lt;= MAXP; i++) {\n        for (int j = 1; j &lt; i; j++) h[i][j] = h[i - 1][j] * g[i - 1] % MOD * ((1 &lt;&lt; i) - (1 &lt;&lt; j)) % MOD;\n        h[i][i] = 1;\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    int D = 0;\n    for (int x = n; x; x &gt;&gt;= 1) D++;\n\n    memset(sz, 0, sizeof(sz));\n    memset(f, 0, sizeof(f));\n\n    // \u8ba1\u7b97 sz \u4e0e f\n    sz[D] = 1;\n    long long X = 1;\n    for (int d = D, now = n; d &gt; 1; d--) {\n        int nxt = now &gt;&gt; 1;\n        int z = now &amp; 1 ? D - d + 1 : D - d;\n        sz[d - 1] = sz[d] + (1 &lt;&lt; z);\n        X = X * g[z] % MOD;\n        now = nxt;\n    }\n\n    for (int j = 0; j &lt; D; j++) f[1][j] = n - ((1 &lt;&lt; j) - 1);\n    for (int i = 2; i &lt;= D; i++) for (int j = 0, k = 0; k &lt; sz[i]; j++, k = k * 2 + 1) f[i][j] = f[i - 1][j] * (sz[i] - k) % MOD;\n    X = inv(X * f[D][0] % MOD);\n\n    ans = 0;\n    for (int d = D, now = n; ; d--) {\n        // NaN \u4f4d\u4e8e\u6df1\u5ea6\u4e3a d \u7684\u7279\u6b8a\u70b9\n        long long t = X;\n        for (int i = 1; i &lt; d; i++) t = t * sz[i] % MOD * inv(sz[i] - sz[d]) % MOD;\n        t = t * sz[d] % MOD * inv(n) % MOD;\n        ans = (ans + t) % MOD;\n\n        if (d == 1) break;\n\n        // NaN \u4f4d\u4e8e\u6df1\u5ea6\u4e3a d \u7684\u5144\u5f1f\u6811\n        int nxt = now &gt;&gt; 1;\n        int z = now &amp; 1 ? D - d + 1 : D - d;\n        for (int j = 1; j &lt;= z; j++) {\n            long long t = X * f[d - 1][0] % MOD * inv(f[d - 1][j]) % MOD;\n            t = t * g[z] % MOD * inv(h[z][j]) % MOD;\n            t = t * inv(g[j]) % MOD * ((1 &lt;&lt; j) - 1) % MOD * inv(n) % MOD;\n            t = t * (1 &lt;&lt; (z - j)) % MOD;\n            ans = (ans + t) % MOD;\n        }\n        now = nxt;\n    }\n\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    prepare();\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/l/","title":"L - \u547d\u9898\u4f5c\u6587","text":""},{"location":"2022-icpc-nanjing/l/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73870/465 (0.0%)"},{"location":"2022-icpc-nanjing/l/#_2","title":"\u9898\u89e3","text":""},{"location":"2022-icpc-nanjing/l/#_3","title":"\u5206\u7c7b\u8ba8\u8bba","text":"<p>\u6ce8\u610f\u5230\u989d\u5916\u8fb9 \\((u,v)\\)\uff08\\(u\\leq v\\)\uff09\u4e0e\u94fe\u8fb9 \\((u,u+1)\\cdots(v-1,v)\\) \u6784\u6210\u4e00\u4e2a\u73af\u3002\u6211\u4eec\u79f0\u8fd9\u6761\u989d\u5916\u8fb9\u8986\u76d6\u8fd9\u4e9b\u94fe\u8fb9\u3002</p> <p>\u663e\u7136\u9009\u62e9\u4e24\u6761\u989d\u5916\u8fb9\u662f\u65e0\u6548\u7684\uff0c\u56e0\u6b64\u4e00\u5bf9\u6ee1\u8db3\u6761\u4ef6\u7684\u8fb9 \\((e,f)\\) \u7b26\u5408\u5982\u4e0b\u6761\u4ef6\u4e4b\u4e00\uff1a</p> <ul> <li>\\(e\\) \u4e0e \\(f\\) \u4e2d\u6709\u81f3\u5c11\u4e00\u6761\u5272\u8fb9\uff08\u662f\u94fe\u8fb9\u4e14\u6ca1\u6709\u88ab\u4efb\u4f55\u989d\u5916\u8fb9\u8986\u76d6\uff09\u3002</li> <li>\\(e\\) \u4e0e \\(f\\) \u4e2d\u6709\u4e00\u6761\u989d\u5916\u8fb9\uff0c\u53e6\u4e00\u6761\u8fb9\u662f\u6761\u94fe\u8fb9\uff0c\u4e14\u8be5\u94fe\u8fb9\u53ea\u88ab\u8fd9\u6761\u989d\u5916\u8fb9\u8986\u76d6\u3002</li> <li>\\(e\\) \u4e0e \\(f\\) \u90fd\u662f\u94fe\u8fb9\uff0c\u4e14\u6240\u6709\u989d\u5916\u8fb9\u8981\u4e48\u540c\u65f6\u8986\u76d6 \\(e\\) \u4e0e \\(f\\)\uff0c\u8981\u4e48\u540c\u65f6\u4e0d\u8986\u76d6 \\(e\\) \u4e0e \\(f\\)\uff08\u88ab\u8986\u76d6\u60c5\u51b5\u5b8c\u5168\u76f8\u540c\uff09\u3002\u4e3a\u4e86\u4e0d\u4e0e\u7b2c\u4e00\u7c7b\u60c5\u51b5\u91cd\u590d\uff0c\u540c\u65f6\u8981\u6c42 \\(e\\) \u548c \\(f\\) \u90fd\u4e0d\u662f\u5272\u8fb9\uff08\u81f3\u5c11\u88ab\u4e00\u6761\u8fb9\u8986\u76d6\uff09\u3002</li> </ul> \u7b2c\u4e09\u7c7b\u60c5\u51b5\u7684\u7b80\u8981\u8bc1\u660e <p>\u5982\u679c \\(e\\) \u548c \\(f\\) \u88ab\u8986\u76d6\u7684\u60c5\u51b5\u4e0d\u540c\uff0c\u4e0d\u5931\u4e00\u822c\u6027\u5730\uff0c\u5047\u8bbe\u5b58\u5728\u4e00\u6761\u989d\u5916\u8fb9 \\(a\\) \u53ea\u8986\u76d6 \\(e\\) \u4e0d\u8986\u76d6 \\(f\\)\u3002\u53e6\u5916\u5047\u8bbe \\(e\\) \u548c \\(f\\) \u540c\u65f6\u88ab\u53e6\u4e00\u6761\u989d\u5916\u8fb9 \\(b\\) \u8986\u76d6\u3002\u7531\u4e0b\u56fe\u5bb9\u6613\u770b\u51fa\uff0c\u5373\u4f7f\u53bb\u6389 \\(e\\) \u548c \\(f\\)\uff0c\u5de6\u4e2d\u53f3\u4e09\u90e8\u5206\u4e5f\u53ef\u4ee5\u901a\u8fc7 \\(a\\) \u548c \\(b\\) \u8fde\u901a\u3002\u56e0\u6b64 \\(e\\) \u548c \\(f\\) \u88ab\u8986\u76d6\u7684\u60c5\u51b5\u5fc5\u987b\u76f8\u540c\u3002</p> <p></p> <p>\u524d\u4e24\u7c7b\u60c5\u51b5\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6216\u7ebf\u6bb5\u6811\u7b49\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u7b2c\u4e09\u7c7b\u60c5\u51b5\u3002</p>"},{"location":"2022-icpc-nanjing/l/#_4","title":"\u7ef4\u62a4\u53cc\u5411\u94fe\u8868","text":"<p>\u6211\u4eec\u7528\u53cc\u5411\u94fe\u8868\u628a\u6240\u6709\u88ab\u8986\u76d6\u60c5\u51b5\u5b8c\u5168\u76f8\u540c\u7684\u94fe\u8fb9\u4e32\u5728\u4e00\u8d77\u3002\u90a3\u4e48\u6bcf\u6b21\u52a0\u5165\u4e00\u6761\u989d\u5916\u8fb9\u65f6\uff0c\u672c\u8d28\u662f\u6709\u4e9b\u53cc\u5411\u94fe\u8868\u9700\u8981\u88ab\u5207\u5f00\u3002</p> <p>\u6ce8\u610f\u5230\u88ab\u5207\u5f00\u7684\u4f4d\u7f6e\u59cb\u7ec8\u662f\u67d0\u6761\u8fb9\u672c\u8eab\u88ab\u65b0\u7684\u989d\u5916\u8fb9\u8986\u76d6\uff0c\u4f46\u5b83\u5728\u94fe\u8868\u4e0a\u7684\u524d\u9a71\uff08\u6216\u540e\u7ee7\uff09\u6ca1\u6709\u88ab\u65b0\u7684\u989d\u5916\u8fb9\u8986\u76d6\u7684\u60c5\u51b5\u3002\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u8fdc\u524d\u9a71\u548c\u6700\u8fdc\u540e\u7ee7\uff0c\u5c31\u80fd \\(\\mathcal{O}(c \\log n)\\) \u5730\u627e\u5230\u6240\u6709\u88ab\u5207\u5f00\u7684\u4f4d\u7f6e\uff0c\u5176\u4e2d \\(c\\) \u662f\u88ab\u5207\u7684\u4f4d\u7f6e\u6570\u91cf\u3002\u7531\u4e8e\u6bcf\u6b21\u88ab\u5207\u4f1a\u589e\u52a0\u53cc\u5411\u94fe\u8868\u7684\u6570\u91cf\uff0c\u4e14\u6700\u591a\u53ea\u6709 \\((n-1)\\) \u6761\u94fe\u8868\uff0c\u56e0\u6b64\u8fd9\u91cc\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n \\log n)\\) \u3002</p> <p>\u5bf9\u4e8e\u6bcf\u6761\u88ab\u5207\u7684\u53cc\u5411\u94fe\u8868\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u5b83\u7684\u5927\u5c0f\u3002\u8fd9\u91cc\u7528\u542f\u53d1\u5f0f\u5206\u88c2\u5373\u53ef\uff0c\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n \\log n)\\)\u3002</p> <p>\u6ce8\u610f\u53cc\u5411\u94fe\u8868\u6709\u4e2d\u95f4\u67d0\u6bb5\u88ab\u5207\u51fa\u6765\u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u4e24\u4e2a\u5207\u70b9\u90fd\u4f1a\u88ab\u4e0a\u8ff0\u7ebf\u6bb5\u6811\u627e\u5230\u3002\u5177\u4f53\u5b9e\u73b0\u8be6\u89c1\u53c2\u8003\u4ee3\u7801\u3002</p>"},{"location":"2022-icpc-nanjing/l/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 2.5e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, Q;\n\n// pre[i]\uff1a\u94fe\u8fb9 i \u5728\u53cc\u5411\u94fe\u8868\u4e0a\u7684\u524d\u9a71\uff0c\u5982\u679c\u6ca1\u6709\u524d\u9a71\u5c31\u7b49\u4e8e i\n// nxt[i]\uff1a\u94fe\u8fb9 i \u5728\u53cc\u5411\u94fe\u8868\u4e0a\u7684\u540e\u7ee7\uff0c\u5982\u679c\u6ca1\u6709\u540e\u7ee7\u5c31\u7b49\u4e8e i\nint pre[MAXN + 10], nxt[MAXN + 10];\n// lCnt\uff1a\u6700\u65b0\u4ea7\u751f\u7684\u53cc\u5411\u94fe\u8868\u7684\u7f16\u53f7\n// root[i]\uff1a\u53cc\u5411\u94fe\u8868 i \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n// siz[i]\uff1a\u53cc\u5411\u94fe\u8868 i \u7684\u5927\u5c0f\n// bel[i]\uff1a\u7b2c i \u6761\u94fe\u8fb9\u5c5e\u4e8e\u54ea\u4e2a\u53cc\u5411\u94fe\u8868\nint lCnt, root[MAXN + 10], siz[MAXN + 10], bel[MAXN + 10];\n// X\uff1a\u9009\u51fa\u4e24\u4e2a\u5728\u540c\u4e00\u53cc\u5411\u94fe\u8868\u4e2d\u7684\u5143\u7d20\u7684\u65b9\u6848\u6570\nlong long X;\n\n// cnto[id][0/1]\uff1a\u533a\u95f4\u91cc\u6709\u51e0\u6761\u94fe\u8fb9\u6070\u88ab 0/1 \u6761\u8fb9\u8986\u76d6\nint cnto[MAXN * 4 + 10][2], lazy[MAXN * 4 + 10];\n// mino[id]\uff1a\u533a\u95f4\u91cc\u7684\u6700\u5c0f\u524d\u9a71\n// maxo[id]\uff1a\u533a\u95f4\u91cc\u7684\u6700\u5927\u540e\u7ee7\nint mino[MAXN * 4 + 10], maxo[MAXN * 4 + 10];\n\n// \u7ebf\u6bb5\u6811\u5efa\u6811\nvoid build(int id, int l, int r) {\n    lazy[id] = 0;\n    if (l == r) {\n        cnto[id][0] = 1; cnto[id][1] = 0;\n        mino[id] = pre[l];\n        maxo[id] = nxt[l];\n    } else {\n        int ch = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        build(ch, l, mid); build(ch | 1, mid + 1, r);\n        cnto[id][0] = cnto[ch][0] + cnto[ch | 1][0];\n        cnto[id][1] = cnto[ch][1] + cnto[ch | 1][1];\n        mino[id] = min(mino[ch], mino[ch | 1]);\n        maxo[id] = max(maxo[ch], maxo[ch | 1]);\n    }\n}\n\n// \u533a\u95f4\u8986\u76d6\u6570\u589e\u52a0\u662f\u4e00\u4e2a\u533a\u95f4\u64cd\u4f5c\uff0c\u9700\u8981\u6807\u8bb0\u4e0b\u63a8\nvoid down(int id) {\n    int ch = id &lt;&lt; 1;\n    if (lazy[id] == 1) {\n        cnto[ch][1] = cnto[ch][0]; cnto[ch][0] = 0; \n        cnto[ch | 1][1] = cnto[ch | 1][0]; cnto[ch | 1][0] = 0;\n    } else {\n        cnto[ch][0] = cnto[ch][1] = 0;\n        cnto[ch | 1][0] = cnto[ch | 1][1] = 0;\n    }\n    lazy[ch] += lazy[id]; lazy[ch | 1] += lazy[id];\n    lazy[id] = 0;\n}\n\n// [ql, qr] \u7684\u94fe\u8fb9\u589e\u52a0\u4e00\u6b21\u8986\u76d6\nvoid add(int id, int l, int r, int ql, int qr) {\n    if (l != r &amp;&amp; lazy[id]) down(id);\n    if (ql &lt;= l &amp;&amp; r &lt;= qr) {\n        cnto[id][1] = cnto[id][0]; cnto[id][0] = 0;\n        lazy[id]++;\n    } else {\n        int ch = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (ql &lt;= mid) add(ch, l, mid, ql, qr);\n        if (qr &gt; mid) add(ch | 1, mid + 1, r, ql, qr);\n        cnto[id][0] = cnto[ch][0] + cnto[ch | 1][0];\n        cnto[id][1] = cnto[ch][1] + cnto[ch | 1][1];\n    }\n}\n\n// \u627e\u5230 [ql, qr] \u4e2d\uff0c\u53cc\u5411\u94fe\u8868\u524d\u9a71\u6bd4 ql \u5c0f\u7684\u94fe\u8fb9\u6709\u54ea\u4e9b\n// \u628a (\u53cc\u5411\u94fe\u8868\u7f16\u53f7, \u94fe\u8fb9\u7f16\u53f7) \u5b58\u5728 vec \u91cc\nvoid findL(int id, int l, int r, int ql, int qr, vector&lt;pii&gt; &amp;vec) {\n    if (l == r) {\n        vec.push_back(pii(bel[l], l));\n    } else {\n        int ch = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (ql &lt;= mid &amp;&amp; mino[ch] &lt; ql) findL(ch, l, mid, ql, qr, vec);\n        if (qr &gt; mid &amp;&amp; mino[ch | 1] &lt; ql) findL(ch | 1, mid + 1, r, ql, qr, vec);\n    }\n}\n\n// \u627e\u5230 [ql, qr] \u4e2d\uff0c\u53cc\u5411\u94fe\u8868\u540e\u7ee7\u6bd4 qr \u5927\u7684\u94fe\u8fb9\u6709\u54ea\u4e9b\n// \u628a (\u53cc\u5411\u94fe\u8868\u7f16\u53f7, \u94fe\u8fb9\u7f16\u53f7) \u5b58\u5728 vec \u91cc\nvoid findR(int id, int l, int r, int ql, int qr, vector&lt;pii&gt; &amp;vec) {\n    if (l == r) {\n        vec.push_back(pii(bel[l], nxt[l]));\n    } else {\n        int ch = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (ql &lt;= mid &amp;&amp; maxo[ch] &gt; qr) findR(ch, l, mid, ql, qr, vec);\n        if (qr &gt; mid &amp;&amp; maxo[ch | 1] &gt; qr) findR(ch | 1, mid + 1, r, ql, qr, vec);\n    }\n}\n\n// \u66f4\u6539\u94fe\u8fb9 pos \u5728\u53cc\u5411\u94fe\u8868\u91cc\u7684\u524d\u9a71\u4e3a val\nvoid setPre(int id, int l, int r, int pos, int val) {\n    if (l == r) {\n        pre[l] = mino[id] = val;\n    } else {\n        int ch = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (pos &lt;= mid) setPre(ch, l, mid, pos, val);\n        else setPre(ch | 1, mid + 1, r, pos, val);\n        mino[id] = min(mino[ch], mino[ch | 1]);\n    }\n}\n\n// \u66f4\u6539\u94fe\u8fb9 pos \u5728\u53cc\u5411\u94fe\u8868\u91cc\u7684\u540e\u7ee7\u4e3a val\nvoid setNxt(int id, int l, int r, int pos, int val) {\n    if (l == r) {\n        nxt[l] = maxo[id] = val;\n    } else {\n        int ch = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (pos &lt;= mid) setNxt(ch, l, mid, pos, val);\n        else setNxt(ch | 1, mid + 1, r, pos, val);\n        maxo[id] = max(maxo[ch], maxo[ch | 1]);\n    }\n}\n\n// \u628a vec \u91cc\u7684\u6240\u6709\u94fe\u8fb9\u90fd\u5212\u5230\u65b0\u7684\u53cc\u5411\u94fe\u8868\u91cc\n// \u524d\u9a71\u540e\u7ee7\u7684\u4fee\u6539\u64cd\u4f5c\u5728\u5176\u5b83\u5730\u65b9\u8fdb\u884c\nvoid newChain(vector&lt;int&gt; &amp;vec) {\n    lCnt++;\n    root[lCnt] = vec[0];\n    siz[lCnt] = vec.size();\n    for (int x : vec) bel[x] = lCnt;\n}\n\n// \u53cc\u5411\u94fe\u8868\u4e2d\uff0cx \u548c\u5b83\u7684\u524d\u9a71\u65ad\u5f00\nvoid disconn(int x) {\n    int y = pre[x];\n    setPre(1, 1, n - 1, x, x);\n    setNxt(1, 1, n - 1, y, y);\n}\n\n// \u53cc\u5411\u94fe\u8868\u4e2d\uff0cx \u6210\u4e3a y \u7684\u524d\u9a71\nvoid conn(int x, int y) {\n    setPre(1, 1, n - 1, y, x);\n    setNxt(1, 1, n - 1, x, y);\n}\n\n// \u4ece x \u4e2a\u5143\u7d20\u91cc\u9009 2 \u4e2a\u7684\u65b9\u6848\u6570\nlong long gao(int x) {\n    return 1LL * x * (x - 1) / 2;\n}\n\n// \u542f\u53d1\u5f0f\u5206\u88c2\n// \u628a\u5143\u7d20 [P1, P2) \u4ece\u94fe\u8868 which \u4e2d\u62bd\u51fa\u6765\uff0c\u5269\u4e0b\u7684\u90e8\u5206\u91cd\u65b0\u8fde\u597d\nvoid cut(int which, int P1, int P2) {\n    X -= gao(siz[which]);\n\n    vector&lt;int&gt; v1, v2;\n    int i = root[which], j = P1;\n    while (true) {\n        v1.push_back(i); v2.push_back(j);\n        int ii;\n        if (nxt[i] == P1) ii = P2;\n        else ii = nxt[i];\n        int jj = nxt[j];\n        if (i == ii) {\n            newChain(v1);\n            root[which] = P1;\n            siz[which] -= v1.size();\n            break;\n        } else if (jj == P2) {\n            newChain(v2);\n            siz[which] -= v2.size();\n            break;\n        } else {\n            i = ii;\n            j = jj;\n        }\n    }\n\n    int tmp = pre[P1];\n    disconn(P1); disconn(P2); conn(tmp, P2);\n\n    X += gao(siz[lCnt]) + gao(siz[which]);\n}\n\n// \u542f\u53d1\u5f0f\u5206\u88c2\n// \u628a\u5143\u7d20 P \u4ee5\u53ca\u4ee5\u540e\u7684\u90e8\u5206\u4ece\u94fe\u8868 which \u4e2d\u62bd\u51fa\u6765\nvoid cut(int which, int P) {\n    X -= gao(siz[which]);\n\n    vector&lt;int&gt; v1, v2;\n    int i = root[which], j = P;\n    while (true) {\n        v1.push_back(i); v2.push_back(j);\n        if (nxt[i] == P) {\n            newChain(v1);\n            root[which] = P;\n            siz[which] -= v1.size();\n            break;\n        } else if (nxt[j] == j) {\n            newChain(v2);\n            siz[which] -= v2.size();\n            break;\n        } else {\n            i = nxt[i];\n            j = nxt[j];\n        }\n    }\n\n    disconn(P);\n\n    X += gao(siz[lCnt]) + gao(siz[which]);\n}\n\n// \u7edf\u8ba1\u52a0\u5165 q \u6761\u989d\u5916\u8fb9\u540e\u7684\u7b54\u6848\nvoid calcAns(int q) {\n    if (n &gt; 2 &amp;&amp; lazy[1]) down(1);\n    int zero = cnto[1][0], one = cnto[1][1];\n    // \u7b2c\u4e00\u7c7b\u60c5\u51b5\uff1a\u9009\u62e9\u4e00\u6761\u5272\u8fb9\n    long long ans = 1LL * zero * (n - 2 + q) - 1LL * zero * (zero - 1) / 2;\n    // \u7b2c\u4e8c\u7c7b\u60c5\u51b5\uff1a\u9009\u62e9\u6070\u88ab\u8986\u76d6\u4e00\u6b21\u7684\u94fe\u8fb9\u548c\u5b83\u7684\u989d\u5916\u8fb9\n    ans += one;\n    // \u7b2c\u4e09\u7c7b\u60c5\u51b5\uff1a\u9009\u62e9\u4e24\u6761\u8986\u76d6\u60c5\u51b5\u76f8\u540c\u7684\u8fb9\uff0c\u4f46\u4e0d\u80fd\u662f\u5272\u8fb9\n    ans += X - 1LL * zero * (zero - 1) / 2;\n    printf(\"%lld\\n\", ans);\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;Q);\n\n    if (n == 1) {\n        for (int q = 1; q &lt;= Q; q++) {\n            scanf(\"%*d%*d\");\n            printf(\"0\\n\");\n        }\n        return;\n    }\n\n    // \u4e00\u5f00\u59cb\u6240\u6709\u94fe\u8fb9\u90fd\u5728\u540c\u4e00\u6761\u53cc\u5411\u94fe\u8868\u91cc\n    lCnt = 1; root[1] = 1; siz[1] = n - 1;\n    for (int i = 1; i &lt; n; i++) {\n        pre[i] = max(1, i - 1);\n        nxt[i] = min(n - 1, i + 1);\n        bel[i] = 1;\n    }\n    X = gao(n - 1);\n    build(1, 1, n - 1);\n\n    for (int q = 1; q &lt;= Q; q++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        if (x &gt; y) swap(x, y);\n        if (x == y) { calcAns(q); continue; }\n        y--;\n\n        // \u94fe\u8fb9 [x, y] \u88ab\u8986\u76d6\u6b21\u6570\u589e\u52a0\n        add(1, 1, n - 1, x, y);\n        // \u627e\u5230\u6240\u6709\u53cc\u5411\u94fe\u8868\u4e2d\u9700\u8981\u88ab\u5207\u5f00\u7684\u5730\u65b9\n        vector&lt;pii&gt; vec;\n        findL(1, 1, n - 1, x, y, vec);\n        findR(1, 1, n - 1, x, y, vec);\n        sort(vec.begin(), vec.end());\n        // \u5207\u5f00\u53cc\u5411\u94fe\u8868\n        for (int i = 0; i &lt; vec.size(); ) {\n            if (i + 1 &lt; vec.size() &amp;&amp; vec[i].first == vec[i + 1].first) {\n                // \u53cc\u5411\u94fe\u8868\u6709\u4e2d\u95f4\u67d0\u6bb5\u88ab\u5207\u51fa\u6765\u7684\u60c5\u51b5\n                cut(vec[i].first, vec[i].second, vec[i + 1].second);\n                i += 2;\n            } else {\n                cut(vec[i].first, vec[i].second);\n                i++;\n            }\n        }\n        calcAns(q);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2022-icpc-nanjing/m/","title":"M - \u6e05\u7a7a\u6c34\u7bb1","text":""},{"location":"2022-icpc-nanjing/m/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042022 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387124/465 (26.7%)"},{"location":"2022-icpc-nanjing/m/#_2","title":"\u9898\u89e3","text":"<p>\u6bcf\u4e2a\u5c40\u90e8\u6700\u4f4e\u70b9\u90fd\u8981\u5b89\u88c5\u4e00\u4e2a\u51fa\u6c34\u9600\u95e8\uff0c\u56e0\u6b64\u672c\u9898\u6c42\u7684\u5c31\u662f\u5c40\u90e8\u6700\u4f4e\u70b9\u7684\u6570\u91cf\u3002</p> <p></p> <p>\u5982\u4e0a\u56fe\u6240\u793a\uff0c\u5c40\u90e8\u6700\u4f4e\u70b9\u53ef\u4ee5\u6309\u662f\u5426\u4f4d\u4e8e\u6c34\u5e73\u5e73\u9762\u4e0a\u5206\u6210\u4e24\u79cd\u60c5\u51b5\u3002</p> <p>\u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5c40\u90e8\u6700\u4f4e\u70b9 \\(P\\) \u4e0d\u5728\u6c34\u5e73\u5e73\u9762\u4e0a\u3002\u90a3\u4e48</p> <ul> <li>\u4ee5 \\(P\\) \u4e3a\u7ec8\u70b9\u7684\u5411\u91cf \\(\\vec v_1\\) \u7684 \\(y\\) \u503c\u5e94\u8be5\u5c0f\u4e8e \\(0\\)\uff0c\u800c\u4ee5 \\(P\\) \u4e3a\u8d77\u70b9\u7684\u5411\u91cf \\(\\vec v_2\\) \u7684 \\(y\\) \u503c\u5e94\u8be5\u5927\u4e8e \\(0\\)\u3002</li> <li>\u4e3a\u4e86\u9632\u6b62\u201c\u5929\u82b1\u677f\u201d\u4e0a\u7684\u70b9\u88ab\u9519\u8bef\u7edf\u8ba1\uff0c\u7531\u4e8e\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u662f\u6309\u9006\u65f6\u9488\u987a\u5e8f\u7ed9\u51fa\u7684\uff0c\u56e0\u6b64\u8fd8\u8981\u989d\u5916\u5224\u65ad \\(\\vec v_1 \\times \\vec v_2 &gt; 0\\)\uff0c\u8fd9\u91cc \\(\\times\\) \u662f\u5411\u91cf\u7684\u53c9\u79ef\u3002\u8bf7\u770b\u4e0b\u534a\u90e8\u5206\u7684\u56fe\u50cf\uff0c\u4f53\u4f1a\u865a\u7ebf\u4e0a\u65b9\u548c\u4e0b\u65b9\u76f8\u4f3c\u7ed3\u6784\u5728\u53c9\u79ef\u7ed3\u679c\u4e0a\u7684\u533a\u522b\u3002</li> </ul> <p>\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5c40\u90e8\u6700\u4f4e\u70b9 \\(P\\) \u5728\u6c34\u5e73\u5e73\u9762\u4e0a\u3002\u6211\u4eec\u4e0d\u59a8\u4ee5\u5e73\u9762\u4e0a\u7684\u7b2c\u4e00\u4e2a\u70b9 \\(P\\) \u4e3a\u4ee3\u8868\u3002\u8fd9\u91cc\u7684\u201c\u7b2c\u4e00\u4e2a\u70b9\u201d\u6307\u7684\u662f\u4ee5 \\(P\\) \u4e3a\u7ec8\u70b9\u7684\u5411\u91cf\u4e0d\u662f\u6c34\u5e73\u7684\u3002</p> <ul> <li>\u4ee5 \\(P\\) \u4e3a\u7ec8\u70b9\u7684\u5411\u91cf \\(\\vec v_1\\) \u7684 \\(y\\) \u503c\u5e94\u8be5\u5c0f\u4e8e \\(0\\)\uff0c\u800c\u4ece \\(P\\) \u5f00\u59cb\u4e0b\u4e00\u6761\u4e0d\u662f\u6c34\u5e73\u7684\u5411\u91cf \\(\\vec v_2\\) \u7684 \\(y\\) \u503c\u5e94\u8be5\u5927\u4e8e \\(0\\)\u3002</li> <li>\u4e3a\u4e86\u9632\u6b62\u201c\u5929\u82b1\u677f\u201d\u4e0a\u7684\u70b9\u88ab\u9519\u8bef\u7edf\u8ba1\uff0c\u7531\u4e8e\u591a\u8fb9\u5f62\u7684\u9876\u70b9\u662f\u6309\u9006\u65f6\u9488\u987a\u5e8f\u7ed9\u51fa\u7684\uff0c\u56e0\u6b64\u8fd8\u8981\u989d\u5916\u5224\u65ad \\(P\\) \u7684\u4e0b\u4e00\u4e2a\u70b9 \\(Q\\)\u3002\\(Q\\) \u7684 \\(x\\) \u5750\u6807\u9700\u8981\u5927\u4e8e \\(P\\) \u7684 \\(x\\) \u5750\u6807\u3002\u8bf7\u770b\u4e0b\u534a\u90e8\u5206\u7684\u56fe\u50cf\uff0c\u4f53\u4f1a\u865a\u7ebf\u4e0a\u65b9\u548c\u4e0b\u65b9\u76f8\u4f3c\u7ed3\u6784\u5728 \\(x\\) \u5750\u6807\u5173\u7cfb\u4e0a\u7684\u533a\u522b\u3002\u53e6\u5916\u6ce8\u610f\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u53c9\u79ef\u53ef\u4ee5\u662f\u4efb\u610f\u503c\uff08\u8bf7\u770b\u4e2d\u95f4\u548c\u53f3\u8fb9\u7684\u56fe\uff09\uff0c\u56e0\u6b64\u65e0\u6cd5\u7528\u53c9\u79ef\u8fdb\u884c\u5224\u65ad\u3002</li> </ul> <p>\u679a\u4e3e\u6bcf\u4e2a\u70b9\u5e76\u8fdb\u884c\u5224\u65ad\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2022-icpc-nanjing/m/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 2000\nusing namespace std;\n\nint n, ans;\nlong long X[MAXN + 10], Y[MAXN + 10];\n\nlong long cross(long long x1, long long y1, long long x2, long long y2) {\n    return x1 * y2 - x2 * y1;\n}\n\nint main() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++) scanf(\"%lld%lld\", &amp;X[i], &amp;Y[i]);\n\n    for (int i = 0, j = 1; i &lt; n; i++) {\n        // j \u662f\u4e0b\u4e00\u4e2a y \u503c\u4e0d\u76f8\u7b49\u7684\u70b9\n        while (Y[i] == Y[j]) j = (j + 1) % n;\n        int pre = (i + n - 1) % n;\n        if (Y[i] &lt; Y[pre] &amp;&amp; Y[i] &lt; Y[j]) {\n            if (Y[i] != Y[(i + 1) % n]) {\n                // \u60c5\u51b5\u4e00\n                assert(j == (i + 1) % n);\n                if (cross(X[i] - X[pre], Y[i] - Y[pre], X[j] - X[i], Y[j] - Y[i]) &gt; 0) ans++;\n            } else {\n                // \u60c5\u51b5\u4e8c\n                if (X[(i + 1) % n] &gt; X[i]) ans++;\n            }\n        }\n    }\n\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-jinan/","title":"2023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u6d4e\u5357\u7ad9","text":""},{"location":"2023-icpc-jinan/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2023/12/03 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ \u9009\u624b\u8bc4\u4ef7zhihu \u73b0\u573a\u76f4\u64adbilibili"},{"location":"2023-icpc-jinan/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 272, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 31, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 333, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 12, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 52, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 204, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 10, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 330, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 117, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 97, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 39, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 90, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 83, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 31, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 39, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 19, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 19, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2023-icpc-jinan/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2023-icpc-jinan/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2023-icpc-jinan/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":""},{"location":"2023-icpc-nanjing/","title":"2023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9","text":""},{"location":"2023-icpc-nanjing/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2023/11/05 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ \u9009\u624b\u8bc4\u4ef7zhihu \u73b0\u573a\u76f4\u64adbilibili"},{"location":"2023-icpc-nanjing/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 142, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 234, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 14, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 243, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 186, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 331, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 116, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 61, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 53, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 40, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 54, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 49, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 37, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 49, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 32, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2023-icpc-nanjing/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2023-icpc-nanjing/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2023-icpc-nanjing/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>A - \u9177\uff0c\u6628\u65e5\u56db\u6b21\u91cd\u73b0</li> <li>B - \u4ea4\u5e76\u6bd4</li> <li>C - \u539f\u6839</li> <li>D - \u7ea2\u9ed1\u6811</li> <li>E - \u5ef6\u4f38\u8ddd\u79bb</li> <li>F - \u7b49\u4ef7\u91cd\u5199</li> <li>G - \u80cc\u5305</li> <li>H - \u8c1c\u9898\uff1a\u95ee\u53f7</li> <li>I - \u8ba1\u6570\u5668</li> <li>J - \u540e\u7f00\u7ed3\u6784</li> <li>K - \u534e\u4e3d\u6536\u573a</li> <li>L - \u7535\u68af</li> <li>M - \u63a5\u96e8\u6c34</li> </ul>"},{"location":"2023-icpc-nanjing/a/","title":"A - \u9177\uff0c\u6628\u65e5\u56db\u6b21\u91cd\u73b0","text":""},{"location":"2023-icpc-nanjing/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387152/342 (44.4%)"},{"location":"2023-icpc-nanjing/a/#_2","title":"\u9898\u89e3","text":"<p>\u8003\u8651\u7528 \\((i, j, i', j')\\) \u8868\u793a\u4e24\u53ea\u5206\u522b\u4f4d\u4e8e \\((i, j)\\) \u548c \\((i', j')\\) \u7684\u888b\u9f20\u3002\u8fd9\u4e2a\u72b6\u6001\u53ef\u4ee5\u5f80\u4e0a\u8d70\u5230 \\((i - 1, j, i' - 1, j')\\)\uff0c\u5f80\u4e0b\u8d70\u5230 \\((i + 1, j, i' + 1, j')\\)\uff0c\u5f80\u5de6\u8d70\u5230 \\((i, j - 1, i', j' - 1)\\)\uff0c\u5f80\u53f3\u8d70\u5230 \\((i, j + 1, i', j' + 1)\\)\u3002\u5982\u679c\u6700\u540e\u80fd\u8d70\u5230 \\((r, c, r', c')\\)\uff0c\u5176\u4e2d \\((r, c)\\) \u662f\u7a7a\u5730\uff0c\\((r', c')\\) \u662f\u6d1e\u6216\u8005\u68cb\u76d8\u5916\u9762\uff0c\u90a3\u4e48\u4e00\u5f00\u59cb\u4f4d\u4e8e \\((i, j)\\) \u7684\u888b\u9f20\u5c31\u80fd\u201c\u6253\u8d25\u201d\u4e00\u5f00\u59cb\u4f4d\u4e8e \\((i', j')\\) \u7684\u888b\u9f20\u3002</p> <p>\u6309\u4e0a\u9762\u7684\u63cf\u8ff0\u8fde\u8fb9\uff0c\u901a\u8fc7\u4e00\u6b21 bfs \u5373\u53ef\u6c42\u51fa\u4efb\u610f\u4e24\u53ea\u888b\u9f20\u4e4b\u95f4\u7684\u201c\u6253\u8d25\u201d\u5173\u7cfb\u3002\u5bf9\u4e8e\u4e00\u53ea\u888b\u9f20\uff0c\u76f4\u63a5\u5224\u65ad\u5b83\u662f\u5426\u53ef\u4ee5\u6253\u8d25\u5176\u5b83\u6240\u6709\u888b\u9f20\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u53ef\u80fd\u7684\u8d62\u5bb6\u3002</p> <p>\u4e3a\u4ec0\u4e48\u76f4\u63a5\u8fd9\u6837\u5224\u65ad\u5c31\u662f\u5bf9\u7684\u5462\uff1f\u4f1a\u4e0d\u4f1a\u4e00\u5f00\u59cb \\((i, j)\\) \u53ef\u4ee5\u6253\u8d25 \\((i_1, j_1)\\)\uff0c\u7ed3\u679c\u7ecf\u8fc7\u4e00\u4e9b\u64cd\u4f5c\u5148\u628a\u53e6\u4e00\u53ea\u888b\u9f20 \\((i_2, j_2)\\) \u79fb\u9664\u4e4b\u540e\uff0c\\((i_1, j_1)\\) \u53d8\u5f97\u65e0\u6cd5\u79fb\u9664\u4e86\uff1f</p> <p>\u6ce8\u610f\u5230\u4e24\u53ea\u888b\u9f20\u7684\u76f8\u5bf9\u4f4d\u7f6e\u90fd\u662f\u4e0d\u53d8\u7684\uff0c\u56e0\u6b64\u4e00\u53ea\u888b\u9f20\u79fb\u9664\u4e86\u53e6\u4e00\u53ea\u888b\u9f20\u4e4b\u540e\uff0c\u53ef\u4ee5\u8ba9\u5b83\u56de\u5230\u539f\u4f4d\uff0c\u6b64\u65f6\u5176\u5b83\u888b\u9f20\u4e5f\u56de\u5230\u4e86\u539f\u4f4d\uff0c\u518d\u7ee7\u7eed\u79fb\u9664\u4e0b\u4e00\u53ea\u888b\u9f20\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2m^2)\\)\u3002</p>"},{"location":"2023-icpc-nanjing/a/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXP 1000\nusing namespace std;\n\nint n, m, ans;\nvector&lt;string&gt; MAP;\n\nchar s[MAXP + 10];\n// vis[x]\uff1a\u72b6\u6001 x \u4f4d\u4e8e\u54ea\u4e2a\u8fde\u901a\u5757\u91cc\n// \u5982\u679c\u72b6\u6001 x \u548c y \u7684\u4e24\u53ea\u888b\u9f20\u90fd\u6ca1\u6709\u88ab\u79fb\u9664\uff0c\u90a3\u4e48\u5b83\u4eec\u4e4b\u95f4\u7684\u8fde\u8fb9\u5c31\u662f\u53cc\u5411\u7684\uff0c\u53ef\u4ee5\u7ef4\u62a4\u8fde\u901a\u5757\nint vis[MAXP * MAXP + 10];\n// flag[x]\uff1a\u72b6\u6001 x \u662f\u5426\u80fd\u8fbe\u6210\u7b2c\u4e00\u53ea\u888b\u9f20\u6253\u8d25\u7b2c\u4e8c\u53ea\u888b\u9f20\u7684\u60c5\u51b5\nbool flag[MAXP * MAXP + 10];\n\n// \u628a\u72b6\u6001 (i, j, r, c) \u6620\u5c04\u6210\u4e00\u4e2a\u6574\u6570\nint gao(int i, int j, int r, int c) {\n    return\n        i * m * n * m +\n        j * n * m +\n        r * m +\n        c;\n}\n\n// \u628a\u6574\u6570 msk \u6620\u5c04\u56de\u72b6\u6001 (i, j, r, c)\nvoid ungao(int msk, int &amp;i, int &amp;j, int &amp;r, int &amp;c) {\n    i = msk / (m * n * m);\n    j = msk / (n * m) % m;\n    r = msk / m % n;\n    c = msk % m;\n}\n\n// \u68c0\u67e5 (i, j) \u662f\u4e0d\u662f\u6d1e\u6216\u8005\u68cb\u76d8\u5916\u9762\nbool fall(int i, int j) {\n    return i &lt; 0 || j &lt; 0 || i &gt;= n || j &gt;= m || MAP[i][j] == 'O';\n}\n\nshort dir[4][2] = {0, 1, 1, 0, -1, 0, 0, -1};\n// \u4ece\u72b6\u6001 S \u5f00\u59cb bfs\nvoid bfs(int S) {\n    queue&lt;int&gt; q;\n    q.push(S); vis[S] = S;\n    flag[S] = false;\n\n    while (!q.empty()) {\n        int i, j, r, c; ungao(q.front(), i, j, r, c); q.pop();\n        for (int k = 0; k &lt; 4; k++) {\n            int ii = i + dir[k][0], jj = j + dir[k][1];\n            int rr = r + dir[k][0], cc = c + dir[k][1];\n            // \u7b2c\u4e00\u53ea\u888b\u9f20\u8fd8\u5728\u7a7a\u5730\u4e0a\n            if (fall(ii, jj)) continue;\n            // \u5982\u679c\u7b2c\u4e8c\u53ea\u888b\u9f20\u6b64\u65f6\u88ab\u79fb\u9664\u4e86\n            // \u5219 S \u6240\u5728\u7684\u8fde\u901a\u5757\u7684\u6240\u6709\u72b6\u6001\uff0c\u90fd\u80fd\u8fbe\u6210\u7b2c\u4e00\u53ea\u888b\u9f20\u6253\u8d25\u7b2c\u4e8c\u53ea\u888b\u9f20\n            if (fall(rr, cc)) { flag[S] = true; continue; }\n            int nxt = gao(ii, jj, rr, cc);\n            if (vis[nxt] &gt;= 0) continue;\n            q.push(nxt); vis[nxt] = S;\n        }\n    }\n}\n\n// \u68c0\u67e5\u4e00\u5f00\u59cb\u4f4d\u4e8e (i, j) \u7684\u888b\u9f20\u80fd\u5426\u6253\u8d25\u5176\u5b83\u6240\u6709\u888b\u9f20\nint check(int i, int j) {\n    for (int r = 0; r &lt; n; r++) for (int c = 0; c &lt; m; c++) if (MAP[r][c] == '.') {\n        if (i == r &amp;&amp; j == c) continue;\n        int msk = gao(i, j, r, c);\n        if (vis[msk] == -1) bfs(msk);\n        if (!flag[vis[msk]]) return 0;\n    }\n    return 1;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    MAP.clear();\n    for (int i = 0; i &lt; n; i++) {\n        scanf(\"%s\", s);\n        MAP.push_back(string(s));\n    }\n\n    memset(vis, -1, sizeof(int) * (n * m * n * m + 3));\n    ans = 0;\n    // \u68c0\u67e5\u6bcf\u53ea\u888b\u9f20\u80fd\u5426\u6253\u8d25\u5176\u5b83\u6240\u6709\u888b\u9f20\n    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; m; j++) if (MAP[i][j] == '.') ans += check(i, j);\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/b/","title":"B - Intersection over Union","text":""},{"location":"2023-icpc-nanjing/b/#basic-information","title":"Basic Information","text":"ContestThe 2023 ICPC Asia Nanjing Regional Contest Team AC Ratio0/342 (0.0%)"},{"location":"2023-icpc-nanjing/b/#tutorial","title":"Tutorial","text":"<p>Symmetry can greatly simplify the problem. Only aspect ratio and orientation of the given OBB matter. The answer is unchanged after many transformations applied to the given OBB, such as translation, reflection and isotropy scaling. </p> <p>First, we shift the given OBB so that its center is at the origin. Then we can apply some reflection transforms to the given OBB, so that it be parameterized with long side \\(a\\), short side \\(b\\) and orientation \\(\\theta\\) ($a \\ge b \\gt 0 $, $ 0 \\le \\theta \\le \\frac{\\pi}{4}$). Four points of the OBB can be presented in the following order:</p> \\[ \\begin{pmatrix} x_1 &amp; y_1 \\\\ x_2 &amp; y_2 \\\\ x_3 &amp; y_3 \\\\ x_4 &amp; y_4  \\end {pmatrix} = \\frac{1}{2} \\begin{pmatrix} + a \\cos \\theta + b \\sin \\theta &amp; + a \\sin \\theta - b \\cos \\theta \\\\ + a \\cos \\theta - b \\sin \\theta &amp; + a \\sin \\theta + b \\cos \\theta \\\\ - a \\cos \\theta - b \\sin \\theta &amp; - a \\sin \\theta + b \\cos \\theta \\\\ - a \\cos \\theta + b \\sin \\theta &amp; - a \\sin \\theta - b \\cos \\theta \\end {pmatrix} \\] <p>The target AABB can be parameterized with 4 variables \\(x\\), \\(y\\), \\(w\\), \\(h\\). Its center is at \\((x, y)\\). And the left, right, up and down boundary should be \\(x - \\frac{w}{2}\\), \\(x + \\frac{w}{2}\\), \\(y + \\frac{h}{2}\\) and \\(y - \\frac{h}{2}\\). We want to maximize \\(IOU(x, y, w, h)\\), where \\(I_{w, h}(x, y)\\) is area of the intersection of OBB and AABB (\\(w &gt; 0, h &gt; 0\\)).</p> \\[ IOU(x, y, w, h) = \\frac{I_{w, h}(x, y)}{a b + w h - I_{w,h}(x, y)} \\] <p>For central symmetry, \\(I_{w,h}(x, y)\\) is an even function: \\(I_{w, h}(x, y) = I_{w, h}(-x, -y)\\). And \\(I_{w, h}(x, y)\\) is also a convex function, so \\(I_{w, h}(0, 0) = I_{w, h}(\\frac{x - x}{2}, \\frac{y - y}{2}) \\ge \\frac{I_{w, h}(x, y)+ I_{w, h}(-x, -y)}{2} = I_{w, h}(x, y)\\).</p> <p>\\(I_{w, h}(0, 0) \\ge I_{w, h}(x, y) \\rightarrow IOU(0, 0, w, h) \\ge IOU(x, y, w, h)\\), so the center of target AABB can be placed at the origin. Then the task becomes to maximize \\(g(w, h)\\), where</p> \\[ g(w, h) := IOU(0, 0, w, h) \\] <p>Generally \\(g(w, h)\\) can be addressed as a function of \\(h\\) for fixed \\(w\\):</p> \\[g(w, h) = \\frac{union + intersection}{union} - 1 = \\frac{a b + w h}{a b + \\int_0^h{u(t) dt}} - 1\\] <p>where \\(u(h)\\) is the derivative by \\(h\\) of the union area, we have \\(0 \\le u(h) \\le w\\) and \\(u(h)\\) is a non-decreasing monotonic function.</p> \\[\\frac{\\partial g}{\\partial h} = \\frac{w \\left(a b + \\int_0^h{u(t) dt}\\right) - (a b + w h) u(h)}{\\left(a b + \\int_0^h{u(t) dt}\\right)^2} = \\frac{a b (w - u(h)) + w \\int_0^h{\\left(u(t) - u(h)\\right)dt} }{\\left(a b + \\int_0^h{u(t) dt}\\right)^2}\\] <p>The numerator is monotonic non-increasing, then \\(g(w, h)\\) is a single-peaked function of \\(h\\). Symmetrically, it is also a single-peaked function of \\(w\\). Since \\(g(w, h)\\) is a single-peaked function, there is no local maximium problem. Many search algorithm will coverages to global maximium, such as ternary search, gradients descent, hill climbing and simulated annealing, should work for this function.</p> <p>Case by case, \\(g(w, h)\\) can be described in a table:</p> \\[ \\begin{array} {|c|c|c|c|c|c|} \\hline  case &amp; condition &amp; g(w, h) &amp; opt. &amp; gradient &amp; comment\\\\ \\hline   0) &amp; \\theta = 0 &amp; \\frac{\\min(a, w) \\times \\min(b, h)} {\\max(a,w) \\times \\max(b, h)} &amp; Yes &amp; (w, h) = (a, b) &amp; trival  \\\\ \\hline  1) &amp; w \\ge a \\cos \\theta + b \\sin \\theta \\land h \\ge a \\sin \\theta + b \\cos \\theta &amp; \\frac{ab}{wh}&amp; No &amp; \\frac{\\partial g}{\\partial w} &lt; 0, \\frac{\\partial g}{\\partial h} &lt; 0&amp; OBB \\subseteq AABB \\\\ \\hline   2) &amp; w \\ge a \\cos \\theta + b \\sin \\theta &amp; \\frac{I(h)}{ab + wh - I(h)}&amp; No &amp; \\frac{\\partial g}{\\partial w} &lt; 0 &amp; \\\\ \\hline  3) &amp; h \\ge a \\sin \\theta + b \\cos \\theta &amp; \\frac{I(w)}{ab + wh - I(w)}&amp; No &amp; \\frac{\\partial g}{\\partial h} &lt; 0 &amp; \\\\ \\hline   4) &amp;  w \\cos \\theta + h \\sin \\theta \\le a \\land w \\sin \\theta + h \\cos \\theta \\le b &amp; \\frac{wh}{ab} &amp; No &amp; \\frac{\\partial g}{\\partial w} &gt; 0, \\frac{\\partial g}{\\partial h} &gt; 0 &amp; AABB \\subseteq OBB \\\\ \\hline   5) &amp;  w \\cos \\theta + h \\sin \\theta \\le a \\land h \\cos \\theta - w \\sin \\theta \\gt b &amp; \\frac{I(w)}{a b + w h - I(w)} &amp; No &amp; \\frac{\\partial g}{\\partial h} \\lt 0 &amp; parallelogram \\\\ \\hline  6) &amp; w \\cos \\theta + h \\sin \\theta \\le a \\land w \\sin \\theta + h \\cos \\theta \\ge b &amp; \\frac{wh - q^2 / 2 \\sin {2 \\theta}}{ab + q^2 / 2 \\sin {2 \\theta}}, q = w \\sin \\theta + h \\cos \\theta - b &amp; Yes &amp; &amp; hexagon\\\\ \\hline  7) &amp; w \\cos \\theta + h \\sin \\theta \\le a \\land w \\sin \\theta - h \\cos \\theta \\gt b &amp; \\frac{I(h)}{a b + w h - I(h)} &amp; No &amp; \\frac{\\partial g}{\\partial w} &lt; 0 &amp; parallelogram \\\\ \\hline   8) &amp; w \\cos \\theta + h \\sin \\theta \\ge a \\land w \\sin \\theta + h \\cos \\theta \\ge b &amp; \\frac{wh - (p^2 + q^2) / 2 \\sin {2 \\theta}}{ab + (p^2 + q^2) / 2 \\sin {2 \\theta}} &amp; Yes &amp; &amp; octagon \\\\ \\hline  9) &amp; w \\cos \\theta + h \\sin \\theta \\ge a \\land w \\sin \\theta + h \\cos \\theta \\le b &amp; \\frac{w h -  p ^2 / 2 \\sin {2 \\theta}}{ab +  p^2 / 2 \\sin {2 \\theta}}, p=w \\cos \\theta + h \\sin \\theta - a &amp; Yes &amp; &amp; hexagon \\\\ \\hline  10) &amp; w \\cos \\theta - h \\sin \\theta \\gt a \\land w \\sin \\theta + h \\cos \\theta \\le b &amp; \\frac{I(h)}{a b + w h - I(h)} &amp; No &amp; \\frac{\\partial g}{\\partial w} &lt; 0 &amp; parallelogram \\\\ \\hline \\end{array} \\] <p>Maximum can happen in case 0), case 6), case 8) and case 9). case 0) is trival to solve. case 9) is symmetrical with case 6). </p> <p>For case 6), let \\(f(w, h) := \\log(1 + g(w, h)) = \\log(a b + w h) - \\log(a b + \\frac{q^2}{2\\sin{2\\theta}})\\), maximizing \\(f\\) instead of \\(g\\). </p> \\[ \\nabla f(w, h) = \\begin{bmatrix} \\frac{\\partial f}{\\partial w} \\\\ \\frac{\\partial f}{\\partial h} \\end{bmatrix} = \\begin{bmatrix} \\frac{h}{a b + w h} - \\frac{2 q \\sin{\\theta}} {2a b \\sin{2\\theta} + q^2} \\\\ \\frac{w}{a b + w h} - \\frac{2 q \\cos{\\theta}} {2a b \\sin{2\\theta} + q^2} \\end {bmatrix} = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} \\\\ \\Rightarrow \\frac{h}{\\sin{\\theta}} = \\frac{w}{\\cos{\\theta}} = \\frac{2 q (a b + w h)} {2 a b \\sin{2\\theta} + q^2} = \\frac {q (1 + g(w, h))} {\\sin{2 \\theta}} \\] <p>Substitute \\((w, h) := (z \\cos{\\theta}, z \\sin{\\theta})\\), and \\(q = z \\sin{2\\theta} - b\\)</p> \\[ z = \\frac{(z\\sin{2\\theta} - b)(2 a b + z^2 \\sin{2\\theta})}{2 a b \\sin{2\\theta} + (z \\sin{2\\theta}- b)^2} \\Rightarrow z^2 \\sin{2\\theta} - b z - 2 a b = 0 \\] <p>Since \\(z &gt; 0\\), we have \\(z_m = \\frac{b + \\sqrt{b^2 + 8 a b \\sin{2\\theta}}} {2 \\sin{2\\theta}}\\). And \\(z_m\\) must be both \\(z_m \\le a\\) and \\(z_m \\sin{2\\theta} \\ge b\\). So when \\(a \\sin{2\\theta} \\ge 3 b\\)</p> \\[ \\max{g(w, h)} = \\frac{z_m \\sin{2\\theta}} {z_m \\sin{2\\theta}- b} - 1 = \\frac{2}{\\sqrt{1 + 8\\frac{a}{b} \\sin{2\\theta} } - 1} \\] <p>For case 9), symmetrically, when \\((w, h) = (a + \\sqrt{a^2 + 8 a b \\sin{2\\theta}}) \\times (\\frac{1}{2\\cos{\\theta}}, \\frac{1}{2 \\sin{\\theta}})\\)</p> \\[ \\max{g(w, h)} = \\frac{2}{\\sqrt{1 + 8 \\frac{b}{a} \\sin{2\\theta} } - 1} \\ge 1 \\] <p>It conflicts with $w \\sin{\\theta} + h \\cos{\\theta} \\le b $, and cannot be the global maximium, skipped.</p> <p>For case 8), let \\(f(w, h) := \\log(1 + g(w, h)) = \\log(a b + w h) - \\log(a b + \\frac{p^2 + q^2}{2\\sin{2\\theta}})\\). Maximize \\(f\\) instead of \\(g\\):</p> \\[ \\nabla f(w, h) = \\begin{bmatrix} \\frac{\\partial f}{\\partial w} \\\\ \\frac{\\partial f}{\\partial h} \\end{bmatrix} = \\begin{bmatrix} \\frac{h}{a b + w h} - \\frac{2 p \\cos{\\theta} + 2 q \\sin{\\theta}} {2a b \\sin{2\\theta} + p^2 + q^2} \\\\ \\frac{w}{a b + w h} - \\frac{2 p \\sin{\\theta} + 2 q \\cos{\\theta}} {2a b \\sin{2\\theta} + p^2 + q^2} \\end{bmatrix} =\\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix} \\\\ \\Rightarrow \\frac{p \\cos{\\theta} + q \\sin{\\theta}}{h} = \\frac{p \\sin{\\theta} + q \\cos{\\theta}}{w} = \\frac{2 a b \\sin{2\\theta} + p^2 + q^2}{2(a b + w h)} = \\frac{\\sin{2\\theta}}{1 + g(w, h)} \\\\ \\frac{p \\cos{\\theta} + q \\sin{\\theta}}{h} = \\frac{p \\sin{\\theta} + q \\cos{\\theta}}{w} \\Rightarrow \\frac{a \\cos{\\theta} + b \\sin{\\theta} - w}{h} = \\frac{a \\sin{\\theta} + b \\cos{\\theta} - h}{w} = k \\] <p>Then substitute \\(w\\) and \\(h\\)</p> \\[ \\begin{bmatrix} w \\\\ h \\end{bmatrix} = \\begin{bmatrix} 1 &amp; k \\\\ k &amp; 1 \\end{bmatrix} ^ {-1} \\begin{bmatrix} \\cos{\\theta} &amp; \\sin{\\theta} \\\\ \\sin{\\theta} &amp; \\cos{\\theta} \\end{bmatrix} \\begin{bmatrix} a \\\\ b \\end{bmatrix}  = \\frac{1}{1-k^2} \\begin{bmatrix} 1 &amp; -k \\\\ -k &amp; 1 \\end{bmatrix} \\begin{bmatrix} \\cos{\\theta} &amp; \\sin{\\theta} \\\\ \\sin{\\theta} &amp; \\cos{\\theta} \\end{bmatrix} \\begin{bmatrix} a \\\\ b \\end{bmatrix}  \\\\ \\begin{bmatrix} p \\\\ q \\end{bmatrix} = \\begin{bmatrix} \\cos{\\theta} &amp; \\sin{\\theta} \\\\ \\sin{\\theta} &amp; \\cos{\\theta} \\end{bmatrix} \\begin{bmatrix} w \\\\ h \\end{bmatrix} - \\begin{bmatrix} a \\\\ b \\end{bmatrix}  = \\frac{\\sin{2\\theta} - k}{1-k^2} \\begin{bmatrix} -k &amp; 1 \\\\ 1 &amp; -k \\end{bmatrix}\\begin{bmatrix} a \\\\ b \\end{bmatrix}  \\] <p>\\(k\\) should holds \\(0 &lt; k &lt; \\sin{2\\theta}\\).</p> \\[ \\sin{2\\theta} - k = \\frac{2 a b \\sin{2\\theta} + p^2 + q^2}{2(a b + w h)} = \\frac{p^2 + q^2 + 2 a b k}{2 w h} =\\frac{(\\sin{2\\theta} - k)^2\\left[(k^2+1)(a^2+b^2) - 4 a b k\\right] + 2 a b k (1-k^2)^2} {(a^2+b^2)\\left[(k^2 + 1)\\sin{2\\theta} - 2 k\\right] + 2 a b (k^2 - 2 k \\sin{2\\theta} + 1)}  \\] <p>let \\(\\lambda := \\frac{a^2+b^2}{2 a b}\\), substitude above</p> \\[ \\sin{2\\theta} - k = \\frac{(\\sin{2\\theta} - k)^2\\left[(k^2+1)\\lambda - 2 k\\right] + k (1-k^2)^2} {\\lambda \\left[(k^2 + 1)\\sin{2\\theta} - 2 k\\right] + (k^2 - 2 k \\sin{2\\theta} + 1)} \\\\ \\Rightarrow (k^2 - 1)(k^3 + \\lambda k^2 - (2 + \\lambda \\sin{2\\theta}) k + \\sin{2\\theta}) = 0 \\\\ \\Rightarrow k^3 + \\lambda k^2 - (2 + \\lambda \\sin{2\\theta}) k + \\sin{2\\theta} = 0 \\] <p>The cubic equation has 3 real roots \\(k_0\\), \\(k_1\\) and \\(k_2\\). \\(k_1 &lt; 0 &lt; k_2 &lt; \\frac{\\sin{2\\theta}}{2} &lt; \\sin{2\\theta} &lt; k_0 \\le 1\\). We need the root \\(0 &lt; k_2 &lt; \\frac{\\sin{2\\theta}}{2}\\).</p> \\[ k_n = -\\frac{\\lambda}{3} + \\frac{2}{3}\\sqrt{\\lambda^2 + 3\\lambda\\sin{2\\theta}+6}\\cos{\\left(\\frac{1}{3}\\arccos{\\left(-\\frac{2\\lambda^3+9(\\lambda^2+3)\\sin{2\\theta} + 18\\lambda}{2\\left(\\sqrt{\\lambda^2 + 3\\lambda\\sin{2\\theta}+6}\\right)^3}\\right)} + \\frac{2 n \\pi}{3}\\right)}\\] \\[ \\max{g(w, h)} = \\frac{k_2}{\\sin{2\\theta} - k_2}\\] <p>Merge case 0), case 6) and case 8),</p> \\[ \\max {g(w, h)} = \\begin {cases}  \\ 1, &amp;\\text{if } \\theta = 0 \\\\  \\frac{2}{\\sqrt{1 + 8 \\frac{a}{b} \\sin{2\\theta}} - 1}, &amp; \\text{if } \\frac{a \\sin{2\\theta}}{b} \\ge 3 \\\\  \\frac{k_2}{\\sin{2\\theta} - k_2}, &amp; \\text{otherwise} \\end{cases}\\]"},{"location":"2023-icpc-nanjing/b/#solution","title":"Solution","text":"<pre><code>import decimal\n\nDec = decimal.Decimal\n\ncompute_prec = 64\ndecimal.getcontext().prec = compute_prec\nprint_eps = Dec('0.1') ** compute_prec - 8\n\ndef solve(lx: int, ly: int, wx: int, wy: int):\n    if lx == 0 or ly == 0:\n        return 1\n    lx, ly, wx, wy = abs(lx), abs(ly), abs(wx), abs(wy)\n    l2, w2, lw = lx * lx + ly * ly, wx * wx + wy * wy, lx * wy + ly * wx\n    if l2 &lt; w2:\n        l2, w2, lx, ly, wx, wy = w2, l2, wx, wy, lx, ly\n    if lx &lt; ly:\n        lx, ly, wx, wy = ly, lx, wy, wx\n\n    l2sin2a = lx * ly &lt;&lt; 1\n    res = 1\n    if l2sin2a &gt;= lw * 3: # l/w * sin_2a &gt;= 3\n        # hexagon case, x cos_a + y sin_a &lt;= l, x sin_a + y cos_a &gt;= w\n        # t = (x sin_a + y cos_a - w)\u00b2 / (2 sin_2a),\n        # iou = (xy - t) / (lw + t)\n        # [x, y] = [z cos_a, z sin_a]\n        # sin_2a z\u00b2 - w z - 2 lw = 0\n        # z = (w + \u221a\u0394) / 2 sin_2a, iou = 2 / (\u221a\u0394 / w - 1) = 2 / (\u221a(1 + 8 sin_2a l / w) - 1)\n        res = 2 / ((1 + Dec(l2sin2a * 8) / lw).sqrt() - 1)\n    else:\n        # octagon case, x cos_a + y sin_a &gt;= l, x sin_a + y cos_a &gt;= w\n        # t = ((x sin_a + y cos_a - w)\u00b2 + (x cos_a + y sin_a - l)\u00b2) / (2 sin_2a),\n        # iou = (xy - t) / (lw + t)\n        # x, y = 1 / (1-k\u00b2) [xm - k * ym, ym - k * xm]\n        # k\u00b3 + (l\u00b2 + w\u00b2) / 2lw * k\u00b2  - (2 + sin_2a (l\u00b2 + w\u00b2) / 2lw) * k + sin_2a = 0\n        # 0 &lt; k &lt; sin_2a / 2 iou = 1 / (sin_2a / k - 1)\n        xm, ym, k = lx + wx, ly + wy, 0\n        b = Dec(l2 + w2) / (lw &lt;&lt; 1)  # (l\u00b2 + w\u00b2) / 2lw\n        d = Dec(l2sin2a) / l2 # sin_2a\n        # f(k) = k\u00b3 + b k\u00b2  - (2 + b d) k + d = 0\n        if xm == ym:\n            # symmetry, it holds d == 1 or b == 1, and k = 1 is a root\n            # k\u00b3 + b k\u00b2  - (2 + b d) k + d = (k - 1) * (k\u00b2 + (b + 1) k - b d + b - 1) + (b - 1) * (1 - d)\n            # k\u00b2 + (b + 1) k - b d + b - 1 == 0\n            B = (b + 1) / 2\n            k = (B * B + b * (d - 1) + 1).sqrt() - B\n        else:\n            c = - b * d - 2\n            # f'(k) = 3k\u00b2 + 2b k + c\n            # f(0) &gt;= 0, f(d/2) &lt; 0, f(1) &gt;= 0\n            # k &lt;- k - f(k) / f'(k), k &lt;= 2/3 k - b/9 + ((2b\u00b2 - 6c)k + bc - 9d) / 9f'(k)\n            k, last_k, best = d / 4, 0, Dec('Inf')\n            t0, t1 =  b * c - 9 * d, 2 * b * b - 6 * c\n            while True:\n                last_k = k\n                df_dk = (3 * k + 2 * b) * k + c\n                k = (k * 6 - b + (t1 * k + t0) / df_dk) / 9\n                err =  abs(((k + b) * k + c) * k + d)\n                if err &gt;= best:\n                    k = last_k\n                    break\n                best = err\n        res = 1 / (d / k - 1)\n\n    return str(res.quantize(print_eps)).rstrip('0')\n\nfor _ in range(int(input())):\n    c = list(map(int, input().split()))\n    print(solve(c[2] - c[0], c[3] - c[1], c[6] - c[0], c[7] - c[1]))\n</code></pre>"},{"location":"2023-icpc-nanjing/c/","title":"C - \u539f\u6839","text":""},{"location":"2023-icpc-nanjing/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387245/342 (71.6%)"},{"location":"2023-icpc-nanjing/c/#_2","title":"\u9898\u89e3","text":""},{"location":"2023-icpc-nanjing/c/#_3","title":"\u89e3\u6cd5\u4e00","text":"<p>\\(g \\oplus (P - 1) \\equiv 1 \\pmod p\\)\uff0c\u5373 \\(g \\oplus (P - 1) = kP + 1\\)\uff0c\u5373 \\(g = (kP + 1) \\oplus (P - 1) \\le m\\)\u3002\u7531\u4e8e \\(P\\) \u662f\u5b9a\u503c\uff0c\u5219 \\(g\\) \u7684\u65b9\u6848\u6570\u5c31\u7b49\u4e8e \\(k\\) \u7684\u65b9\u6848\u6570\u3002</p> <p>\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\(m\\) \u7684\u6570\u53ef\u4ee5\u6839\u636e\u4e0e \\(m\\) \u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u5206\u6210 \\(\\log m\\) \u79cd\uff0c\u4f8b\u5982\u5c0f\u4e8e\u7b49\u4e8e \\(m = 1011\\) \u7684\u6570\u53ef\u4ee5\u5206\u4e3a \\(m_3 = 0***\\)\uff0c\\(m_1 = 100*\\)\uff0c\\(m_0 = 1010\\) \u548c \\(1011\\) \u672c\u8eab\u3002</p> <p>\u8003\u8651\u6700\u957f\u516c\u5171\u524d\u7f00\u4e00\u76f4\u5230\u7b2c \\((t + 1)\\) \u4f4e\u4f4d\u7684\u90a3\u4e00\u7ec4 \\(m_t\\)\u3002\u7531 \\((kP + 1) \\oplus (P - 1) = m_t\\) \u53ef\u5f97 \\(kP + 1 = m_t \\oplus (P - 1)\\)\u3002\u5bf9\u4e8e \\(m_t\\) \u7684\u6240\u6709\u6570\uff0c\u4e00\u76f4\u5230\u7b2c \\(t\\) \u4f4e\u4f4d\u7684\u524d\u7f00\u90fd\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u5269\u4e0b\u7684\u540e\u7f00\u53ef\u4ee5\u662f\u4efb\u610f\u6570\u3002\u56e0\u6b64 \\(m_t \\oplus (P - 1)\\) \u4e00\u76f4\u5230\u7b2c \\(t\\) \u4f4e\u4f4d\u7684\u524d\u7f00\u4e5f\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u5269\u4e0b\u7684\u540e\u7f00\u4ecd\u7136\u53ef\u4ee5\u662f\u4efb\u610f\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8bbe \\(p_t\\) \u4e3a \\(m_t \\oplus (P - 1)\\) \u628a\u6240\u6709\u661f\u53f7\u90fd\u6362\u6210 \\(0\\) \u7684\u503c\uff0c\u5219 \\(p_t \\le kP + 1 &lt; p_t + 2^{t}\\)\uff0c\u901a\u8fc7\u9664\u6cd5\u5c31\u80fd\u7b97\u51fa\u8fd9\u4e2a\u533a\u95f4\u91cc\u6709\u51e0\u4e2a\u5408\u6cd5\u7684 \\(k\\)\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\log m)\\)\u3002</p>"},{"location":"2023-icpc-nanjing/c/#_4","title":"\u89e3\u6cd5\u4e8c","text":"<p>\u6ce8\u610f\u5230\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\\(a - b \\le a \\oplus b \\le a + b\\)\u3002</p> <p>\u5bf9\u4e8e\u6240\u6709 \\(0 \\le k \\le \\lfloor \\frac{m}{P} \\rfloor - 1\\)\uff0c\u5747\u6709 \\((kP + 1) \\oplus (P - 1) \\le (k + 1)P \\le m\\)\uff0c\u6ee1\u8db3\u8981\u6c42\uff1b\u5bf9\u4e8e\u6240\u6709 \\(k \\ge \\lceil \\frac{m}{P} \\rceil + 1\\)\uff0c\u5747\u6709 \\((kP + 1) \\oplus (P - 1) \\ge (k - 1)P + 2 &gt; m\\)\uff0c\u4e0d\u6ee1\u8db3\u8981\u6c42\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u68c0\u67e5\u6240\u6709 \\(\\lfloor \\frac{m}{P} \\rfloor \\le k \\le \\lceil \\frac{m}{P} \\rceil\\) \u7684\u503c\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\)\u3002</p>"},{"location":"2023-icpc-nanjing/c/#_5","title":"\u53c2\u8003\u4ee3\u7801","text":""},{"location":"2023-icpc-nanjing/c/#_6","title":"\u89e3\u6cd5\u4e00","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nlong long P, m, ans;\n\n// \u6c42 0 &lt;= kP + 1 &lt;= x \u7684 k \u7684\u6570\u91cf\nlong long calc(long long x) {\n    x--;\n    if (x &lt; 0) return 0;\n    else return x / P + 1;\n}\n\n// \u6c42 L &lt;=&gt; kP + 1 &lt;= R \u7684 k \u7684\u6570\u91cf\nlong long calc(long long L, long long R) {\n    return calc(R) - calc(L - 1);\n}\n\nvoid solve() {\n    scanf(\"%lld%lld\", &amp;P, &amp;m);\n    ans = 0;\n    // \u679a\u4e3e\u4e0e m \u7684\u6700\u957f\u516c\u5171\u524d\u7f00\n    for (int i = 60; i &gt;= 0; i--) if (m &gt;&gt; i &amp; 1) {\n        // \u8ba1\u7b97 kP + 1 \u7684\u4e0a\u4e0b\u754c\n        long long L = m &gt;&gt; i ^ 1;\n        L ^= (P - 1) &gt;&gt; i;\n        L &lt;&lt;= i;\n        long long R = L + (1LL &lt;&lt; i) - 1;\n        // \u6c42\u7279\u5b9a\u8303\u56f4\u5185 k \u7684\u6570\u91cf\n        ans += calc(L, R);\n    }\n    // \u522b\u5fd8\u4e86 m \u672c\u8eab\u4e5f\u8981\u7b97\n    ans += calc(m ^ (P - 1), m ^ (P - 1));\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/c/#_7","title":"\u89e3\u6cd5\u4e8c","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nlong long P, m, ans;\n\nvoid solve() {\n    scanf(\"%lld%lld\", &amp;P, &amp;m);\n    ans = m / P;\n    for (long long k = m / P; k &lt;= (m + P - 1) / P; k++)\n        if (((k * P + 1) ^ (P - 1)) &lt;= m) ans++;\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/d/","title":"D - \u7ea2\u9ed1\u6811","text":""},{"location":"2023-icpc-nanjing/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738719/342 (5.6%)"},{"location":"2023-icpc-nanjing/d/#_2","title":"\u9898\u89e3","text":"<p>\u8bbe \\(f(u, x)\\) \u8868\u793a\u4ee5 \\(u\\) \u4e3a\u6839\u7684\u5b50\u6811\u662f\u5b8c\u7f8e\u7684\uff0c\u4e14\u4ece \\(u\\) \u5230\u4efb\u610f\u540e\u4ee3\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u90fd\u6709 \\(x\\) \u4e2a\u9ed1\u8272\u70b9\u9700\u8981\u7684\u6700\u5c11\u4fee\u6539\u6b21\u6570\u3002\u6709\u6734\u7d20\u7684 dp \u65b9\u7a0b\uff1a</p> \\[ f(u, x) = \\min\\limits_{i \\in [0, 1]} (g(u, i) + \\sum\\limits_{v \\in \\text{son}(u)} f(v, x - i)) \\] <p>\u5176\u4e2d \\(g(u, 0/1)\\) \u662f\u8ba9\u8282\u70b9 \\(u\\) \u53d8\u7ea2/\u9ed1\u7684\u4ee3\u4ef7\u3002\u8282\u70b9 \\(u\\) \u7684\u7b54\u6848\u5c31\u662f \\(\\min\\limits_x f(u, x)\\)\u3002</p> <p>\u53ef\u4ee5\u5f52\u7eb3\u8bc1\u660e \\(f(u, x)\\) \u662f\u5173\u4e8e \\(x\\) \u7684\u51f8\u5e8f\u5217\uff1a</p> <ul> <li>\\(g(u, 0/1)\\) \u662f\u51f8\u5e8f\u5217\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5e8f\u5217\u53ea\u6709\u4e24\u4e2a\u70b9\u3002</li> <li>\u6839\u636e\u5f52\u7eb3\u5047\u8bbe\uff0c\\(f(v, x - i)\\) \u662f\u51f8\u5e8f\u5217\u3002\u7531\u4e8e\u51f8\u5e8f\u5217\u7684\u548c\u8fd8\u662f\u51f8\u5e8f\u5217\uff0c\u56e0\u6b64 \\(\\sum\\limits_{v \\in \\text{son}(u)} f(v, x - i)\\) \u4e5f\u662f\u51f8\u5e8f\u5217\u3002</li> <li>\u51f8\u5e8f\u5217\u7684 \\((\\min, +)\\) \u5377\u79ef\u4e5f\u8fd8\u662f\u51f8\u5e8f\u5217\uff0c\u56e0\u6b64 \\(f(u, x)\\) \u662f\u51f8\u5e8f\u5217\u3002</li> </ul> <p>\u51f8\u5e8f\u5217\u5e38\u7528\u5355\u8c03\u7684\u5dee\u5206\u6570\u7ec4\u8fdb\u884c\u7ef4\u62a4\u3002\u6211\u4eec\u7ef4\u62a4 \\(h(u) = \\{f(u, 1) - f(u, 0), f(u, 2) - f(u, 1), \\cdots\\}\\)\uff0c\u8fd9\u4e2a\u5e8f\u5217\u662f\u5355\u8c03\u9012\u589e\u7684\uff0c\u56e0\u6b64 \\(\\min\\limits_x f(u, x) = f(u, 0) + \\sum\\limits_{h(u, x) &lt; 0} h(u, x)\\)\uff0c\u6211\u4eec\u8fd8\u8981\u987a\u4fbf\u7ef4\u62a4\u5dee\u5206\u6570\u7ec4 \\(h\\) \u7684\u8d1f\u503c\u4e4b\u548c\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u770b\u770b\u5dee\u5206\u6570\u7ec4 \\(h\\) \u5982\u4f55\u52a0\u5feb\u4e0a\u8ff0 dp \u65b9\u7a0b\u7684\u8ba1\u7b97\u3002</p> <p>\u9996\u5148\u662f \\(f\\) \u6c42\u548c\u7684\u90e8\u5206\u3002\u539f\u6570\u7ec4\u6c42\u548c\uff0c\u5dee\u5206\u6570\u7ec4\u4e5f\u662f\u6c42\u548c\u3002\u6ce8\u610f\u5230 \\(x\\) \u7684\u53d6\u503c\u8303\u56f4\u662f \\(u\\) \u6240\u6709\u5b50\u8282\u70b9\u7684\u6700\u5c0f\u6df1\u5ea6 \\(d\\) \u52a0\u4e00\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u66b4\u529b\u5730\u628a\u6240\u6709\u5b50\u8282\u70b9\u957f\u5ea6\u4e3a \\((d + 1)\\) \u7684\u524d\u7f00\u52a0\u8d77\u6765\u5373\u53ef\u3002\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u5927\u5bb6\u53ef\u80fd\u77e5\u9053\uff0c\u5982\u679c\u6bcf\u4e2a\u70b9\u662f\u8ba1\u7b97\u662f\u628a\u5176\u5b83\u94fe\u5408\u5e76\u5230\u6700\u957f\u7684\u94fe\u4e0a\uff0c\u90a3\u4e48\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\uff08\u5bf9\u6811\u8fdb\u884c\u957f\u94fe\u5256\u5206\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u5728\u957f\u94fe\u7684\u9876\u7aef\u88ab\u5408\u5e76\u4e00\u6b21\uff09\uff0c\u800c\u672c\u9898\u751a\u81f3\u662f\u628a\u5176\u5b83\u94fe\u5408\u5e76\u5230\u6700\u77ed\u7684\u94fe\u4e0a\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u80af\u5b9a\u4e0d\u4f1a\u9ad8\u4e8e\u7ebf\u6027\u3002</p> <p>\u63a5\u4e0b\u6765\u8003\u8651\u4e0e \\(g(u, i)\\) \u8fdb\u884c \\((\\min, +)\\) \u5377\u79ef\u3002\u540c\u6837\u8003\u8651 \\(g\\) \u7684\u5dee\u5206\uff0c\u6ce8\u610f\u5230 \\(g(u, 1) - g(u, 0) = \\pm 1\\)\uff0c\u56e0\u6b64\u6211\u4eec\u8fd8\u8981\u652f\u6301\u5f80\u5dee\u5206\u6570\u7ec4\u91cc\u63d2\u5165\u4e00\u4e2a \\(1\\) \u6216 \\(-1\\)\uff0c\u5e76\u7ef4\u6301\u5dee\u5206\u6570\u7ec4\u7684\u5355\u8c03\u6027\u3002</p> <p>\u5982\u679c\u76f4\u63a5\u4f7f\u7528 <code>set</code> \u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\uff0c\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(n\\log n)\\) \u7684\u3002\u8fd9\u91cc\u6ce8\u610f\u5230\u6211\u4eec\u6bcf\u6b21\u63d2\u5165\u7684\u6570\u90fd\u662f\u56fa\u5b9a\u7684 \\(1\\) \u6216 \\(-1\\)\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u7684\u6570\u636e\u7ed3\u6784\uff1a\u7ef4\u62a4\u4e24\u4e2a <code>vector</code>\uff0c\u4e00\u4e2a <code>vector</code> \u4fdd\u5b58\u6240\u6709\u8d1f\u6570\uff0c\u4e00\u4e2a <code>vector</code> \u4fdd\u5b58\u6240\u6709\u6b63\u6570\uff0c\u518d\u5f00\u4e00\u4e2a\u53d8\u91cf\u8bb0\u5f55\u6709\u51e0\u4e2a \\(0\\)\u3002\u8fd9\u6837\u63d2\u5165 \\(1\\) \u5c31\u5f80\u6b63\u6570 <code>vector</code> \u7684\u5f00\u5934\u63d2\uff0c\u63d2\u5165 \\(-1\\) \u5c31\u5f80\u8d1f\u6570 <code>vector</code> \u7684\u672b\u5c3e\u63d2\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u4ecd\u7136\u662f \\(\\mathcal{O}(n)\\) \u7684\u3002</p>"},{"location":"2023-icpc-nanjing/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, ans[MAXN + 10];\nchar s[MAXN + 10];\n\nvector&lt;int&gt; e[MAXN + 10];\n\n// \u7ef4\u62a4\u5dee\u5206\u6570\u7ec4\u7684\u6570\u636e\u7ed3\u6784\nstruct Magic {\n    // neg \u4fdd\u5b58\u6240\u6709\u8d1f\u6570\u7684\u5dee\u5206\u503c\uff0cpos \u4fdd\u5b58\u6240\u6709\u6b63\u6570\u7684\u5dee\u5206\u503c\n    vector&lt;int&gt; neg, pos;\n    // zero \u8868\u793a\u6709\u51e0\u4e2a\u5dee\u5206\u503c\u662f 0\uff0cnegSm = sum(neg)\n    int zero, negSm;\n\n    Magic(): zero(0), negSm(0) {};\n\n    // \u7528\u5dee\u5206\u6570\u7ec4 vec \u521d\u59cb\u5316\u6570\u636e\u7ed3\u6784\n    Magic(vector&lt;int&gt; &amp;vec): zero(0), negSm(0) {\n        for (int x : vec) {\n            if (x &lt; 0) neg.push_back(x), negSm += x;\n            else if (x == 0) zero++;\n            else pos.push_back(x);\n        }\n        reverse(pos.begin(), pos.end());\n    }\n\n    int size() {\n        return neg.size() + pos.size() + zero;\n    }\n\n    // \u53d6\u51fa\u5dee\u5206\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3a idx \u7684\u5143\u7d20\n    int at(int idx) {\n        if (idx &lt; neg.size()) return neg[idx];\n        else if (idx &lt; neg.size() + zero) return 0;\n        else {\n            idx -= neg.size() + zero;\n            return pos[pos.size() - 1 - idx];\n        }\n    }\n\n    // \u5f80\u5dee\u5206\u6570\u7ec4\u91cc\u63d2\u5165 1 \u6216 -1\n    void insert(int x) {\n        assert(x == 1 || x == -1);\n        if (x == 1) pos.push_back(1);\n        else neg.push_back(-1), negSm--;\n    }\n};\n\ntypedef pair&lt;int, Magic&gt; pim;\n\npim dfs(int sn) {\n    int v = 0;\n    Magic magic;\n\n    for (int fn : e[sn]) {\n        pim tmp = dfs(fn);\n        v += tmp.first;\n        if (magic.size() == 0) magic = move(tmp.second);\n        else {\n            int sz = min(magic.size(), tmp.second.size());\n            // \u53ea\u4fdd\u7559\u4e24\u4e2a\u5dee\u5206\u6570\u7ec4\u8f83\u77ed\u7684\u524d\u7f00\n            vector&lt;int&gt; vec(sz);\n            for (int i = 0; i &lt; sz; i++) vec[i] = magic.at(i) + tmp.second.at(i);\n            magic = Magic(vec);\n        }\n    }\n\n    // \u6839\u636e sn \u539f\u6765\u7684\u989c\u8272\uff0c\u5f80\u5dee\u5206\u6570\u7ec4\u91cc\u63d2\u5165 1 \u6216 -1\n    v += s[sn] - '0';\n    if (s[sn] == '0') magic.insert(1);\n    else magic.insert(-1);\n\n    ans[sn] = v + magic.negSm;\n    return pim(v, move(magic));\n}\n\nvoid solve() {\n    scanf(\"%d%s\", &amp;n, s + 1);\n    for (int i = 1; i &lt;= n; i++) e[i].clear();\n    for (int i = 2; i &lt;= n; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        e[x].push_back(i);\n    }\n    dfs(1);\n    for (int i = 1; i &lt;= n; i++) printf(\"%d%c\", ans[i], \"\\n \"[i &lt; n]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/f/","title":"F - \u7b49\u4ef7\u91cd\u5199","text":""},{"location":"2023-icpc-nanjing/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387253/342 (74.0%)"},{"location":"2023-icpc-nanjing/f/#_2","title":"\u9898\u89e3","text":"<p>\u7531\u4e8e\u64cd\u4f5c\u7ed3\u679c\u4f1a\u4e92\u76f8\u8986\u76d6\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u53ea\u6709\u6700\u540e\u4fee\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u64cd\u4f5c\u624d\u51b3\u5b9a\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6700\u540e\u4fee\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u64cd\u4f5c\u5fc5\u987b\u5728\u5176\u5b83\u4fee\u6539\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u64cd\u4f5c\u4e4b\u540e\u8fdb\u884c\u3002</p> <p>\u8003\u8651\u5c06\u539f\u64cd\u4f5c\u5e8f\u5217\u5efa\u6a21\u6210\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe \\(G\\)\uff0c\u7b2c \\(i\\) \u4e2a\u64cd\u4f5c\u5411\u7b2c \\(j\\) \u4e2a\u64cd\u4f5c\u6709\u4e00\u6761\u8fde\u8fb9 \\(i \\rightarrow j\\) \u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u67d0\u4e2a\u4f4d\u7f6e \\(t\\) \u4f7f\u5f97\u64cd\u4f5c \\(j\\) \u662f\u5728\u539f\u987a\u5e8f\u4e2d\u4fee\u6539\u4f4d\u7f6e \\(t\\) \u7684\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\uff0c\u4e14\u64cd\u4f5c \\(i\\) \u4e5f\u4fee\u6539\u4e86 \\(t\\)\u3002</p> <p>\u73b0\u5728\u95ee\u9898\u8f6c\u5316\u4e3a\uff0c\u7ed9\u5b9a\u4e00\u5f20\u6709\u5411\u65e0\u73af\u56fe \\(G\\)\uff0c \u95ee \\(G\\) \u662f\u5426\u5b58\u5728\u4e00\u4e2a\u4e0d\u540c\u4e8e \\(1, 2, \\cdots, n\\) \u7684\u62d3\u6251\u5e8f\u3002</p> <p>\u4e00\u79cd\u7b80\u5355\u7684\u505a\u6cd5\u662f\u5c1d\u8bd5\u4ea4\u6362 \\(i\\) \u548c \\((i + 1)\\)\uff0c\u5982\u679c\u4ea4\u6362\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u90fd\u65e0\u6cd5\u5f97\u5230\u65b0\u7684\u5408\u6cd5\u62d3\u6251\u5e8f\uff0c\u8bf4\u660e \\(G\\) \u4f9d\u8d56\u5173\u7cfb\u81f3\u5c11\u662f\u4e00\u6761\u4ece \\(1\\) \u5230 \\(n\\) \u7684\u94fe\uff0c\u5373\u62d3\u6251\u5e8f\u552f\u4e00\u3002</p> <p>\u5b9e\u73b0\u4e0a\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5c06 \\(G\\) \u663e\u5f0f\u7684\u5efa\u7acb\u51fa\u6765\uff0c\u53ea\u8981\u679a\u4e3e\u5e76\u5224\u65ad\u64cd\u4f5c \\(i\\) \u548c \u64cd\u4f5c \\((i + 1)\\) \u4e4b\u95f4\u662f\u5426\u6709\u8fde\u8fb9\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219\u627e\u5230\u4e86\u4e00\u7ec4\u89e3\uff1a</p> \\[ q_j = \\begin{cases} i, &amp; j = i + 1\\\\ i + 1, &amp; j = i \\\\ j, &amp; \\text{otherwise} \\end{cases} \\] <p>\u590d\u6742\u5ea6 \\(\\mathcal O(n + \\sum\\limits_{i=1}^n p_i)\\)\u3002</p>"},{"location":"2023-icpc-nanjing/f/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXM ((int) 1e5)\nusing namespace std;\n\nint n, m;\n\n// last[i]\uff1a\u6700\u540e\u4fee\u6539\u4f4d\u7f6e i \u7684\u64cd\u4f5c\nint last[MAXM + 10];\n// OP[i]\uff1a\u64cd\u4f5c i \u6539\u4e86\u54ea\u4e9b\u4f4d\u7f6e\nunordered_set&lt;int&gt; OP[MAXN + 10];\n// flag[i]\uff1a\u64cd\u4f5c i - 1 \u5230 i \u662f\u5426\u6709\u4e00\u6761\u8fde\u8fb9\nbool flag[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    memset(last, 0, sizeof(int) * (m + 3));\n    for (int i = 1; i &lt;= n; i++) OP[i].clear();\n    memset(flag, 0, sizeof(bool) * (n + 3));\n\n    for (int i = 1; i &lt;= n; i++) {\n        int p; scanf(\"%d\", &amp;p);\n        for (int j = 1; j &lt;= p; j++) {\n            int x; scanf(\"%d\", &amp;x);\n            last[x] = i;\n            OP[i].insert(x);\n        }\n    }\n\n    // \u53ea\u6709\u4fee\u6539\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u53ef\u80fd\u4e0e\u524d\u9762\u7684\u64cd\u4f5c\u6709\u8fde\u8fb9\n    // \u679a\u4e3e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u5e76\u68c0\u67e5\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\n    for (int i = 1; i &lt;= m; i++) if (last[i] &gt; 1)\n        // \u5982\u679c last[i] - 1 \u4e5f\u6539\u4e86\u4f4d\u7f6e i\uff0c\u5219\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u6709\u8fde\u8fb9\n        if (OP[last[i] - 1].count(i)) flag[last[i]] = true;\n\n    int ans = 0;\n    // \u5bfb\u627e\u6ca1\u6709\u4e0e\u4e0a\u4e00\u4e2a\u64cd\u4f5c\u8fde\u8fb9\u7684\u64cd\u4f5c\n    for (int i = 2; i &lt;= n; i++) if (!flag[i]) { ans = i; break; }\n    if (ans &gt; 0) {\n        printf(\"Yes\\n\");\n        for (int i = 1; i &lt;= n; i++) {\n            if (i == ans - 1) printf(\"%d\", ans);\n            else if (i == ans) printf(\"%d\", ans - 1);\n            else printf(\"%d\", i);\n            printf(\"%c\", \"\\n \"[i &lt; n]);\n        }\n    } else {\n        printf(\"No\\n\");\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/g/","title":"G - \u80cc\u5305","text":""},{"location":"2023-icpc-nanjing/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387195/342 (57.0%)"},{"location":"2023-icpc-nanjing/g/#_2","title":"\u9898\u89e3","text":"<p>\u6ce8\u610f\u5230\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u9009\u6cd5\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u4e24\u4e2a\u6761\u4ef6\uff1a</p> <ol> <li>\u5982\u679c\u5b58\u5728\u7269\u54c1 \\(a\\), \\(b\\) \u6ee1\u8db3 \\(a\\) \u88ab\u514d\u8d39\u9009\u8d70\uff0c\\(b\\) \u88ab\u4ed8\u8d39\u9009\u8d70\uff0c\u90a3\u4e48 \\(w_a \\ge w_b\\)\u3002\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u6539\u6210\u514d\u8d39\u9009 \\(b\\)\uff0c\u4ed8\u8d39\u9009 \\(a\\)\uff0c\u65b9\u6848\u4e0d\u4f1a\u53d8\u52a3\u3002</li> <li>\u5982\u679c\u5b58\u5728\u7269\u54c1 \\(a\\), \\(b\\) \u6ee1\u8db3 \\(a\\) \u88ab\u514d\u8d39\u9009\u8d70\uff0c\\(b\\) \u6ca1\u6709\u88ab\u9009\u8d70\uff0c\u90a3\u4e48 \\(v_a \\ge v_b\\)\u3002\u5426\u5219\u6211\u4eec\u53ef\u4ee5\u6539\u6210\u514d\u8d39\u9009 \\(b\\)\uff0c\u4e0d\u9009\u62e9 \\(a\\)\uff0c\u65b9\u6848\u4e0d\u4f1a\u53d8\u52a3\u3002</li> </ol> <p>\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6240\u6709\u7269\u54c1\u6309\u7167 \\(w_i\\) \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6700\u4f18\u7b56\u7565\u800c\u8a00\uff0c\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u5206\u754c\u70b9 \\(M\\)\uff0c\u6ee1\u8db3 \\(i &gt; M\\) \u7684\u7269\u54c1\u4e2d\uff0c\u4ef7\u503c\u524d \\(k\\) \u5927\u7684\u7269\u54c1\u88ab\u514d\u8d39\u9009\u8d70\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a \\(i\\)\uff0c\u53ef\u4ee5\u901a\u8fc7\u7ef4\u62a4\u4e00\u4e2a\u5806\u6765\u9884\u5904\u7406\u51fa\u4ece\u7b2c \\(i\\) \u4e2a\u7269\u54c1\u5f00\u59cb\u7684\u540e\u7f00\u514d\u8d39\u9009\u51fa \\(k\\) \u4e2a\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\u4e4b\u548c\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u6bcf\u4e2a\u524d\u7f00\u7ef4\u62a4\u51fa 0/1 \u80cc\u5305\u7684\u7ed3\u679c\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(nW + nk + n \\log n)\\)\u3002</p>"},{"location":"2023-icpc-nanjing/g/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e4)\n#define MAXM ((int) 2e4)\n#define INF ((long long) 1e18)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, m, K;\npii A[MAXN + 10];\nlong long ans;\n\n// f[i]\uff1a\u8ba1\u7b97\u80cc\u5305\u95ee\u9898\u7684\u6eda\u52a8\u6570\u7ec4\n// g[i]\uff1a\u4ece\u7b2c i \u4e2a\u7269\u54c1\u5f00\u59cb\u7684\u540e\u7f00\u514d\u8d39\u9009\u51fa K \u4e2a\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\u4e4b\u548c\nlong long f[MAXM + 10], g[MAXN + 10];\n\nint main() {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;K);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d%d\", &amp;A[i].first, &amp;A[i].second);\n    sort(A + 1, A + n + 1);\n\n    long long sm = 0;\n    g[n + 1] = 0;\n    // \u5229\u7528\u5806\u7b97\u51fa\u6bcf\u4e2a\u540e\u7f00\u9009\u51fa\u514d\u8d39\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\u4e4b\u548c\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; pq;\n    for (int i = n; i &gt; 0; i--) {\n        pq.push(A[i].second);\n        sm += A[i].second;\n        if (pq.size() &gt; K) {\n            sm -= pq.top();\n            pq.pop();\n        }\n        g[i] = sm;\n    }\n\n    for (int i = 0; i &lt;= m; i++) f[i] = -INF;\n    f[0] = 0;\n    // \u7b54\u6848\u7684\u521d\u59cb\u503c\uff1a\u53ea\u4e70\u514d\u8d39\u7269\u54c1\n    ans = g[1];\n    // \u7528\u6eda\u52a8\u6570\u7ec4\u8ba1\u7b97\u80cc\u5305\u95ee\u9898\n    for (int i = 1; i &lt;= n; i++) for (int j = m; j &gt;= A[i].first; j--) {\n        f[j] = max(f[j], f[j - A[i].first] + A[i].second);\n        // \u8ba1\u7b97\u5206\u754c\u70b9\u5728 i \u7684\u60c5\u51b5\u4e0b\u7684\u7b54\u6848\n        ans = max(ans, f[j] + g[i + 1]);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/i/","title":"I - \u8ba1\u6570\u5668","text":""},{"location":"2023-icpc-nanjing/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387342/342 (100.0%)"},{"location":"2023-icpc-nanjing/i/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c\u7b2c \\(a_i\\) \u6b21\u64cd\u4f5c\u540e\u8ba1\u6570\u5668\u7684\u503c\u4e3a \\(b_i\\)\uff0c\u8bf4\u660e\u7b2c \\((a_i - b_i)\\) \u6b21\u64cd\u4f5c\u662f\u6e05\u96f6\uff0c\u4e14 \\([a_i - b_i + 1, a_i]\\) \u8fd9\u4e2a\u64cd\u4f5c\u533a\u95f4\u5185\u6ca1\u6709\u6e05\u96f6\u64cd\u4f5c\u3002</p> <p>\u628a\u533a\u95f4\u6392\u5e8f\u540e\u8fdb\u884c\u5224\u65ad\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2023-icpc-nanjing/i/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n;\n\nvoid solve() {\n    scanf(\"%*d%d\", &amp;n);\n\n    // mp[L] \u8868\u793a L \u662f\u4e00\u4e2a\u6e05\u96f6\u64cd\u4f5c\uff0c\u4e14\u4ece L + 1 \u5230 mp[L] \u90fd\u662f\u52a0\u4e00\u64cd\u4f5c\n    map&lt;int, int&gt; mp;\n    bool failed = false;\n    for (int i = 1; i &lt;= n; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        // \u8ba1\u6570\u5668\u7684\u503c\u4e0d\u80fd\u6bd4\u64cd\u4f5c\u6570\u8fd8\u5927\n        if (y &gt; x) failed = true;\n        // \u8bb0\u5f55\u5fc5\u987b\u662f\u6e05\u96f6\u64cd\u4f5c\u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u52a0\u4e00\u64cd\u4f5c\u7684\u533a\u95f4\n        int &amp;t = mp[x - y];\n        t = max(t, x);\n    }\n    if (failed) { printf(\"No\\n\"); return; }\n\n    // R \u8868\u793a\u6e05\u96f6\u64cd\u4f5c\u7684\u201c\u7981\u533a\u201d\u7684\u6700\u53f3\u7aef\n    int R = -1;\n    for (auto &amp;p : mp) {\n        // \u9700\u8981\u5728\u201c\u7981\u533a\u201d\u91cc\u6267\u884c\u6e05\u96f6\u64cd\u4f5c\uff0c\u65e0\u89e3\n        if (R &gt;= p.first) { printf(\"No\\n\"); return; }\n        // \u66f4\u65b0\u201c\u7981\u533a\u201d\u7684\u6700\u53f3\u7aef\n        R = p.second;\n    }\n    printf(\"Yes\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/k/","title":"K - \u534e\u4e3d\u6536\u573a","text":""},{"location":"2023-icpc-nanjing/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u73879/342 (2.6%)"},{"location":"2023-icpc-nanjing/k/#_2","title":"\u9898\u89e3","text":"<p>\u4ee5\u4e0b\u7528 \\([1]\\) \u8868\u793a\u6253\u51fa\u540e\u53ef\u4ee5\u62bd\u4e00\u5f20\u724c\u7684 \\(Q\\)\uff0c\u7528 \\([2]\\) \u8868\u793a\u6253\u51fa\u540e\u53ef\u4ee5\u62bd\u4e24\u5f20\u724c\u7684 \\(B\\)\u3002</p> <p>\u9996\u5148\u53ef\u4ee5\u89c2\u5bdf\u5230\uff1a</p> <ul> <li>\u5728\u6ee1\u624b\u724c\u4e4b\u524d\uff0c\u6253\u51fa\u4e00\u5f20 \\([1]\\) \u624b\u724c\u6570\u91cf\u4e0d\u53d8\uff0c\u6253\u51fa\u4e00\u5f20 \\([2]\\) \u624b\u724c\u6570\u91cf\u52a0\u4e00\u3002</li> <li>\u4e00\u65e6\u5230\u8fbe\u4e86\u6ee1\u624b\u724c\u72b6\u6001\uff0c\u65e0\u8bba\u4e4b\u540e\u600e\u4e48\u6253\u724c\uff0c\u90fd\u4f1a\u4fdd\u6301\u6ee1\u624b\u724c\u3002</li> </ul> <p>\u4ece\u4ee5\u4e0a\u4e24\u70b9\u53ef\u4ee5\u5f97\u51fa\u4ee5\u4e0b\u7ed3\u8bba\uff1a</p> <ul> <li>\u624b\u724c\u6570\u91cf\u968f\u7740\u6e38\u620f\u8fdb\u884c\u662f\u5355\u8c03\u4e0d\u964d\u7684\u3002</li> <li>\u5982\u679c\u6709\u6700\u5c0f\u53ef\u884c\u7684 \\(k\\)\uff0c\u90a3\u4e48\u51b3\u7b56\u7684\u8fc7\u7a0b\u4e2d\u4e00\u5b9a\u4f1a\u6709\u4e00\u4e2a\u65f6\u523b\u624b\u724c\u6570\u91cf\u5230\u8fbe\u4e86\u4e0a\u9650\uff0c\u5426\u5219 \\(k\\) \u8fd8\u53ef\u4ee5\u66f4\u5c0f\u3002</li> </ul> <p>\u4e5f\u5c31\u662f\u8bf4\uff0c\u6700\u4f18\u89e3\u4e00\u5b9a\u4f1a\u8fdb\u5165\u6ee1\u624b\u724c\u72b6\u6001\uff0c\u4e14\u8fdb\u5165\u6ee1\u624b\u724c\u72b6\u6001\u4ee5\u540e\uff0c\u6240\u6709\u7684\u51b3\u7b56\u90fd\u4e0d\u518d\u53d7 \\(k\\) \u7684\u5927\u5c0f\u7684\u5f71\u54cd\u3002\u56e0\u6b64\u53ef\u4ee5\u5c06\u672c\u9898\u5206\u4e3a\u4e24\u90e8\u5206\u89e3\u7b54\uff1a\u624b\u724c\u6ca1\u6ee1\u7684\u60c5\u51b5\uff0c\u4ee5\u53ca\u624b\u724c\u6ee1\u4e86\u4e4b\u540e\u7684\u60c5\u51b5\u3002</p> <p>\u5bf9\u4e8e\u8fdb\u5165\u6ee1\u624b\u724c\u72b6\u6001\u540e\u7684\u6700\u4f18\u51b3\u7b56\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\u3002\u4ee4 \\(f(i, j)\\) \u8868\u793a\u5f53\u524d\u624b\u724c\u5df2\u6ee1\uff0c\u624b\u4e0a\u6709 \\(j\\) \u5f20 \\([2]\\)\uff0c\u5df2\u7ecf\u4ece\u724c\u5806\u62bd\u4e86 \\(i\\) \u5f20\u724c\uff0c\u6700\u5c11\u9700\u8981\u6b64\u65f6\u624b\u4e0a\u8fd8\u6709\u591a\u5c11\u5f20 \\([1]\\) \u624d\u80fd\u62bd\u5b8c\u3002\u8f6c\u79fb\u65b9\u7a0b\u53ef\u4ee5\u679a\u4e3e\u4e0b\u4e00\u5f20\u4f7f\u7528\u7684\u724c\u662f \\([1]\\) \u8fd8\u662f \\([2]\\)\u3002</p> <p>\u5728\u6c42\u51fa\u6240\u6709 \\(f(i, j)\\) \u7684\u57fa\u7840\u4e0a\uff0c\u6211\u4eec\u679a\u4e3e\u624b\u724c\u4e0a\u9650 \\(k\\)\uff0c\u5c1d\u8bd5\u5224\u65ad\u5b83\u662f\u5426\u53ef\u884c\u3002\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e\u7b2c\u4e00\u6b21\u8fdb\u5165\u6ee1\u624b\u724c\u72b6\u6001\u65f6\uff0c\u724c\u5806\u91cc\u5df2\u7ecf\u62bd\u4e86 \\(t\\) \u5f20\u724c\uff0c\u6b64\u65f6\uff1a</p> <ul> <li>\u56e0\u4e3a\u624b\u724c\u672a\u6ee1\u65f6\uff0c\u6253\u51fa\u4e00\u5f20 \\([2]\\) \u624b\u724c\u6570\u91cf\u52a0\u4e00\u3002\u8fdb\u5165\u6ee1\u624b\u724c\u72b6\u6001\u65f6\uff0c\u624b\u724c\u6570\u589e\u52a0\u4e86 \\((k - n)\\)\uff0c\u5373\u6211\u4eec\u4e00\u5171\u6253\u51fa\u4e86 \\((k - n)\\) \u5f20 \\([2]\\)\u3002</li> <li>\u540c\u6837\u5730\uff0c\u7531\u4e8e\u6211\u4eec\u62bd\u4e86 \\(t\\) \u5f20\u724c\uff0c\u53c8\u5df2\u7ecf\u77e5\u9053\u6253\u51fa\u4e86\u51e0\u5f20 \\([2]\\)\uff0c\u81ea\u7136\u4e5f\u80fd\u7b97\u51fa\u6253\u51fa\u4e86 \\(t - 2(k - n)\\) \u5f20 \\([1]\\)\u3002</li> </ul> <p>\u4e0d\u59a8\u9884\u5904\u7406 \\(s_1(i)\\) \u8868\u793a\u8d77\u59cb\u624b\u724c\u52a0\u4e0a\u724c\u5806\u7684\u524d \\(i\\) \u5f20\u724c\u4e2d\u5171\u6709\u51e0\u5f20 \\([1]\\)\uff0c\\(s_2(i)\\) \u8868\u793a\u8d77\u59cb\u624b\u724c\u52a0\u4e0a\u724c\u5806\u7684\u524d \\(i\\) \u5f20\u724c\u4e2d\u5171\u6709\u51e0\u5f20 \\([2]\\)\uff0c\u5219\u6b64\u65f6\u624b\u724c\u4e2d \\([1]\\) \u7684\u6570\u91cf \\(c_1\\) \u4ee5\u53ca \\([2]\\) \u7684\u6570\u91cf \\(c_2\\) \u5373\u53ef\u7b97\u51fa\u6765\uff1a</p> \\[ \\begin{matrix} c_1 = s_1(t) - (t - 2(k - n)) \\\\ c_2 = s_2(t) - (k - n) \\end{matrix} \\] <p>\u5224\u65ad \\(f(t, c_2) \\le c_1\\) \u662f\u5426\u6210\u7acb\u5373\u53ef\u77e5\u9053 \\(k\\) \u662f\u4e0d\u662f\u4e00\u4e2a\u53ef\u884c\u7684\u624b\u724c\u4e0a\u9650\u3002\u4f46\u9700\u8981\u7559\u610f\u7684\u662f\uff0c\u5373\u4f7f\u5728\u4e0d\u89e6\u53ca\u624b\u724c\u4e0a\u9650\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u4e0d\u4e00\u5b9a\u80fd\u901a\u8fc7\u62bd\u5361\u5230\u8fbe \\(f(t, c_2)\\) \u8fd9\u4e00\u4e2a\u72b6\u6001\uff0c\u6216\u8005\u8fd9\u4e2a\u72b6\u6001\u672c\u8eab\u5c31\u4e0d\u5408\u6cd5 (\u5373 \\(c_1 &lt; 0\\) \u6216\u8005 \\(c_2 &lt; 0\\))\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u90e8\u5206\u6765\u5224\u65ad\u80fd\u5426\u5728\u4e0d\u89e6\u53ca\u624b\u724c\u4e0a\u9650\u7684\u60c5\u51b5\u4e0b\u5230\u8fbe\u8fd9\u4e2a\u72b6\u6001\u3002</p> <p>\u8fd9\u91cc\u6709\u591a\u79cd\u89e3\u51b3\u65b9\u6cd5\uff0c\u5176\u4e2d\u4e00\u79cd\u601d\u8def\u662f\u518d\u6b21\u91c7\u7528\u52a8\u6001\u89c4\u5212\uff0c\u4ee4 \\(g(i, j) = 0 / 1\\) \u8868\u793a\u4e0d\u8003\u8651\u624b\u724c\u4e0a\u9650\u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u524d\u624b\u4e0a\u6709 \\(j\\) \u5f20 \\([2]\\)\uff0c\u4ece\u724c\u5806\u4e2d\u62bd\u4e86 \\(i\\) \u5f20\u724c\u662f\u5426\u53ef\u884c\u3002\u7531\u4e8e\u4e0d\u5b58\u5728\u624b\u724c\u4e0a\u9650\uff0c\u6240\u4ee5\u6b64\u65f6\u624b\u4e0a\u6709\u591a\u5c11\u5f20 \\([1]\\) \u5728 \\(j\\) \u786e\u5b9a\u7684\u60c5\u51b5\u4e0b\u662f\u53ef\u4ee5\u8ba1\u7b97\u5f97\u51fa\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u4e0b\u4e00\u5f20\u4f7f\u7528\u7684\u724c\u662f \\([1]\\) \u8fd8\u662f \\([2]\\) \u8fdb\u884c\u8f6c\u79fb\u3002</p> <p>\u90a3\u4e48\u6211\u4eec\u5c31\u5b8c\u5584\u4e86\u5224\u65ad\u4e00\u7ec4 \\((k, t)\\) \u662f\u5426\u5408\u6cd5\u7684\u6761\u4ef6:</p> \\[ (c_1 \\geq 0) \\land (c_2 \\geq 0) \\land (f(t, c_2) \\le c_1) \\land  (g(t, c_2) = 1)  \\] <p>\u590d\u6742\u5ea6 \\(\\mathcal O(nm)\\)\u3002</p>"},{"location":"2023-icpc-nanjing/k/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 2500\n#define MAXM 2500\n#define INF ((int) 1e9)\nusing namespace std;\n\nint n, m;\nchar H[MAXN + 10], P[MAXM + 10];\n\nint num[MAXM + 10][3], f[MAXM + 10][MAXM / 2 + 10];\nbool g[MAXM + 10][MAXN + MAXM + 10];\n\nint idx(char c) {\n    if (c == 'Q') return 1;\n    else if (c == 'B') return 2;\n    else return 0;\n}\n\n// \u5f53\u524d\u624b\u724c\u5df2\u6ee1\uff0c\u624b\u4e0a\u6709 j \u5f20 [2]\uff0c\u5df2\u7ecf\u4ece\u724c\u5806\u62bd\u4e86 i \u5f20\u724c\uff0c\u6700\u5c11\u9700\u8981\u6b64\u65f6\u624b\u4e0a\u8fd8\u6709\u591a\u5c11\u5f20 [1] \u624d\u80fd\u62bd\u5b8c\n// \u5355\u72ec\u63d0\u4e00\u4e2a\u51fd\u6570\u662f\u4e3a\u4e86\u4f18\u5316 j * 2 &gt;= m - i \u7684\u60c5\u51b5\uff0c\u6b64\u65f6\u53ea\u8981\u628a [2] \u90fd\u6253\u51fa\u53bb\u5c31\u80fd\u62bd\u5b8c\u724c\uff0c\u4e0d\u9700\u8981 [1]\nint query(int i, int j) {\n    if (j * 2 &gt;= m - i) return 0;\n    return f[i][j];\n}\n\nvoid solve() {\n    scanf(\"%d%d%s%s\", &amp;n, &amp;m, H + 1, P + 1);\n\n    // \u9884\u5904\u7406\u521d\u59cb\u624b\u724c\u4ee5\u53ca\u524d i \u5f20\u624b\u724c\u91cc\u5171\u6709\u51e0\u5f20 [1] \u548c [2]\n    for (int i = 0; i &lt; 3; i++) num[0][i] = 0;\n    for (int i = 1; i &lt;= n; i++) num[0][idx(H[i])]++;\n    for (int i = 1; i &lt;= m; i++) {\n        for (int j = 0; j &lt; 3; j++) num[i][j] = num[i - 1][j];\n        num[i][idx(P[i])]++;\n    }\n\n    // \u8ba1\u7b97 f[i][j] \u8868\u793a\n    // \u5f53\u524d\u624b\u724c\u5df2\u6ee1\uff0c\u624b\u4e0a\u6709 j \u5f20 [2]\uff0c\u5df2\u7ecf\u4ece\u724c\u5806\u62bd\u4e86 i \u5f20\u724c\uff0c\u6700\u5c11\u9700\u8981\u6b64\u65f6\u624b\u4e0a\u8fd8\u6709\u591a\u5c11\u5f20 [1] \u624d\u80fd\u62bd\u5b8c\n    for (int i = m - 1; i &gt;= 0; i--) for (int j = 0; j * 2 &lt; m - i; j++) {\n        f[i][j] = INF;\n\n        // \u4e0b\u4e00\u5f20\u6253 [1]\n        // \u6ce8\u610f\u8fd9\u91cc\u7684 max(..., 1)\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u6253\u4e00\u5f20 [1] \u518d\u6478\u4e00\u5f20 [1]\uff0c\u6240\u4ee5\u81f3\u5c11\u9700\u8981 1 \u5f20 [1]\n        if (P[i + 1] == 'Q') f[i][j] = min(f[i][j], max(query(i + 1, j), 1));\n        else if (P[i + 1] == 'B') f[i][j] = min(f[i][j], query(i + 1, j + 1) + 1);\n        else f[i][j] = min(f[i][j], query(i + 1, j) + 1);\n\n        // \u4e0b\u4e00\u5f20\u6253 [2]\uff0c\u81f3\u5c11\u9700\u8981\u4e00\u5f20 [2]\n        if (j == 0) continue;\n        if (P[i + 1] == 'Q') f[i][j] = min(f[i][j], max(query(i + 2, j - 1) - 1, 0));\n        else if (P[i + 1] == 'B') f[i][j] = min(f[i][j], query(i + 2, j));\n        else f[i][j] = min(f[i][j], query(i + 2, j - 1));\n    }\n\n    for (int i = 0; i &lt;= m; i++) for (int j = 0; j &lt;= num[m][2]; j++) g[i][j] = false;\n    // \u4e0d\u8003\u8651\u624b\u724c\u4e0a\u9650\u7684\u60c5\u51b5\u4e0b\uff0c\u5f53\u524d\u624b\u4e0a\u6709 j \u5f20 [2]\uff0c\u4ece\u724c\u5806\u4e2d\u62bd\u4e86 i \u5f20\u724c\u662f\u5426\u53ef\u884c\n    g[0][num[0][2]] = true;\n    for (int i = 0; i &lt; m; i++) for (int j = 0; j &lt;= num[i][2]; j++) if (g[i][j]) {\n        // \u8ba1\u7b97\u5f53\u524d\u624b\u4e0a\u6709\u51e0\u5f20 [1]\n        int one = num[i][1] - (i - 2 * (num[i][2] - j));\n        if (one &lt; 0) continue;\n\n        // \u4e0b\u4e00\u5f20\u6253 [1]\n        if (one &gt; 0) {\n            if (P[i + 1] == 'B') g[i + 1][j + 1] = true;\n            else g[i + 1][j] = true;\n        }\n\n        // \u4e0b\u4e00\u5f20\u6253 [2]\n        if (j &gt; 0 &amp;&amp; i + 2 &lt;= m) {\n            int tmp = (P[i + 1] == 'B' ? 1 : 0) + (P[i + 2] == 'B' ? 1 : 0);\n            g[i + 2][j - 1 + tmp] = true;\n        }\n    }\n\n    // \u679a\u4e3e\u624b\u724c\u4e0a\u9650 k\uff0c\u4ee5\u53ca\u7b2c\u4e00\u6b21\u8fbe\u5230\u624b\u724c\u4e0a\u9650\u65f6\uff0c\u4ece\u724c\u5806\u6478\u4e86 t \u5f20\u724c\n    for (int k = n; k &lt;= n + m; k++) for (int t = 0; t &lt;= m; t++) {\n        int cnt1 = num[t][1] - (t - 2 * (k - n));\n        int cnt2 = num[t][2] - (k - n);\n        if (cnt1 &gt;= 0 &amp;&amp; cnt2 &gt;= 0 &amp;&amp; query(t, cnt2) &lt;= cnt1 &amp;&amp; g[t][cnt2]) {\n            printf(\"%d\\n\", k);\n            return;\n        }\n    }\n    printf(\"IMPOSSIBLE\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/l/","title":"L - \u7535\u68af","text":""},{"location":"2023-icpc-nanjing/l/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u7387125/342 (36.5%)"},{"location":"2023-icpc-nanjing/l/#_2","title":"\u9898\u89e3","text":""},{"location":"2023-icpc-nanjing/l/#_3","title":"\u8d2a\u5fc3\u7b56\u7565","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u4e0b\u8d2a\u5fc3\u7b56\u7565\uff1a\u5c06\u6240\u6709\u5305\u88f9\uff08\u65e0\u8bba\u91cd\u91cf\u662f\u591a\u5c11\uff09\u6309\u76ee\u6807\u697c\u5c42\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\uff0c\u4e4b\u540e\u6bcf\u8d9f\u7535\u68af\u6309\u8be5\u987a\u5e8f\u679a\u4e3e\u6240\u6709\u8fd8\u672a\u88ab\u8fd0\u9001\u7684\u5305\u88f9\u5e76\u52a0\u5165\u7535\u68af\uff0c\u76f4\u5230\u7535\u68af\u88c5\u6ee1\u6216\u6240\u6709\u5305\u88f9\u90fd\u88ab\u679a\u4e3e\u3002\u679a\u4e3e\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u7535\u68af\u5bb9\u91cf\u53ea\u5269 \\(1\\)\uff0c\u4f46\u662f\u4e0b\u4e00\u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u5374\u662f \\(2\\) \u7684\u60c5\u51b5\u3002\u6b64\u65f6\u8981\u7ee7\u7eed\u679a\u4e3e\uff0c\u76f4\u5230\u51fa\u73b0\u91cd\u91cf\u4e3a \\(1\\) \u7684\u5305\u88f9\u3002</p>"},{"location":"2023-icpc-nanjing/l/#_4","title":"\u8d2a\u5fc3\u7b56\u7565\u7684\u8bc1\u660e","text":"<p>\u63a5\u4e0b\u6765\u8bc1\u660e\u8be5\u8d2a\u5fc3\u7b56\u7565\u7684\u6b63\u786e\u6027\u3002\u6211\u4eec\u901a\u8fc7\u8bf4\u660e\u8be5\u8d2a\u5fc3\u7b56\u7565\u4ea7\u751f\u7684\u7b54\u6848\u8fbe\u5230\u4e86\u4e0b\u754c\u6765\u8bf4\u660e\u6700\u4f18\u6027\u3002\u4e3a\u4e86\u6c42\u51fa\u7b54\u6848\u7684\u4e0b\u754c\uff0c\u6211\u4eec\u5c06\u6240\u6709\u91cd\u91cf\u4e3a \\(2\\) \u7684\u5305\u88f9\u62c6\u6210\u4e24\u4e2a\u91cd\u91cf\u4e3a \\(1\\) \u7684\u5305\u88f9\uff0c\u53d8\u6210\u8fd9\u6837\u4e00\u4e2a\u65b0\u95ee\u9898\uff1a</p> <p>\u7ed9\u4e00\u4e2a\u5e8f\u5217 \\(a_1, a_2, \\cdots, a_n\\)\uff0c\u5c06\u5e8f\u5217\u4e2d\u7684\u6240\u6709\u6570\u5206\u6210\u82e5\u5e72\u7ec4\uff0c\u6bcf\u7ec4\u6700\u591a\u5305\u542b \\(k\\) \u4e2a\u6570\u3002\u4e00\u4e2a\u5206\u7ec4\u65b9\u6848\u7684\u5f97\u5206\u662f\u6240\u6709\u7ec4\u6700\u5927\u503c\u7684\u548c\uff0c\u6c42\u6700\u5c0f\u5f97\u5206\u3002</p> <p>\u7531\u4e8e\u539f\u95ee\u9898\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u914d\u9001\u65b9\u6848\u90fd\u80fd\u5bf9\u5e94\u65b0\u95ee\u9898\u4e2d\u7684\u4e00\u4e2a\u914d\u9001\u65b9\u6848\uff0c\u56e0\u6b64\u65b0\u95ee\u9898\u7684\u7b54\u6848\u4e0d\u6bd4\u539f\u95ee\u9898\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4\u65b0\u95ee\u9898\u7684\u7b54\u6848\u5c31\u662f\u539f\u95ee\u9898\u7b54\u6848\u7684\u4e0b\u754c\u3002</p> <p>\u8fd9\u4e2a\u65b0\u95ee\u9898\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u6211\u4eec\u53ea\u8981\u628a\u5e8f\u5217\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7136\u540e\u628a\u7b2c \\(1\\) \u5230 \\(k\\) \u4e2a\u6570\u5206\u6210\u4e00\u7ec4\uff0c\u7b2c \\((k + 1)\\) \u5230 \\(2k\\) \u4e2a\u6570\u5206\u6210\u4e00\u7ec4... \u5373\u53ef\u3002\u7b54\u6848\u5c31\u662f\u6240\u6709\u4e0b\u6807\u5bf9 \\(k\\) \u53d6\u6a21\u7b49\u4e8e \\(1\\) \u7684\u6570\u7684\u548c\u3002</p> <p>\u63a5\u4e0b\u6765\u8bc1\u660e\u539f\u95ee\u9898\u7684\u8d2a\u5fc3\u7b56\u7565\u4e5f\u80fd\u5f97\u5230\u8fd9\u4e2a\u7b54\u6848\u3002\u6211\u4eec\u8ba8\u8bba\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u3002\u5728\u793a\u610f\u56fe\u4e2d\uff0c\u6211\u4eec\u7528\u7ea2\u8272\u7bad\u5934\u6307\u5411\u6bcf\u8d9f\u7535\u68af\u7684\u6700\u5927\u697c\u5c42\uff0c\u4e5f\u5c31\u662f\u771f\u6b63\u6d88\u8017\u7535\u91cf\u7684\u5305\u88f9\u3002</p> <ul> <li> <p>\u524d\u9762\u603b\u91cd\u91cf\u4e3a \\(k\\) \u7684\u8d27\u7269\u6070\u597d\u80fd\u88c5\u6ee1\u4e00\u8d9f\u7535\u68af\u3002\u6b64\u65f6\u539f\u95ee\u9898\u548c\u65b0\u95ee\u9898\u6d88\u8017\u4e86\u76f8\u540c\u7684\u7535\u80fd\u3002</p> <p></p> </li> <li> <p>\u51fa\u73b0\u7535\u68af\u5bb9\u91cf\u53ea\u5269 \\(1\\)\uff0c\u4f46\u662f\u4e0b\u4e00\u4e2a\u5305\u88f9\u7684\u91cd\u91cf\u5374\u662f \\(2\\) \u7684\u60c5\u51b5\u3002</p> <p></p> <p>\u7531\u4e8e \\(k\\) \u662f\u5076\u6570\uff0c\u56e0\u6b64\u5728\u4e0b\u4e00\u4e2a\u91cd\u91cf\u4e3a \\(1\\) \u7684\u5305\u88f9\u51fa\u73b0\u4e4b\u524d\uff0c\u65b0\u95ee\u9898\u7684\u7ea2\u7bad\u5934\u6307\u5411\u7684\u90fd\u662f\u5927\u5305\u88f9\u7684\u540e\u534a\u90e8\u5206\u3002\u5728\u539f\u95ee\u9898\u7684\u8d2a\u5fc3\u7b56\u7565\u4e2d\uff0c\u6211\u4eec\u628a\u4e0b\u4e00\u4e2a\u91cd\u91cf\u4e3a \\(1\\) \u7684\u5305\u88f9\u79fb\u5230\u4e86\u524d\u9762\uff0c\u90a3\u4e48\u4e2d\u95f4\u7684\u6240\u6709\u5927\u5305\u88f9\u90fd\u4f1a\u53f3\u79fb\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u7ea2\u7bad\u5934\u4e5f\u4ece\u5927\u5305\u88f9\u7684\u540e\u534a\u90e8\u5206\u79fb\u5230\u4e86\u524d\u534a\u90e8\u5206\u3002\u4f46\u6240\u6709\u7ea2\u7bad\u5934\u6307\u5411\u7684\u4ecd\u7136\u662f\u540c\u4e00\u4e2a\u5305\u88f9\uff0c\u56e0\u6b64\u7b54\u6848\u4e5f\u6ca1\u6709\u6539\u53d8\u3002</p> <p>\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u91cd\u91cf\u4e3a \\(1\\) \u7684\u5305\u88f9\u3002\u6b64\u65f6\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a \\(f_i = 0\\) \u4e14\u91cd\u91cf\u4e3a \\(1\\) \u7684\u5305\u88f9\uff0c\u5373\u53ef\u5728\u4e0d\u5f71\u54cd\u95ee\u9898\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\u91cd\u65b0\u5229\u7528\u4e0a\u8ff0\u8bc1\u660e\u3002</p> </li> </ul> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u8bc1\u660e\u4e86\u539f\u95ee\u9898\u7684\u8d2a\u5fc3\u7b56\u7565\u80fd\u591f\u8fbe\u5230\u7b54\u6848\u7684\u4e0b\u754c\uff0c\u4e5f\u5c31\u8bc1\u660e\u4e86\u8d2a\u5fc3\u7b56\u7565\u7684\u6700\u4f18\u6027\u3002</p>"},{"location":"2023-icpc-nanjing/l/#_5","title":"\u4ee3\u7801\u5b9e\u73b0","text":"<p>\u53ef\u80fd\u60a8\u51c6\u5907\u76f4\u63a5\u5b9e\u73b0\u8fd9\u4e2a\u8d2a\u5fc3\u7b56\u7565\u3002\u4f46\u6839\u636e\u8bc1\u660e\u8fc7\u7a0b\uff0c\u539f\u95ee\u9898\u548c\u65b0\u95ee\u9898\u7684\u7b54\u6848\u662f\u4e00\u6837\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u6c42\u65b0\u95ee\u9898\u7684\u7b54\u6848\u5373\u53ef\u3002\u7531\u4e8e\u5305\u88f9\u603b\u6570\u53ef\u80fd\u5f88\u591a\uff0c\u6211\u4eec\u8981\u7528\u9664\u6cd5\u5feb\u901f\u8ba1\u7b97\u76ee\u7684\u5730\u76f8\u540c\u7684\u5305\u88f9\u5bf9\u7b54\u6848\u7684\u5f71\u54cd\u3002</p> <p>\u603b\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\uff0c\u4e3b\u8981\u662f\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2023-icpc-nanjing/l/#_6","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\nlong long K, ans;\nvector&lt;pii&gt; A;\n\nvoid solve() {\n    scanf(\"%d%lld\", &amp;n, &amp;K);\n\n    A.clear();\n    for (int i = 1; i &lt;= n; i++) {\n        int x, y, z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z);\n        // \u628a\u6240\u6709\u5927\u5c0f\u4e3a 2 \u7684\u5305\u88f9\u62c6\u6210\u4e24\u4e2a\u5927\u5c0f\u4e3a 1 \u7684\u5305\u88f9\n        A.push_back(pii(-z, x * y));\n    }\n    // \u6309\u697c\u5c42\u4ece\u9ad8\u5230\u4f4e\u6392\u5e8f\n    sort(A.begin(), A.end());\n\n    ans = 0;\n    // now\uff1a\u8fd9\u4e00\u8d9f\u7535\u68af\u7684\u6700\u9ad8\u697c\u5c42\n    // sm\uff1a\u73b0\u5728\u7535\u68af\u91cc\u5df2\u7ecf\u653e\u4e86\u591a\u5c11\u5305\u88f9\n    long long now = -A[0].first, sm = 0;\n    // \u4f9d\u6b21\u5904\u7406\u6bcf\u79cd\u5305\u88f9\n    for (pii p : A) {\n        sm += p.second;\n        // \u65b0\u5305\u88f9\u7684\u52a0\u5165\u5bfc\u81f4\u7535\u68af\u91cc\u653e\u4e86\u8d85\u8fc7 K \u4e2a\u5305\u88f9\n        if (sm &gt; K) {\n            ans += now;\n            now = -p.first;\n            sm -= K;\n\n            // \u7528\u9664\u6cd5\u5feb\u901f\u5904\u7406\u540c\u4e00\u79cd\u5305\u88f9\n            // \u8fd9\u91cc\u5206\u5b50\u662f sm - 1\uff0c\u662f\u4e3a\u4e86\u9632\u6b62 sm % K == 0 \u7684\u60c5\u51b5\uff0c\u5bfc\u81f4 now \u7684\u503c\u51fa\u9519\n            long long t = (sm - 1) / K;\n            ans += now * t;\n            sm -= t * K;\n        }\n    }\n    ans += now;\n\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-icpc-nanjing/m/","title":"M - \u63a5\u96e8\u6c34","text":""},{"location":"2023-icpc-nanjing/m/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9 \u961f\u4f0d\u901a\u8fc7\u738769/342 (20.2%)"},{"location":"2023-icpc-nanjing/m/#_2","title":"\u9898\u89e3","text":"<p>\u53ef\u4ee5\u53d1\u73b0\uff0c\\(f_i\\) \u7684\u503c\u4ece\u5de6\u5f80\u53f3\u9010\u6e10\u589e\u52a0\uff0c\u5728\u7ecf\u8fc7 \\(\\max a_i\\) \u4e4b\u540e\u4fdd\u6301\u4e0d\u53d8\u3002\u540c\u6837\u5730\uff0c\\(g_i\\) \u4ece\u53f3\u5f80\u5de6\u9010\u6e10\u589e\u52a0\uff0c\u5728\u7ecf\u8fc7 \\(\\max a_i\\) \u4e4b\u540e\u4fdd\u6301\u4e0d\u53d8\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\\(\\min(f_i, g_i) = f_i + g_i - \\max a_i\\)\u3002\u6240\u4ee5\u6211\u4eec\u8981\u6c42\u7684\u7b54\u6848\u5c31\u662f</p> \\[ \\sum\\limits_{i = 1}^n f_i + \\sum\\limits_{i = 1}^n g_i - n \\times \\max a_i - \\sum\\limits_{i = 1}^n a_i \\] <p>\\(n \\times \\max a_i\\) \u548c \\(\\sum\\limits_{i = 1}^n a_i\\) \u90fd\u5f88\u5bb9\u6613\u7ef4\u62a4\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8003\u8651\u600e\u6837\u7ef4\u62a4 \\(\\sum\\limits_{i = 1}^n f_i\\)\u3002</p> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\\(f_i\\) \u53ef\u4ee5\u88ab\u5206\u6210\u82e5\u5e72\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u90fd\u6709\u76f8\u540c\u7684\u503c\uff0c\u4e14\u4e0d\u540c\u6bb5\u7684\u503c\u662f\u5355\u8c03\u9012\u589e\u7684\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a <code>set&lt;pair&lt;int, long long&gt;&gt;</code> \u8bb0\u5f55\u6bcf\u4e00\u6bb5\u7684\u5f00\u5934\u4ee5\u53ca\u6bcf\u4e00\u6bb5\u7684\u503c\u3002\u7531\u4e8e \\(a_i\\) \u7684\u503c\u53ea\u4f1a\u589e\u52a0\uff0c\u56e0\u6b64\u6bcf\u6b21\u64cd\u4f5c\u540e\uff0cset \u91cc\u7684\u5143\u7d20\u6700\u591a\u53ea\u4f1a\u589e\u52a0\u4e00\u4e2a\u3002\u6211\u4eec\u5c06\u64cd\u4f5c\u7ed3\u679c\u63d2\u5165 set \u540e\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u503c\u7684\u5355\u8c03\u6027\uff0c\u9700\u8981\u628a\u63d2\u5165\u4f4d\u7f6e\u540e\u9762\u6bd4\u64cd\u4f5c\u7ed3\u679c\u5c0f\u7684\u5143\u7d20\u90fd\u79fb\u9664\u3002</p> <p>\u7531\u4e8e\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u88ab\u79fb\u9664\u4e00\u6b21\uff0c\u56e0\u6b64\u4e00\u5171\u53ea\u4f1a\u6267\u884c \\(\\mathcal{O}(n + q)\\) \u6b21\u79fb\u9664\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6 \\(\\mathcal{O}((n + q)\\log(n + q))\\)\u3002</p>"},{"location":"2023-icpc-nanjing/m/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define INF ((long long) 1e18)\nusing namespace std;\ntypedef pair&lt;int, long long&gt; pil;\n\nint n, q;\nlong long A[MAXN + 10];\n\nstruct Magic {\n    long long A[MAXN + 10], sm;\n    set&lt;pil&gt; st;\n\n    void clear() {\n        memset(A, 0, sizeof(long long) * (n + 3));\n        sm = 0;\n        st.clear(); st.insert(pil(1, 0)); st.insert(pil(n + 1, INF));\n    }\n\n    // A[x] += v\n    void update(int x, long long v) {\n        A[x] += v;\n        // \u5c1d\u8bd5\u5c06\u64cd\u4f5c\u7ed3\u679c\u63d2\u5165 set \u4e2d\n        auto it = prev(st.upper_bound(pil(x, INF)));\n        // \u5982\u679c\u63d2\u5165\u4f4d\u7f6e\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u90fd\u6bd4\u64cd\u4f5c\u7ed3\u679c\u5927\uff0c\u90a3\u4e48\u672c\u6b21\u64cd\u4f5c\u65e0\u5f71\u54cd\n        if (it-&gt;second &gt;= A[x]) return;\n        sm -= (next(it)-&gt;first - it-&gt;first) * it-&gt;second;\n        sm += (x - it-&gt;first) * it-&gt;second + (next(it)-&gt;first - x) * A[x];\n        it = st.insert(pil(x, A[x])).first;\n        // \u5c06\u63d2\u5165\u4f4d\u7f6e\u540e\u9762\u6bd4\u64cd\u4f5c\u7ed3\u679c\u5c0f\u7684\u5143\u7d20\u90fd\u79fb\u9664\n        while (next(it)-&gt;second &lt;= A[x]) {\n            sm -= (next(it)-&gt;first - x) * A[x] + (next(next(it))-&gt;first - next(it)-&gt;first) * next(it)-&gt;second;\n            st.erase(next(it));\n            sm += (next(it)-&gt;first - x) * A[x];\n        }\n    }\n} f, g;\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    long long mx = 0, sm = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%lld\", &amp;A[i]);\n        mx = max(mx, A[i]); sm += A[i];\n    }\n\n    // g \u7684\u7ef4\u62a4\u5176\u5b9e\u53ea\u8981\u628a\u5e8f\u5217 A \u5012\u8fc7\u6765\uff0c\u5269\u4e0b\u7684\u64cd\u4f5c\u548c f \u7684\u7ef4\u62a4\u90fd\u662f\u4e00\u6837\u7684\n    f.clear(); g.clear();\n    for (int i = 1; i &lt;= n; i++) f.update(i, A[i]), g.update(n + 1 - i, A[i]);\n\n    scanf(\"%d\", &amp;q);\n    while (q--) {\n        int x, v; scanf(\"%d%d\", &amp;x, &amp;v);\n        A[x] += v;\n        mx = max(mx, A[x]); sm += v;\n        f.update(x, v); g.update(n + 1 - x, v);\n        printf(\"%lld\\n\", f.sm + g.sm - n * mx - sm);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/","title":"2023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2023-provincial-guangdong/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2023/05/14 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ | \u6d1b\u8c37 | CSG 1200 ~ 1212 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2023-provincial-guangdong/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 236, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 59, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 32, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 25, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 198, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 56, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 145, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 44, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 30, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 21, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 11, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 20, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 123, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 43, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 135, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 44, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 35, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 40, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 23, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 36, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 59, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 16, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 19, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 14, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2023-provincial-guangdong/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2023-provincial-guangdong/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2023-provincial-guangdong/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>A - \u7b97\u6cd5\u7ade\u8d5b</li> <li>B - \u57fa\u7ad9\u5efa\u8bbe</li> <li>C - \u5e02\u573a\u4ea4\u6613</li> <li>D - \u65b0\u5c45\u89c4\u5212</li> <li>E - \u65b0\u6000\u8d28\u95ee</li> <li>F - \u683c\u5b50\u65c5\u884c</li> <li>G - \u4ea4\u6362\u64cd\u4f5c</li> <li>H - \u6d41\u753b\u6ea2\u5f69</li> <li>I - \u8def\u5f84\u89c4\u5212</li> <li>J - X \u7b49\u4e8e Y</li> <li>K - \u72ec\u7acb\u94bb\u77f3</li> <li>L - \u7ecf\u5178\u95ee\u9898</li> <li>M - \u8ba1\u7b97\u51e0\u4f55</li> </ul>"},{"location":"2023-provincial-guangdong/a/","title":"A - \u7b97\u6cd5\u7ade\u8d5b","text":""},{"location":"2023-provincial-guangdong/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387295/295 (100.0%)"},{"location":"2023-provincial-guangdong/a/#_2","title":"\u9898\u89e3","text":"<p>\u4ece \\(y_1\\) \u679a\u4e3e\u5230 \\(y_2\\)\uff0c\u82e5\u679a\u4e3e\u7684\u5e74\u4efd\u4e0d\u5728\u505c\u529e\u5e74\u4efd\u91cc\u5219\u7b54\u6848\u52a0\u4e00\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n + y_2 - y_1)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/a/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXS ((int) 1e4)\nusing namespace std;\n\nint n, Y1, Y2, ans;\n\n// vis[y] == true \u8868\u793a\u5e74\u4efd y \u662f\u505c\u529e\u5e74\u4efd\nbool vis[MAXS + 10];\n\nvoid solve() {\n    memset(vis, 0, sizeof(vis));\n    scanf(\"%d%d\", &amp;Y1, &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        vis[x] = true;\n    }\n    scanf(\"%d\", &amp;Y2);\n\n    ans = 0;\n    // \u4ece Y1 \u679a\u4e3e\u5230 Y2\n    for (int i = Y1; i &lt;= Y2; i++) {\n        if (vis[i]) continue;\n        // \u5f53\u524d\u5e74\u4efd\u4e0d\u662f\u505c\u529e\u5e74\u4efd\u5219\u7b54\u6848\u52a0\u4e00\n        ans++;\n    }\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/b/","title":"B - \u57fa\u7ad9\u5efa\u8bbe","text":""},{"location":"2023-provincial-guangdong/b/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738757/295 (19.3%)"},{"location":"2023-provincial-guangdong/b/#_2","title":"\u9898\u89e3","text":"<p>\u7ef4\u62a4 \\(f(i)\\) \u8868\u793a\u53ea\u8003\u8651\u524d \\(i\\) \u4e2a\u4f4d\u7f6e\uff0c\u4e14\u7b2c \\(i\\) \u4e2a\u4f4d\u7f6e\u5fc5\u987b\u5efa\u8bbe\u57fa\u7ad9\u7684\u6700\u5c0f\u603b\u6210\u672c\u3002\u8003\u8651\u4e0a\u4e00\u4e2a\u5efa\u8bbe\u57fa\u7ad9\u7684\u4f4d\u7f6e \\(j\\)\uff0c\u5f97\u5230 dp \u65b9\u7a0b</p> \\[ f(i) = \\min\\limits_{j} f(j) + a_i \\] <p>\u7531\u4e8e\u9898\u76ee\u8981\u6c42\u6bcf\u4e2a\u533a\u95f4\u91cc\u90fd\u81f3\u5c11\u8981\u6709\u4e00\u4e2a\u57fa\u7ad9\uff0c\u56e0\u6b64 \\([j + 1, i - 1]\\) \u4e4b\u95f4\u4e0d\u80fd\u5b58\u5728\u4e00\u4e2a\u5b8c\u6574\u7684\u533a\u95f4\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u4e2a \\(1 \\le i \\le n\\)\uff0c\u6211\u4eec\u8ba1\u7b97 \\(p_i\\) \u6ee1\u8db3 \\([p_i, i]\\) \u4e4b\u95f4\u4e0d\u5b58\u5728\u4e00\u4e2a\u5b8c\u6574\u7684\u533a\u95f4\uff0c\u4e14 \\(p_i\\) \u5c3d\u53ef\u80fd\u5c0f\uff0c\u5219 \\(j \\ge p_{i - 1} - 1\\)\u3002\u6240\u6709 \\(p_i\\) \u7684\u503c\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u6cd5\u6c42\u51fa\uff08\u56e0\u4e3a\u5982\u679c \\([l, r]\\) \u91cc\u5b58\u5728\u4e00\u4e2a\u5b8c\u6574\u7684\u533a\u95f4\uff0c\u90a3\u4e48 \\([l' \\le l, r' \\ge r]\\) \u91cc\u80af\u5b9a\u4e5f\u5b58\u5728\u4e00\u4e2a\u5b8c\u6574\u7684\u533a\u95f4\uff0c\u6ee1\u8db3\u53cc\u6307\u9488\u6cd5\u7684\u7279\u6027\uff09\u3002</p> <p>\u4e0a\u8ff0 dp \u53ef\u4ee5\u7528 \u5355\u8c03\u961f\u5217 \u4f18\u5316\u5230 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/b/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 5e5)\nusing namespace std;\n\nint n, A[MAXN + 10];\n\nvector&lt;int&gt; B[MAXN + 10];\nint LIM[MAXN + 10];\nlong long f[MAXN + 10];\n\nint head, tail, q[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n    // \u4e3a\u4e86\u65b9\u4fbf\u5f97\u5230\u6700\u7ec8\u7b54\u6848\uff0c\u53ef\u4ee5\u4ee4 A[n + 1] = 0\uff0c\u7136\u540e\u8981\u6c42 [n + 1, n + 1] \u91cc\u5efa\u8bbe\u4e00\u5ea7\u57fa\u7ad9\uff0c\n    // \u8fd9\u6837\u7b54\u6848\u5c31\u662f f[n + 1] \u4e86\n    A[++n] = 0;\n\n    int m; scanf(\"%d\", &amp;m);\n    // B[i] \u662f\u4e00\u4e2a vector\uff0c\n    // \u91cc\u9762\u7684\u8d1f\u6570 -j \u8868\u793a\u6709\u4e00\u4e2a\u9700\u6c42\u533a\u95f4\u662f [i, j]\uff0c\n    // \u91cc\u9762\u662f\u6b63\u6570 j \u8868\u793a\u6709\u4e00\u4e2a\u9700\u6c42\u533a\u95f4\u662f [j, i]\uff0c\n    // \u65b9\u4fbf\u6211\u4eec\u7b49\u4e0b\u7528\u53cc\u6307\u9488\u7b97 p_i\n    for (int i = 1; i &lt;= n; i++) B[i].clear();\n    for (int i = 1; i &lt;= m; i++) {\n        int l, r; scanf(\"%d%d\", &amp;l, &amp;r);\n        B[l].push_back(-r);\n        B[r].push_back(l);\n    }\n    B[n].push_back(-n);\n    B[n].push_back(n);\n\n    // now \u8bb0\u5f55\u4e86\u53cc\u6307\u9488\u533a\u95f4 [j, i] \u4e2d\u6709\u51e0\u4e2a\u5b8c\u6574\u7684\u9700\u6c42\u533a\u95f4\n    int now = 0;\n    for (int i = 1, j = 1; i &lt;= n; i++) {\n        // \u53cc\u6307\u9488\u53f3\u7aef\u70b9\u79fb\u52a8\u4e00\u6b65\uff0c\u589e\u52a0\u53f3\u7aef\u70b9\u4e3a i \u4e14\u4f4d\u4e8e [j, i] \u91cc\u7684\u9700\u6c42\u533a\u95f4\n        for (int x : B[i]) if (x &gt; 0 &amp;&amp; x &gt;= j) now++;\n        // \u6c42\u51fa j = p_i + 1\n        while (now &gt; 0 &amp;&amp; j &lt;= i) {\n            // \u53cc\u6307\u9488\u5de6\u7aef\u70b9\u79fb\u52a8\u4e00\u6b65\uff0c\u51cf\u5c11\u5de6\u7aef\u70b9\u4e3a j \u4e14\u4f4d\u4e8e [j, i] \u91cc\u7684\u9700\u6c42\u533a\u95f4\n            for (int x : B[j]) if (x &lt; 0 &amp;&amp; -x &lt;= i) now--;\n            j++;\n        }\n        assert(now == 0);\n        // LIM[i] = p_i\n        LIM[i] = j;\n    }\n\n    // dp \u521d\u503c\n    f[0] = 0;\n    f[1] = A[1];\n    // \u7528 dp \u521d\u503c\u521d\u59cb\u5316\u5355\u8c03\u961f\u5217\n    head = tail = 1;\n    q[tail++] = 0;\n    q[tail++] = 1;\n\n    for (int i = 2; i &lt;= n; i++) {\n        // \u8981\u6c42\u4e0a\u4e00\u4e2a\u57fa\u7ad9\u7684\u4f4d\u7f6e &gt;= p_{i - 1} - 1\n        int lim = LIM[i - 1] - 1;\n        while (q[head] &lt; lim) head++;\n        f[i] = f[q[head]] + A[i];\n        while (head &lt; tail &amp;&amp; f[q[tail - 1]] &gt;= f[i]) tail--;\n        q[tail++] = i;\n    }\n    printf(\"%lld\\n\", f[n]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/c/","title":"C - \u5e02\u573a\u4ea4\u6613","text":""},{"location":"2023-provincial-guangdong/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387254/295 (86.1%)"},{"location":"2023-provincial-guangdong/c/#_2","title":"\u9898\u89e3","text":"<p>\u6bcf\u6b21\u5e94\u8be5\u4ece\u4ef7\u683c\u6700\u4fbf\u5b9c\u7684\u5546\u5e97\u8d2d\u4e70\u8d27\u7269\uff0c\u5e76\u5356\u7ed9\u4ef7\u683c\u6700\u8d35\u7684\u5546\u5e97\u3002\u7528\u53cc\u6307\u9488\u6a21\u62df\u8fd9\u4e00\u8d2a\u5fc3\u7b56\u7565\u5373\u53ef\uff0c\u5177\u4f53\u5b9e\u73b0\u8be6\u89c1\u53c2\u8003\u4ee3\u7801\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\)\uff0c\u4e3b\u8981\u662f\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2023-provincial-guangdong/c/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\npii A[MAXN + 10];\nlong long ans;\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d%d\", &amp;A[i].first, &amp;A[i].second);\n    // \u5c06\u5546\u5e97\u6309\u4ef7\u683c\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\n    sort(A + 1, A + n + 1);\n\n    ans = 0;\n    // \u7ef4\u62a4\u4e24\u4e2a\u6307\u9488\uff0ci \u6307\u5411\u6700\u4fbf\u5b9c\u7684\u5546\u5e97\uff0cj \u6307\u5411\u6700\u8d35\u7684\u5546\u5e97\n    for (int i = 1, j = n; i &lt; j; ) {\n        // \u4ea4\u6613\u7684\u6b21\u6570\u4e3a\u4e24\u4e2a\u5546\u5e97\u4ea4\u6613\u6b21\u6570\u7684\u6700\u5c0f\u503c\n        int mn = min(A[i].second, A[j].second);\n        // \u8ba1\u7b97\u5229\u6da6\n        ans += 1LL * (A[j].first - A[i].first) * mn;\n        // \u51cf\u5c11\u4e24\u4e2a\u5546\u5e97\u7684\u4ea4\u6613\u6b21\u6570\n        A[i].second -= mn;\n        A[j].second -= mn;\n        // \u5982\u679c\u5546\u5e97\u7684\u4ea4\u6613\u6b21\u6570\u7528\u5b8c\u4e86\uff0c\u5219\u6307\u9488\u6307\u5411\u4e0b\u4e00\u4e2a\u5546\u5e97\n        if (A[i].second == 0) i++;\n        if (A[j].second == 0) j--;\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/d/","title":"D - \u65b0\u5c45\u89c4\u5212","text":""},{"location":"2023-provincial-guangdong/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387189/295 (64.1%)"},{"location":"2023-provincial-guangdong/d/#_2","title":"\u9898\u89e3","text":"<p>\u5982\u679c\u5df2\u77e5 \\(k\\)\uff08\\(2 \\le k \\le n\\)\uff09\u4e2a\u4eba\u6709\u90bb\u5c45\uff0c\u5269\u4e0b\u7684\u4eba\u6ca1\u6709\u90bb\u5c45\uff0c\u600e\u6837\u9009\u62e9\u6709\u90bb\u5c45\u7684\u4eba\u624d\u80fd\u4f7f\u603b\u6ee1\u610f\u5ea6\u6700\u5927\u5316\uff1f</p> <p>\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u3002\u5148\u5047\u8bbe\u6240\u6709\u4eba\u90fd\u662f\u6ca1\u90bb\u5c45\u7684\uff0c\u5f97\u5230\u603b\u6ee1\u610f\u5ea6 \\(\\sum\\limits_{i = 1}^n b_i\\)\u3002\u5f53\u7b2c \\(i\\) \u4e2a\u4eba\u4ece\u6ca1\u90bb\u5c45\u53d8\u6210\u6709\u90bb\u5c45\u65f6\uff0c\u603b\u6ee1\u610f\u5ea6\u5c06\u589e\u52a0 \\((a_i - b_i)\\)\u3002\u56e0\u6b64\u9009\u62e9 \\((a_i - b_i)\\) \u6700\u5927\u7684 \\(k\\) \u4e2a\u4eba\u53d8\u6210\u6709\u90bb\u5c45\u7684\u5373\u53ef\u3002\u6392\u5e8f\u540e\u53ef\u4ee5\u5728 \\(\\mathcal{O}(n)\\) \u7684\u590d\u6742\u5ea6\u5185\u4e00\u6b21\u6027\u7b97\u51fa \\(k = 2, \\cdots, n\\) \u7684\u6700\u5927\u603b\u6ee1\u610f\u5ea6\u3002</p> <p>\u5982\u679c \\(k\\) \u4e2a\u4eba\u6709\u90bb\u5c45\uff0c\u5269\u4e0b\u7684\u4eba\u6ca1\u6709\u90bb\u5c45\uff0c\u8fd9\u6837\u7684\u5e03\u5c40\u81f3\u5c11\u9700\u8981 \\(k + 2(n - k) = 2n - k\\) \u680b\u623f\u5b50\uff08\u5373\u6709\u90bb\u5c45\u7684\u4eba\u90fd\u4f4f\u5728\u6700\u5de6\u8fb9\uff0c\u7136\u540e\u6bcf\u9694\u4e00\u680b\u623f\u5b50\u4f4f\u4e00\u4e2a\u6ca1\u90bb\u5c45\u7684\u4eba\uff09\u3002\u56e0\u6b64\u53ea\u6709\u6ee1\u8db3 \\(2n - k \\le m\\) \u624d\u80fd\u8003\u8651\u3002</p> <p>\u6700\u540e\uff0c\u522b\u5fd8\u4e86\u8003\u8651\u6240\u6709\u4eba\u90fd\u6ca1\u6709\u90bb\u5c45\u7684\u60c5\u51b5\u3002\u8fd9\u8981\u6c42 \\(m \\ge 2n - 1\\)\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002\u4e3b\u8981\u662f\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2023-provincial-guangdong/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 5e5)\nusing namespace std;\n\nint n, m, A[MAXN + 10], B[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d%d\", &amp;A[i], &amp;B[i]);\n\n    // \u5c06 (A[i] - B[i]) \u6392\u5e8f\uff0cvector \u91cc\u5b58\u7684\u662f\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\n    vector&lt;int&gt; vec;\n    for (int i = 1; i &lt;= n; i++) vec.push_back(A[i] - B[i]);\n    sort(vec.begin(), vec.end());\n\n    long long ans = 0, now = 0;\n    for (int i = 1; i &lt;= n; i++) now += B[i];\n    // \u7279\u6b8a\u60c5\u51b5\uff1a\u6240\u6709\u4eba\u90fd\u6ca1\u6709\u90bb\u5c45\n    if (m &gt;= 2 * n - 1) ans = now;\n\n    now += vec[n - 1];\n    for (int i = 2; i &lt;= n; i++) {\n        // \u8ba1\u7b97\u6709 i \u4e2a\u4eba\u6709\u90bb\u5c45\u65f6\u7684\u6700\u5927\u603b\u6ee1\u610f\u5ea6\n        now += vec[n - i];\n        if (2 * n - i &lt;= m) ans = max(ans, now);\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/e/","title":"E - \u65b0\u6000\u8d28\u95ee","text":""},{"location":"2023-provincial-guangdong/e/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738751/295 (17.3%)"},{"location":"2023-provincial-guangdong/e/#_2","title":"\u9898\u89e3","text":"<p>\u672c\u9898\u540d\u79f0\u6765\u81ea\u65e5\u6587\u201c\u65b0\u3057\u3044\u3001\u3067\u3082\u61d0\u304b\u3057\u3044\u8cea\u554f\u201d\uff08\u610f\u4e3a\u65b0\u7684\uff0c\u4f46\u662f\u4ee4\u4eba\u6000\u5ff5\u7684\u95ee\u9898\uff09\uff0c\u56e0\u4e3a\u6709\u4eba\u8bf4\u547d\u9898\u4eba\u7684\u9898\u76ee\u90fd\u5f88\u6709\u5e74\u4ee3\u611f...</p> <p>\u8003\u8651\u4ece\u5de6\u5230\u53f3\u786e\u5b9a\u7b54\u6848\u7684\u6bcf\u4e00\u4f4d\u3002\u6211\u4eec\u4e3e\u4e2a\u4f8b\u5b50\u6765\u4ecb\u7ecd\u8fd9\u4e00\u8fc7\u7a0b\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u7b54\u6848\u7684\u524d\u4e09\u4f4d\u662f <code>abc</code>\uff0c\u63a5\u4e0b\u6765\u8981\u786e\u5b9a\u7b2c\u56db\u4f4d\u3002\u4e3a\u4e86\u8ba9\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\uff0c\u6211\u4eec\u9700\u8981\u4ece <code>a</code> \u5230 <code>z</code> \u679a\u4e3e\u7b2c\u56db\u4f4d\u3002</p> <p>\u5047\u8bbe\u6211\u4eec\u679a\u4e3e\u5230\u4e86 <code>d</code>\uff0c\u6211\u4eec\u8003\u8651\u5df2\u77e5\u7b54\u6848\u4e3a <code>abcd*</code> \u65f6\uff0c\u4e0e\u5df2\u77e5\u7b54\u6848\u4e3a <code>abc*</code> \u65f6\u76f8\u6bd4\uff0c\u80fd\u9009\u62e9\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u5982\u4f55\u53d8\u5316\u3002</p> <ul> <li>\u6240\u6709 <code>abc[a-d]*</code> \u90fd\u80fd\u9009\u62e9\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u80af\u5b9a\u5c0f\u4e8e\u7b49\u4e8e <code>abcd*</code>\u3002</li> <li>\u6240\u6709 <code>abc[e-z]*</code> \u7684\u5b57\u7b26\u4e32\uff0c\u539f\u6765\u7b54\u6848\u662f <code>abc*</code> \u7684\u65f6\u5019\u90fd\u80fd\u9009\u62e9\uff0c\u73b0\u5728\u6bcf\u79cd\u5b57\u6bcd\u53ea\u80fd\u9009\u4e00\u4e2a\uff0c\u5426\u5219\u6bd4\u5982 <code>abce*</code> \u9009\u4e86\u4e24\u4e2a\uff0c\u90a3\u7b54\u6848\u5c31\u81f3\u5c11\u662f <code>abce</code> &gt; <code>abcd*</code> \u4e86\u3002</li> <li>\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u53ef\u9009\u60c5\u51b5\u7ef4\u6301\u4e0d\u53d8\u3002</li> </ul> <p>\u5982\u679c\u6211\u4eec\u80fd\u9009\u81f3\u5c11 \\(k\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u7b54\u6848\u7684\u7b2c\u56db\u4f4d\u5c31\u662f <code>d</code>\uff0c\u5426\u5219\u6211\u4eec\u8981\u7ee7\u7eed\u679a\u4e3e <code>e</code>\u3001<code>f</code>\u3001...</p> <p>\u786e\u5b9a\u4e86\u7b54\u6848\u7684\u7b2c\u56db\u4f4d\u4ee5\u540e\uff0c\u6211\u4eec\u8fd8\u8981\u786e\u5b9a\u7b54\u6848\u662f\u4e0d\u662f\u53ea\u6709\u56db\u4f4d\u3002\u8003\u8651\u5df2\u77e5\u7b54\u6848\u4e3a <code>abcd</code> \u65f6\uff0c\u4e0e\u5df2\u77e5\u7b54\u6848\u4e3a <code>abcd*</code> \u65f6\u76f8\u6bd4\uff0c\u80fd\u9009\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u5982\u4f55\u53d8\u5316\u3002</p> <ul> <li>\u6240\u6709 <code>abcd[a-z]*</code> \u7684\u5b57\u7b26\u4e32\uff0c\u539f\u6765\u7b54\u6848\u662f <code>abcd*</code> \u65f6\u90fd\u80fd\u9009\u62e9\uff0c\u73b0\u5728\u6bcf\u79cd\u5b57\u6bcd\u53ea\u80fd\u9009\u4e00\u4e2a\uff0c\u5426\u5219\u7b54\u6848\u5927\u4e8e <code>abcd</code>\u3002</li> <li>\u5269\u4e0b\u7684\u5b57\u7b26\u4e32\u53ef\u9009\u60c5\u51b5\u7ef4\u6301\u4e0d\u53d8\u3002</li> </ul> <p>\u5982\u679c\u6211\u4eec\u80fd\u9009\u81f3\u5c11 \\(k\\) \u4e2a\u5b57\u7b26\u4e32\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u53ea\u6709\u56db\u4f4d\uff0c\u5426\u5219\u7ee7\u7eed\u679a\u4e3e\u7b2c\u4e94\u4f4d\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\sum |s|)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/e/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXLEN ((int) 1e6)\nusing namespace std;\n\nint n, K;\nchar s[MAXLEN + 10];\n\n// sz[i]\uff1a\u6709\u51e0\u4e2a\u5b57\u7b26\u4e32\u6070\u597d\u88ab\u8282\u70b9 i \u4ee3\u8868\n// tot[i]\uff1a\u4ee5\u8282\u70b9 i \u4e3a\u6839\u7684\u5b50\u6811\u91cc\u4e00\u5171\u6709\u51e0\u4e2a\u5b57\u7b26\u4e32\nint nCnt, sz[MAXLEN + 10], tot[MAXLEN + 10], ch[MAXLEN + 10][26];\n\n// \u65b0\u5efa\u4e00\u4e2a trie \u8282\u70b9\uff0c\u8fd4\u56de\u8282\u70b9\u7f16\u53f7\nint newNode() {\n    nCnt++;\n    sz[nCnt] = tot[nCnt] = 0;\n    memset(ch[nCnt], 0, sizeof(ch[nCnt]));\n    return nCnt;\n}\n\n// \u5c06 s \u91cc\u4fdd\u5b58\u7684\u5b57\u7b26\u4e32\u52a0\u5165 trie\nvoid add() {\n    int now = 1;\n    tot[now]++;\n    for (int i = 1; s[i]; i++) {\n        int &amp;c = ch[now][s[i] - 'a'];\n        if (!c) c = newNode();\n        tot[now = c]++;\n    }\n    sz[now]++;\n}\n\nvoid solve() {\n    // \u65b0\u5efa trie \u6839\u8282\u70b9\uff0c\u7f16\u53f7\u4e3a 1\n    nCnt = 0; newNode();\n\n    scanf(\"%d%d\", &amp;n, &amp;K);\n    // \u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u52a0\u5165 trie\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%s\", s + 1);\n        add();\n    }\n\n    // \u9010\u4f4d\u786e\u5b9a\u7b54\u6848\uff0cnow \u8868\u793a\u76ee\u524d\u5df2\u786e\u5b9a\u7684\u7b54\u6848\u524d\u7f00\u5728 trie \u4e0a\u662f\u54ea\u4e2a\u8282\u70b9\n    int now = 1;\n    while (true) {\n        // \u5224\u65ad\u7b54\u6848\u662f\u5426\u5c31\u662f now \u6240\u5728\u7684\u8282\u70b9\n        // \u9996\u5148\uff0cnow \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u90fd\u53ef\u4ee5\u9009\n        int t = sz[now];\n        // \u4ee5 now \u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u91cc\uff0c\u6bcf\u68f5\u5b50\u6811\u6700\u591a\u9009\u4e00\u4e2a\u5b57\u7b26\u4e32\n        for (int i = 0; i &lt; 26; i++) if (tot[ch[now][i]]) t++;\n        if (t &gt;= K) {\n            // \u7b54\u6848\u5c31\u662f now \u6240\u5728\u7684\u8282\u70b9\n            if (now == 1) printf(\"EMPTY\");\n            printf(\"\\n\");\n            return;\n        }\n\n        // \u679a\u4e3e\u7b54\u6848\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\n        for (int i = 0; i &lt; 26; i++) if (tot[ch[now][i]]) {\n            // \u73b0\u5728\u4ee5 now \u5b50\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u91cc\uff0c\u6bcf\u68f5\u5b50\u6811\u53ef\u4ee5\u9009\u4efb\u610f\u4e2a\u5b57\u7b26\u4e32\n            t = t - 1 + tot[ch[now][i]];\n            if (t &gt;= K) {\n                // \u786e\u5b9a\u4e86\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u4e3a i\n                K -= t - tot[ch[now][i]];\n                now = ch[now][i];\n                printf(\"%c\", i + 'a');\n                break;\n            }\n        }\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/f/","title":"F - \u683c\u5b50\u65c5\u884c","text":""},{"location":"2023-provincial-guangdong/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738731/295 (10.5%)"},{"location":"2023-provincial-guangdong/f/#_2","title":"\u9898\u89e3","text":"<p>\u663e\u7136\u65c5\u884c\u7684\u8303\u56f4\u662f\u5305\u542b\u8d77\u70b9\u7684\u8fde\u7eed\u533a\u95f4\u3002\u6bcf\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u901a\u8fc7\u4e8c\u5206\u627e\u51fa\u65c5\u884c\u7684\u5de6\u53f3\u7aef\u70b9\uff0c\u7136\u540e\u8be2\u95ee\u8be5\u533a\u95f4\u7684\u6743\u503c\u4e4b\u548c\u5373\u53ef\u3002</p> <p>\u4e3a\u4e86\u901a\u8fc7\u4e8c\u5206\u627e\u51fa\u65c5\u884c\u7684\u7aef\u70b9\uff0c\u6211\u4eec\u9700\u8981\u5feb\u901f\u6c42\u51fa\u4e00\u4e2a\u533a\u95f4\u91cc\u6240\u6709\u7684\u989c\u8272\u662f\u5426\u90fd\u5728 \\(\\mathbb{A}\\) \u91cc\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6c42 \\(\\mathbb{A}\\) \u4e2d\u6240\u6709\u989c\u8272\u5728\u533a\u95f4\u4e2d\u51fa\u73b0\u6b21\u6570\u4e4b\u548c\uff0c\u662f\u5426\u7b49\u4e8e\u533a\u95f4\u957f\u5ea6\u3002\u6211\u4eec\u7ef4\u62a4\u4e00\u4e2a\u7ebf\u6bb5\u6811 / \u6811\u72b6\u6570\u7ec4\uff0c\u6bcf\u4e2a\u8282\u70b9\u4fdd\u5b58\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u8868\u793a\u8be5\u533a\u95f4\u4e2d\u51fa\u73b0\u4e86\u54ea\u4e9b\u989c\u8272\uff0c\u4ee5\u53ca\u6bcf\u79cd\u989c\u8272\u51fa\u73b0\u4e86\u51e0\u6b21\u5373\u53ef\u3002</p> <p>\u5982\u679c\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e\u518d\u7b97\u989c\u8272\u51fa\u73b0\u6b21\u6570\u4e4b\u548c\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(\\sum k \\log^2 n)\\) \u7684\uff0c\u9700\u8981\u8f83\u5c0f\u7684\u5e38\u6570\u624d\u80fd\u901a\u8fc7\u672c\u9898\u3002\u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u662f \u76f4\u63a5\u5728\u7ebf\u6bb5\u6811 / \u6811\u72b6\u6570\u7ec4\u4e0a\u8fdb\u884c\u4e8c\u5206 / \u500d\u589e\uff0c\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\sum k \\log n)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/f/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 3e5)\nusing namespace std;\n\n// \u6bd4 unordered_map \u66f4\u5feb\u7684\u54c8\u5e0c\u8868\n#include &lt;ext/pb_ds/assoc_container.hpp&gt;\nusing namespace __gnu_pbds;\nconst int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();\nstruct chash {\n    int operator()(int x) const { return x ^ RANDOM; }\n};\ntypedef gp_hash_table&lt;int, int, chash&gt; hash_t;\n\nint n, q, C[MAXN + 10], V[MAXN + 10];\n\nhash_t colTree[MAXN + 10];\nlong long smTree[MAXN + 10];\n\nint lb(int x) { return x &amp; (-x); }\n\n// val == -1\uff1a\u628a\u4f4d\u7f6e pos \u7684\u989c\u8272 c \u5220\u6389\n// val == 1\uff1a\u628a\u4f4d\u7f6e pos \u7684\u989c\u8272\u8bbe\u4e3a c\nvoid addCol(int pos, int c, int val) {\n    for (; pos &lt;= n; pos += lb(pos)) colTree[pos][c] += val;\n}\n\n// \u67e5\u8be2 vec \u91cc\u7684\u6240\u6709\u989c\u8272\u5728\u524d pos \u4e2a\u4f4d\u7f6e\u4e2d\u4e00\u5171\u51fa\u73b0\u4e86\u51e0\u6b21\nint queryCol(int pos, vector&lt;int&gt; &amp;vec) {\n    int ret = 0;\n    for (; pos; pos -= lb(pos)) for (int c : vec) {\n        auto it = colTree[pos].find(c);\n        if (it != colTree[pos].end()) ret += it-&gt;second;\n    }\n    return ret;\n}\n\n// \u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\uff0c\n// \u8fd4\u56de\u503c l \u6ee1\u8db3 vec \u91cc\u6240\u6709\u989c\u8272\u5728\u533a\u95f4 [l, lim] \u4e2d\u51fa\u73b0\u7684\u603b\u6b21\u6570\u7b49\u4e8e\u533a\u95f4\u957f\u5ea6\uff0c\u4e14 l \u6700\u5c0f\nint gao1(int lim, vector&lt;int&gt; &amp;vec) {\n    int base = queryCol(lim, vec);\n    if (base == lim) return 1;\n\n    int b;\n    for (b = 1; b &lt;= n; b &lt;&lt;= 1);\n\n    int now = 0, cnt = 0;\n    for (b &gt;&gt;= 1; b; b &gt;&gt;= 1) {\n        int nxt = now | b, tmp = 0;\n        for (int c : vec) {\n            auto it = colTree[nxt].find(c);\n            if (it != colTree[nxt].end()) tmp += it-&gt;second;\n        }\n        if (nxt &gt; lim || base - (cnt + tmp) == lim - nxt) {\n            // do nothing\n        } else {\n            now = nxt; cnt += tmp;\n        }\n    }\n    return now + 2;\n}\n\n// \u6811\u72b6\u6570\u7ec4\u4e0a\u500d\u589e\uff0c\n// \u8fd4\u56de\u503c r \u6ee1\u8db3 vec \u91cc\u6240\u6709\u989c\u8272\u5728\u533a\u95f4 [lim, r] \u4e2d\u51fa\u73b0\u7684\u603b\u6b21\u6570\u7b49\u4e8e\u533a\u95f4\u957f\u5ea6\uff0c\u4e14 r \u6700\u5927\nint gao2(int lim, vector&lt;int&gt; &amp;vec) {\n    int base = queryCol(lim, vec);\n\n    int b;\n    for (b = 1; b &lt;= n; b &lt;&lt;= 1);\n\n    int now = 0, cnt = 0;\n    for (b &gt;&gt;= 1; b; b &gt;&gt;= 1) {\n        int nxt = now | b, tmp = 0;\n        for (int c : vec) {\n            auto it = colTree[nxt].find(c);\n            if (it != colTree[nxt].end()) tmp += it-&gt;second;\n        }\n        if (nxt &lt; lim || (cnt + tmp) - base == nxt - lim) {\n            now = nxt; cnt += tmp;\n        } else {\n            // do nothing\n        }\n    }\n    return now;\n}\n\n// \u4f4d\u7f6e pos \u7684\u6743\u503c\u589e\u52a0 val\nvoid addSm(int pos, long long val) {\n    for (; pos &lt;= n; pos += lb(pos)) smTree[pos] += val;\n}\n\n// \u6c42\u524d pos \u4e2a\u4f4d\u7f6e\u7684\u6743\u503c\u4e4b\u548c\nlong long querySm(int pos) {\n    long long ret = 0;\n    for (; pos; pos -= lb(pos)) ret += smTree[pos];\n    return ret;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;q);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;C[i]);\n        addCol(i, C[i], 1);\n    }\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;V[i]);\n        addSm(i, V[i]);\n    }\n\n    while (q--) {\n        int op, x, y; scanf(\"%d%d%d\", &amp;op, &amp;x, &amp;y);\n        if (op == 1) {\n            addCol(x, C[x], -1);\n            addCol(x, y, 1);\n            C[x] = y;\n        } else if (op == 2) {\n            addSm(x, y - V[x]);\n            V[x] = y;\n        } else {\n            bool ok = false;\n            vector&lt;int&gt; vec;\n            for (int i = 1; i &lt;= y; i++) {\n                int z; scanf(\"%d\", &amp;z);\n                if (C[x] == z) ok = true;\n                vec.push_back(z);\n            }\n            if (!ok) { printf(\"0\\n\"); continue; }\n\n            int L = gao1(x, vec), R = gao2(x, vec);\n            printf(\"%lld\\n\", querySm(R) - querySm(L - 1));\n        }\n    }\n\n    for (int i = 1; i &lt;= n; i++) colTree[i].clear();\n    for (int i = 1; i &lt;= n; i++) smTree[i] = 0;\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/g/","title":"G - \u4ea4\u6362\u64cd\u4f5c","text":""},{"location":"2023-provincial-guangdong/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73872/295 (0.7%)"},{"location":"2023-provincial-guangdong/g/#_2","title":"\u9898\u89e3","text":"<p>\u5047\u8bbe\u5df2\u7ecf\u786e\u5b9a\u4e86\u5206\u754c\u70b9 \\(k\\)\uff0c\u8003\u8651\u4ea4\u6362\u54ea\u4e24\u4e2a\u6570\u624d\u6709\u610f\u4e49\u3002</p> <p>\u4ee4 \\(f(i, j) = a_i \\,\\&amp;\\, a_{i + 1} \\,\\&amp;\\, \\cdots \\,\\&amp;\\, a_j\\)\uff0c\u79f0\u6ee1\u8db3 \\(f(1, i) \\ne f(1, i - 1)\\) \u7684\u4e0b\u6807 \\(i\\) \u4e3a\u201c\u524d\u7f00\u5173\u952e\u70b9\u201d\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5173\u952e\u70b9\u53ea\u6709 \\(\\log a_i\\) \u4e2a\u3002\u540c\u7406\uff0c\u79f0\u6ee1\u8db3 \\(f(i, n) \\ne f(i + 1, n)\\) \u7684\u4e0b\u6807 \\(i\\) \u4e3a\u201c\u540e\u7f00\u5173\u952e\u70b9\u201d\uff0c\u5173\u952e\u70b9\u4e5f\u53ea\u6709 \\(\\log a_i\\) \u4e2a\u3002</p> <p>\u56e0\u6b64\uff0c\u4ea4\u6362\u53ef\u4ee5\u88ab\u5206\u4e3a\u4e09\u7c7b\u60c5\u51b5\u3002</p> <ul> <li> <p>\u4ea4\u6362\u4e24\u4e2a\u975e\u5173\u952e\u70b9\uff1a\u5982\u679c\u4ece\u4e00\u4e2a\u524d\u7f00\u91cc\u62ff\u8d70\u4e00\u4e2a\u975e\u5173\u952e\u70b9\uff0c\u8fd9\u4e2a\u524d\u7f00\u7684 \\(\\,\\&amp;\\,\\) \u503c\u4e0d\u4f1a\u6539\u53d8\uff1b\u540c\u7406\uff0c\u5982\u679c\u4ece\u4e00\u4e2a\u540e\u7f00\u91cc\u62ff\u8d70\u4e00\u4e2a\u975e\u5173\u952e\u70b9\uff0c\u8fd9\u4e2a\u540e\u7f00\u7684 \\(\\,\\&amp;\\,\\) \u503c\u4e5f\u4e0d\u4f1a\u6539\u53d8\u3002\u4ea4\u6362\u540e\uff0c\u76f8\u5f53\u4e8e\u539f\u6765\u524d\uff08\u540e\uff09\u7f00\u7684 \\(\\,\\&amp;\\,\\) \u503c\u53c8\u591a \\(\\,\\&amp;\\,\\) \u4e86\u4e00\u4e2a\u6570\u3002\u7531\u4e8e\u591a \\(\\,\\&amp;\\,\\) \u4e00\u4e2a\u6570\u4e0d\u4f1a\u8ba9\u503c\u53d8\u5927\uff0c\u56e0\u6b64\u8fd9\u6837\u7684\u4ea4\u6362\u6ca1\u6709\u610f\u4e49\u3002</p> </li> <li> <p>\u4ea4\u6362\u4e24\u4e2a\u5173\u952e\u70b9\uff1a\u524d\u540e\u7f00\u5173\u952e\u70b9\u5206\u522b\u53ea\u6709 \\(\\log a_i\\) \u79cd\uff0c\u76f4\u63a5\u679a\u4e3e\u5373\u53ef\u3002\u8fd9\u4e00\u7c7b\u7684\u603b\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n\\log^2 a_i)\\)\u3002</p> </li> <li> <p>\u4ea4\u6362\u4e00\u4e2a\u5173\u952e\u70b9\u548c\u4e00\u4e2a\u975e\u5173\u952e\u70b9\uff1a\u4e0d\u59a8\u5047\u8bbe\u4ea4\u6362\u7684\u662f\u524d\u7f00\u5173\u952e\u70b9 \\(i\\) \u548c\u540e\u7f00\u975e\u5173\u952e\u70b9 \\(j\\)\u3002\u4e0e\u7b2c\u4e00\u7c7b\u60c5\u51b5\u7684\u5206\u6790\u7c7b\u4f3c\uff0c\u56e0\u4e3a\u4ece\u540e\u7f00\u62ff\u8d70\u7684\u662f\u975e\u5173\u952e\u70b9\uff0c\u6240\u4ee5\u4ea4\u6362\u4e4b\u540e\uff0c\u540e\u7f00\u7684 \\(\\,\\&amp;\\,\\) \u503c\u4e3a \\(f(k + 1, n) \\,\\&amp;\\, a_i\\)\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u9009\u5b9a\u4e86 \\(i\\)\uff0c\u65e0\u8bba\u9009\u54ea\u4e2a \\(j\\) \u90fd\u4e0d\u5f71\u54cd\u540e\u7f00\u7684 \\(\\,\\&amp;\\,\\) \u503c\uff0c\u90a3\u4e48\u6211\u4eec\u9009\u62e9\u8ba9\u4ea4\u6362\u4e4b\u540e\uff0c\u524d\u7f00\u7684 \\(\\,\\&amp;\\,\\) \u503c\u6700\u5927\u7684 \\(j\\) \u5373\u53ef\u3002\u5373\u6700\u5927\u5316 \\(f(1, i - 1) \\,\\&amp;\\, f(i + 1, k) \\,\\&amp;\\, a_j\\)\u3002</p> <p>\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u56fa\u5b9a\u7684\u5173\u952e\u70b9 \\(i\\)\uff0c\\(f(i + 1, k)\\) \u7684\u503c\u53ea\u6709 \\(\\log a_i\\) \u79cd\uff0c\u800c\u5173\u952e\u70b9 \\(i\\) \u4e5f\u53ea\u6709 \\(\\log a_i\\) \u79cd\uff0c\u90a3\u4e48 \\(v = f(1, i - 1) \\,\\&amp;\\, f(i + 1, k)\\) \u7684\u503c\u53ea\u6709 \\(\\log^2 a_i\\) \u79cd\u3002\u56e0\u6b64\u5bf9\u4e8e\u6bcf\u79cd \\(v\\)\uff0c\\(\\mathcal{O}(n)\\) \u8ba1\u7b97 \\(g(v, k)\\) \u8868\u793a \\(k + 1 \\le j \\le n\\) \u91cc\uff0c\\(v \\,\\&amp;\\, a_j\\) \u7684\u6700\u5927\u503c\u5373\u53ef\u3002\u8fd9\u4e00\u7c7b\u7684\u603b\u590d\u6742\u5ea6\u4e5f\u4e3a \\(\\mathcal{O}(n\\log^2 a_i)\\)\u3002</p> </li> </ul> <p>\u56e0\u6b64\u672c\u9898\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log^2 a_i)\\)\uff0c\u6d89\u53ca\u5230\u5bf9 \\(f\\) \u503c\u7684\u8ba1\u7b97\u53ef\u4ee5\u901a\u8fc7 RMQ \u5728 \\(\\mathcal{O}(n \\log n)\\) \u7684\u590d\u6742\u5ea6\u5185\u9884\u5904\u7406\uff0c\u540e\u7eed\u6bcf\u6b21\u67e5\u8be2\u53ea\u8981 \\(\\mathcal{O}(1)\\) \u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2023-provincial-guangdong/g/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXP 18\nusing namespace std;\n\nint n, ans, A[MAXN + 10];\n\nint rmq[MAXP][MAXN + 10], lg[MAXN + 10];\nunordered_map&lt;int, vector&lt;int&gt;&gt; f, g;\n\n// \u8be2\u95ee A[l] &amp; A[l + 1] &amp; ... &amp; A[r]\nint query(int l, int r) {\n    if (l &gt; r) return (1 &lt;&lt; 30) - 1;\n    int p = lg[r - l + 1];\n    return rmq[p][l] &amp; rmq[p][r - (1 &lt;&lt; p) + 1];\n}\n\n// \u5bf9\u4e8e\u7279\u5b9a\u7684 val\uff0c\u6c42\u6ee1\u8db3 j &lt;= lim \u7684 A[j] \u4e2d\uff0cval &amp; A[j] \u7684\u6700\u5927\u503c\nint gaoPre(int val, int lim) {\n    if (f.count(val) == 0) {\n        // \u6839\u636e\u9898\u89e3\u5206\u6790\uff0cval \u53ea\u6709 log^2 \u79cd\uff0c\u6240\u4ee5\u4e0b\u9762\u7684 for \u679a\u4e3e\u53ea\u4f1a\u8fdb\u884c log^2 \u6b21\n        vector&lt;int&gt; &amp;vec = f[val];\n        vec.resize(n + 2);\n        for (int i = 1; i &lt;= n; i++) vec[i] = max(vec[i - 1], val &amp; A[i]);\n    }\n    return f[val][lim];\n}\n\n// \u5bf9\u4e8e\u7279\u5b9a\u7684 val\uff0c\u6c42\u6ee1\u8db3 j &gt;= lim \u7684 A[j] \u4e2d\uff0cval &amp; A[j] \u7684\u6700\u5927\u503c\nint gaoSuf(int val, int lim) {\n    if (g.count(val) == 0) {\n        // \u6839\u636e\u9898\u89e3\u5206\u6790\uff0cval \u53ea\u6709 log^2 \u79cd\uff0c\u6240\u4ee5\u4e0b\u9762\u7684 for \u679a\u4e3e\u53ea\u4f1a\u8fdb\u884c log^2 \u6b21\n        vector&lt;int&gt; &amp;vec = g[val];\n        vec.resize(n + 2);\n        for (int i = n; i &gt; 0; i--) vec[i] = max(vec[i + 1], val &amp; A[i]);\n    }\n    return g[val][lim];\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    // \u8bfb\u5165\u6570\u636e\u5e76\u9884\u5904\u7406 rmq\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]), rmq[0][i] = A[i];\n    for (int i = 1, half = 1; i &lt; MAXP; i++, half *= 2) for (int j = 1; j + half * 2 - 1 &lt;= n; j++)\n        rmq[i][j] = rmq[i - 1][j] &amp; rmq[i - 1][j + half];\n    lg[1] = 0;\n    for (int i = 2; i &lt;= n; i++) lg[i] = lg[i &gt;&gt; 1] + 1;\n\n    // \u8ba1\u7b97\u524d\u540e\u7f00\u5173\u952e\u70b9\uff0c\u5206\u522b\u4fdd\u5b58\u5728 pre \u548c suf \u91cc\n    vector&lt;int&gt; pre, suf;\n    int now = (1 &lt;&lt; 30) - 1;\n    for (int i = 1; i &lt;= n; i++) {\n        int nxt = now &amp; A[i];\n        if (now != nxt) pre.push_back(i);\n        now = nxt;\n    }\n    now = (1 &lt;&lt; 30) - 1;\n    for (int i = n; i &gt; 0; i--) {\n        int nxt = now &amp; A[i];\n        if (now != nxt) suf.push_back(i);\n        now = nxt;\n    }\n\n    // \u8ba1\u7b97\u4e0d\u8fdb\u884c\u4efb\u4f55\u4ea4\u6362\u7684\u7b54\u6848\n    ans = 0;\n    for (int k = 1; k &lt; n; k++) ans = max(ans, query(1, k) + query(k + 1, n));\n\n    // \u679a\u4e3e\u4ea4\u6362\u4e24\u4e2a\u5173\u952e\u70b9\u7684\u60c5\u51b5\n    for (int k = 1; k &lt; n; k++)\n        for (int i : pre) if (i &lt;= k)\n            for (int j : suf) if (j &gt; k)\n                ans = max(ans, (query(1, i - 1) &amp; A[j] &amp; query(i + 1, k)) + (query(k + 1, j - 1) &amp; A[i] &amp; query(j + 1, n)));\n\n    // \u679a\u4e3e\u4ea4\u6362\u524d\u7f00\u5173\u952e\u70b9 + \u540e\u7f00\u975e\u5173\u952e\u70b9\u7684\u60c5\u51b5\n    g.clear();\n    for (int k = 1; k &lt; n; k++)\n        for (int i : pre) if (i &lt;= k) {\n            int val = query(1, i - 1) &amp; query(i + 1, k);\n            // \u5bf9\u4e8e\u7279\u5b9a\u7684 val\uff0c\u6c42\u6ee1\u8db3 j &gt;= k + 1 \u7684 A[j] \u4e2d\uff0cval &amp; A[j] \u7684\u6700\u5927\u503c\n            int best = gaoSuf(val, k + 1);\n            ans = max(ans, best + (query(k + 1, n) &amp; A[i]));\n        }\n\n    // \u679a\u4e3e\u4ea4\u6362\u540e\u7f00\u5173\u952e\u70b9 + \u524d\u7f00\u975e\u5173\u952e\u70b9\u7684\u60c5\u51b5\n    f.clear();\n    for (int k = 1; k &lt; n; k++)\n        for (int j : suf) if (j &gt; k) {\n            int val = query(k + 1, j - 1) &amp; query(j + 1, n);\n            // \u5bf9\u4e8e\u7279\u5b9a\u7684 val\uff0c\u6c42\u6ee1\u8db3 j &lt;= k \u7684 A[j] \u4e2d\uff0cval &amp; A[j] \u7684\u6700\u5927\u503c\n            int best = gaoPre(val, k);\n            ans = max(ans, best + (query(1, k) &amp; A[j]));\n        }\n\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/h/","title":"H - \u6d41\u753b\u6ea2\u5f69","text":""},{"location":"2023-provincial-guangdong/h/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73876/295 (2.0%)"},{"location":"2023-provincial-guangdong/h/#_2","title":"\u9898\u89e3","text":"<p>\u672c\u9898 idea \u6765\u81ea\u540c\u540d\u684c\u6e38\u300a\u6d41\u753b\u6ea2\u5f69\u300b\u3002</p> <p>\u56e0\u4e3a\u540e\u9762\u7684\u64cd\u4f5c\u4f1a\u8986\u76d6\u524d\u9762\u7684\u64cd\u4f5c\uff0c\u601d\u8003\u8d77\u6765\u6bd4\u8f83\u9ebb\u70e6\u3002\u6211\u4eec\u4e0d\u59a8\u628a\u64cd\u4f5c\u987a\u5e8f\u5012\u8fc7\u6765\uff0c\u8fd9\u6837\u4e00\u65e6\u67d0\u4e00\u5217\u7684\u503c\u786e\u5b9a\u4e86\uff0c\u540e\u7eed\u64cd\u4f5c\u5c31\u518d\u4e5f\u4e0d\u4f1a\u66f4\u6539\u8fd9\u4e00\u5217\u7684\u503c\u3002\u4ee5\u4e0b\u9898\u89e3\u4e2d\u64cd\u4f5c\u7684\u201c\u5148\u540e\u201d\uff0c\u662f\u6309\u64cd\u4f5c\u987a\u5e8f\u9006\u8f6c\u4e4b\u540e\u7684\u201c\u5148\u540e\u201d\u6765\u8bf4\u7684\u3002</p> <p>\u9996\u5148\uff0c\u5982\u679c\u67d0\u4e2a\u64cd\u4f5c\u628a\u4e24\u4e2a\u6570\u90fd\u6539\u6210 \\(2\\)\uff0c\u90a3\u4e48\u8fd9\u4e2a\u64cd\u4f5c\u80af\u5b9a\u6700\u4f18\uff0c\u6700\u5148\u8003\u8651\uff1b\u76f8\u5e94\u5730\uff0c\u5982\u679c\u67d0\u4e2a\u64cd\u4f5c\u628a\u4e24\u4e2a\u6570\u90fd\u6539\u6210 \\(1\\)\uff0c\u90a3\u4e48\u8fd9\u4e2a\u64cd\u4f5c\u80af\u5b9a\u6700\u5dee\uff0c\u6700\u540e\u8003\u8651\u3002\u5269\u4e0b\u7684\u5c31\u662f\u4e00\u4e2a\u6570\u6539\u6210 \\(1\\)\uff0c\u4e00\u4e2a\u6570\u6539\u6210 \\(2\\) \u7684\u64cd\u4f5c\u3002</p> <p>\u672c\u9898\u7684\u5173\u952e\u5728\u4e8e\u628a\u9898\u76ee\u8f6c\u5316\u4e3a\u56fe\u8bba\u95ee\u9898\u3002\u628a\u6bcf\u4e00\u5217\u770b\u6210\u4e00\u4e2a\u70b9\uff0c\u628a\u6bcf\u4e2a\u64cd\u4f5c\u4ece\u6539\u6210 \\(1\\) \u7684\u90a3\u4e00\u5217\u5411\u6539\u6210 \\(2\\) \u7684\u90a3\u4e00\u5217\u8fde\u4e00\u6761\u6709\u5411\u8fb9\u3002</p> <p>\u8003\u8651\u9009\u62e9\u4e00\u6761\u8fb9 \\(u \\to v\\)\uff0c\u8fdb\u884c\u5b83\u4ee3\u8868\u7684\u64cd\u4f5c\u3002\u6b64\u65f6 \\(a_u\\) \u7684\u503c\u5c06\u88ab\u9501\u5b9a\u4e3a \\(1\\)\uff0c\u800c \\(u\\) \u80fd\u76f4\u63a5\u6216\u95f4\u63a5\u5230\u8fbe\u7684\u6240\u6709\u70b9\u7684\u503c\u5c06\u88ab\u9501\u5b9a\u4e3a \\(2\\)\uff08\u53ea\u8981\u4ece \\(u\\) \u51fa\u53d1\uff0c\u6309 dfs \u5e8f\u8d70\u4e00\u904d \\(u\\) \u80fd\u5230\u8fbe\u7684\u8fb9\u5373\u53ef\uff09\u3002\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u8ba9\u9501\u5b9a\u4e3a \\(1\\) \u7684\u5217\u5c3d\u91cf\u5c11\uff0c\u4e5f\u5c31\u662f\u9009\u62e9\u5c3d\u91cf\u5c11\u7684\u70b9\uff0c\u8ba9\u5b83\u4eec\u80fd\u5230\u8fbe\u7684\u70b9\u7684\u5e76\u96c6\u7b49\u4e8e\u6574\u5f20\u56fe\u7684\u70b9\u96c6\u3002</p> <p>\u5bb9\u6613\u53d1\u73b0\uff0c\u5c06\u5f3a\u8fde\u901a\u5206\u91cf\u7f29\u70b9\u4ee5\u540e\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\u3002\u6709\u5411\u65e0\u73af\u56fe\u4e0a\u6bcf\u4e00\u4e2a\u5165\u5ea6\u4e3a \\(0\\) \u7684\u70b9\u6211\u4eec\u90fd\u5fc5\u987b\u9009\u62e9\uff0c\u624d\u80fd\u8ba9\u5b83\u4eec\u672c\u8eab\u4ee5\u53ca\u5b83\u4eec\u7684\u540e\u7ee7\u8986\u76d6\u6574\u5f20\u56fe\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u6bcf\u6b21\u4ece\u4e00\u4e2a\u5165\u5ea6\u4e3a \\(0\\) \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\u9009\u62e9\u4e00\u4e2a\u70b9\uff0c\u6309 dfs \u987a\u5e8f\u8f93\u51fa\u8fb9\u7684\u7f16\u53f7\u5373\u53ef\u3002</p> <p>\u8fd9\u91cc\u6709\u4e00\u4e2a\u7ec6\u8282\uff1a\u5982\u679c\u4e00\u4e2a\u5165\u5ea6\u4e3a \\(0\\) \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u88ab\u4e00\u4e2a \\((l_i, 2, r_i, 2)\\) \u64cd\u4f5c\u6240\u5f71\u54cd\uff0c\u90a3\u4e48\u5e94\u8be5\u9009\u62e9\u88ab\u5f71\u54cd\u7684\u70b9\u4e3a dfs \u7684\u8d77\u59cb\u70b9\uff0c\u56e0\u4e3a\u88ab\u5f71\u54cd\u7684\u70b9\u4ee3\u8868\u7684\u5217\u5df2\u7ecf\u88ab\u9501\u5b9a\u4e3a \\(2\\)\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n + m)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/h/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 5e5)\n#define MAXM ((int) 5e5)\nusing namespace std;\n\nint n, m, OP[MAXM + 10][4];\nvector&lt;int&gt; ans;\n\nvector&lt;int&gt; e[MAXN + 10], v[MAXN + 10];\n// bel[i]\uff1a\u70b9 i \u5c5e\u4e8e\u54ea\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\nint clk, bCnt, dfn[MAXN + 10], low[MAXN + 10], bel[MAXN + 10];\nbool inStk[MAXN + 10];\nstack&lt;int&gt; stk;\n\n// deg[i]\uff1a\u5f3a\u8fde\u901a\u5206\u91cf i \u7684\u5165\u5ea6\nint deg[MAXN + 10];\n// vis[i]\uff1adfs \u6784\u9020\u7b54\u6848\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8282\u70b9 i \u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\nbool vis[MAXN + 10];\n\n// tarjan \u6c42\u5f3a\u8fde\u901a\u5206\u91cf\nvoid tarjan(int sn) {\n    low[sn] = dfn[sn] = ++clk;\n    stk.push(sn); inStk[sn] = true;\n    for (int fn : e[sn]) {\n        if (!dfn[fn]) {\n            tarjan(fn);\n            low[sn] = min(low[sn], low[fn]);\n        } else if (inStk[fn]) {\n            low[sn] = min(low[sn], dfn[fn]);\n        }\n    }\n    if (dfn[sn] == low[sn]) {\n        ++bCnt;\n        while (stk.top() != sn) {\n            bel[stk.top()] = bCnt;\n            inStk[stk.top()] = false;\n            stk.pop();\n        }\n        bel[stk.top()] = bCnt;\n        inStk[stk.top()] = false;\n        stk.pop();\n    }\n}\n\n// \u4ece\u8282\u70b9 sn \u5f00\u59cb dfs\uff0c\u5e76\u6309 dfs \u5e8f\u5c06\u8bbf\u95ee\u8fc7\u7684\u6bcf\u6761\u8fb9\u52a0\u5165 vec \u91cc\nvoid dfs(int sn, vector&lt;int&gt; &amp;vec) {\n    vis[sn] = true;\n    for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i];\n        int val = v[sn][i];\n        vec.push_back(val);\n        if (!vis[fn]) dfs(fn, vec);\n    }\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n\n    vector&lt;int&gt; one, two;\n    for (int i = 1; i &lt;= n; i++) e[i].clear(), v[i].clear();\n    for (int i = 1; i &lt;= m; i++) {\n        for (int j = 0; j &lt; 4; j++) scanf(\"%d\", &amp;OP[i][j]);\n        if (OP[i][1] == 1 &amp;&amp; OP[i][3] == 1) {\n            // \u4e24\u4e2a\u6570\u90fd\u6539\u6210 1\uff0c\u6700\u5dee\u7684\u64cd\u4f5c\n            one.push_back(i);\n        } else if (OP[i][1] == 2 &amp;&amp; OP[i][3] == 2) {\n            // \u4e24\u4e2a\u6570\u90fd\u6539\u6210 2\uff0c\u6700\u597d\u7684\u64cd\u4f5c\n            two.push_back(i);\n        } else if (OP[i][1] == 1) {\n            // \u56fe\u4e2d\u52a0\u4e00\u6761\u4ece 1 \u6307\u5411 2 \u7684\u8fb9\n            e[OP[i][0]].push_back(OP[i][2]);\n            v[OP[i][0]].push_back(i);\n        } else {\n            // \u56fe\u4e2d\u52a0\u4e00\u6761\u4ece 1 \u6307\u5411 2 \u7684\u8fb9\n            e[OP[i][2]].push_back(OP[i][0]);\n            v[OP[i][2]].push_back(i);\n        }\n    }\n\n    // \u987a\u5e8f\u8f93\u51fa\u7684\u7b54\u6848\u4e2d\uff0c\u4e24\u4e2a\u6570\u90fd\u6539\u6210 1 \u7684\u6700\u5dee\u64cd\u4f5c\u6700\u5148\u8f93\u51fa\n    ans.clear();\n    for (int x : one) ans.push_back(x);\n\n    memset(dfn, 0, sizeof(int) * (n + 3));\n    clk = bCnt = 0;\n    for (int sn = 1; sn &lt;= n; sn++) if (!dfn[sn]) tarjan(sn);\n\n    memset(deg, 0, sizeof(int) * (n + 3));\n    for (int sn = 1; sn &lt;= n; sn++) {\n        for (int fn : e[sn]) if (bel[sn] != bel[fn]) deg[bel[fn]]++;\n    }\n\n    vector&lt;int&gt; vec;\n    memset(vis, 0, sizeof(bool) * (n + 3));\n    // \u5982\u679c\u4e00\u4e2a\u5165\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\u53d7\u4e00\u4e2a (l_i, 2, r_i, 2) \u64cd\u4f5c\u5f71\u54cd\uff0c\u90a3\u4e48\u9700\u8981\u4ece l_i \u6216 r_i \u5f00\u59cb dfs\n    for (int x : two) for (int j = 0; j &lt; 4; j += 2) {\n        int sn = OP[x][j];\n        if (deg[bel[sn]] == 0 &amp;&amp; !vis[sn]) dfs(sn, vec);\n    }\n    // \u5269\u4e0b\u7684\u5165\u5ea6\u4e3a 0 \u7684\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u968f\u4fbf\u627e\u4e00\u4e2a\u70b9\u5f00\u59cb dfs\n    for (int sn = 1; sn &lt;= n; sn++) {\n        if (deg[bel[sn]] == 0 &amp;&amp; !vis[sn]) dfs(sn, vec);\n    }\n    // dfs \u5e8f\u662f\u7b54\u6848\u7684\u5012\u5e8f\n    reverse(vec.begin(), vec.end());\n    ans.insert(ans.end(), vec.begin(), vec.end());\n\n    // \u987a\u5e8f\u8f93\u51fa\u7684\u7b54\u6848\u4e2d\uff0c\u4e24\u4e2a\u6570\u90fd\u6539\u6210 2 \u7684\u6700\u597d\u7684\u64cd\u4f5c\u6700\u540e\u8f93\u51fa\n    for (int x : two) ans.push_back(x);\n\n    // \u8ba1\u7b97\u5e8f\u5217\u6700\u7ec8\u7684\u548c\n    unordered_map&lt;int, int&gt; mp;\n    for (int x : ans) {\n        mp[OP[x][0]] = OP[x][1];\n        mp[OP[x][2]] = OP[x][3];\n    }\n    int tot = 0;\n    for (auto it = mp.begin(); it != mp.end(); it++) tot += it-&gt;second;\n    printf(\"%d\\n\", tot);\n    for (int i = 0; i &lt; m; i++) printf(\"%d%c\", ans[i], \"\\n \"[i + 1 &lt; m]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/i/","title":"I - \u8def\u5f84\u89c4\u5212","text":""},{"location":"2023-provincial-guangdong/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387?/? (?%)"},{"location":"2023-provincial-guangdong/i/#_2","title":"\u9898\u89e3","text":"<p>\u5047\u8bbe\u7b54\u6848\u4e3a \\(x\\)\uff0c\u90a3\u4e48\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u4ece \\(0\\) \u5230 \\((x - 1)\\) \u7684\u6bcf\u4e2a\u6574\u6570\u90fd\u5728\u8def\u5f84\u4e0a\u3002\u8fd9\u4e00\u6761\u4ef6\u6ee1\u8db3\u4e8c\u5206\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u7b54\u6848 \\(x\\)\uff0c\u5e76\u68c0\u67e5\u662f\u5426\u5b58\u5728\u8fd9\u6837\u7684\u8def\u5f84\u3002</p> <p>\u7531\u4e8e\u6bcf\u4e00\u6b65\u53ea\u80fd\u5f80\u53f3\u6216\u8005\u5f80\u4e0b\u8d70\uff0c\u56e0\u6b64\u5c06\u8def\u5f84\u4e0a\u6bcf\u4e2a\u683c\u5b50\u7684\u5750\u6807\u6309\u884c\u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\uff0c\u5217\u4e3a\u7b2c\u4e8c\u5173\u952e\u5b57\u6392\u5e8f\u540e\uff0c\u6392\u5728\u524d\u9762\u7684\u5750\u6807\u7684\u5217\u7f16\u53f7\uff0c\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u6392\u5728\u540e\u9762\u7684\u5750\u6807\u7684\u5217\u7f16\u53f7\u3002</p> <p>\u56e0\u6b64\uff0c\u5c06\u4ece \\(0\\) \u5230 \\((x - 1)\\) \u7684\u6bcf\u4e2a\u6574\u6570\u6240\u5728\u7684\u683c\u5b50\u7684\u5750\u6807\u6392\u5e8f\uff0c\u5e76\u68c0\u67e5\u5217\u7f16\u53f7\u662f\u5426\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\uff0c\u5373\u53ef\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6574\u6570\u90fd\u5728\u8def\u5f84\u4e0a\u3002\u5b9e\u9645\u5b9e\u73b0\u65f6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u6392\u5e8f\u51fd\u6570\u3002\u53ea\u8981\u4f9d\u6b64\u679a\u4e3e\u6bcf\u4e2a\u683c\u5b50\uff0c\u82e5\u683c\u5b50\u91cc\u7684\u6574\u6570\u5c0f\u4e8e \\(x\\) \u5219\u628a\u683c\u5b50\u52a0\u5165 <code>vector</code>\uff0c\u8fd9\u6837\u5f97\u5230\u7684 <code>vector</code> \u5c31\u5df2\u7ecf\u6309\u679a\u4e3e\u7684\u987a\u5e8f\u6392\u5e8f\u4e86\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(nm\\log(nm))\\)\u3002</p>"},{"location":"2023-provincial-guangdong/i/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXPROD ((int) 1e6)\nusing namespace std;\n\nint n, m, A[MAXPROD];\n\n// \u5c06\u4ece 0 \u5230 LIM - 1 \u6240\u5728\u7684\u683c\u5b50\u5750\u6807\u201c\u6392\u5e8f\u201d\uff0c\u68c0\u67e5\u524d\u9762\u7684\u5217\u5750\u6807\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u540e\u9762\u7684\u5217\u5750\u6807\nbool check(int LIM) {\n    // \u5b9e\u9645\u5b9e\u73b0\u65f6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u6392\u5e8f\u51fd\u6570\uff0c\n    // \u76f4\u63a5\u6309\u987a\u5e8f\u679a\u4e3e\u6bcf\u4e2a\u683c\u5b50\uff0c\u82e5\u683c\u5b50\u91cc\u7684\u6574\u6570\u5c0f\u4e8e $x$ \u5219\u628a\u683c\u5b50\u52a0\u5165 vector\uff0c\n    // \u8fd9\u6837\u5f97\u5230\u7684 vector \u5c31\u5df2\u7ecf\u6309\u679a\u4e3e\u7684\u987a\u5e8f\u6392\u5e8f\u4e86\n    //\n    // \u800c\u4e14\u751a\u81f3\u8fde vector \u4e5f\u4e0d\u7528\u771f\u7684\u7ef4\u62a4\uff0c\n    // \u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3 vector \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u5750\u6807\uff0c\u548c\u5f53\u524d\u5217\u5750\u6807\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\n    // \u76f4\u63a5\u7528\u53d8\u91cf last \u7ef4\u62a4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u5750\u6807\u5373\u53ef\n    int last = 0;\n    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; m; j++) if (A[i * m + j] &lt; LIM) {\n        if (last &gt; j) return false;\n        last = j;\n    }\n    return true;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt; n; i++) for (int j = 0; j &lt; m; j++) scanf(\"%d\", &amp;A[i * m + j]);\n    // \u4e8c\u5206\u7b54\u6848\n    int head = 0, tail = n * m;\n    while (head &lt; tail) {\n        int mid = (head + tail + 1) &gt;&gt; 1;\n        if (check(mid)) head = mid;\n        else tail = mid - 1;\n    }\n    printf(\"%d\\n\", head);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/j/","title":"J - X \u7b49\u4e8e Y","text":""},{"location":"2023-provincial-guangdong/j/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73879/295 (3.1%)"},{"location":"2023-provincial-guangdong/j/#_2","title":"\u9898\u89e3","text":"<p>\u5f53\u5e8f\u5217\u957f\u5ea6\u4e3a \\(1\\) \u65f6\uff0c\u8981\u6c42 \\(x = y\\)\uff0c\u6b64\u65f6 \\(a = b = 2\\) \u5373\u53ef\u3002</p> <p>\u5f53\u5e8f\u5217\u957f\u5ea6\u4e3a \\(2\\) \u65f6\uff0c\u8bbe\u6700\u9ad8\u4f4d\u4e3a \\(t\\)\uff0c\u6709 \\(t \\le \\sqrt{x}\\) \u4e14 \\(t \\le \\sqrt{y}\\)\uff08\u5426\u5219\u5982\u679c \\(t &gt; \\sqrt{x}\\)\uff0c\u56e0\u4e3a \\(t &lt; a\\)\uff0c\\(x \\ge ta &gt; x\\) \u77db\u76fe\uff09\u3002\u6709\u4ee5\u4e0b\u5f0f\u5b50\uff1a</p> <ul> <li>\\(1 \\le t &lt; a\\)\uff0c\\(1 \\le t &lt; b\\)\uff1a\u9ad8\u4f4d\u4e0d\u80fd\u8d85\u8fc7\u8fdb\u5236\u57fa\u6570\u3002</li> <li>\\(0 \\le x - ta &lt; a\\)\uff0c\\(0 \\le y - tb &lt; b\\)\uff1a\u4f4e\u4f4d\u4e0d\u80fd\u8d85\u8fc7\u8fdb\u5236\u57fa\u6570\u3002</li> <li>\\(x - ta = y - tb\\)\uff1a\u4f4e\u4f4d\u4e5f\u8981\u4e00\u6837\u3002</li> <li>\\(2 \\le a \\le A\\)\uff0c\\(2 \\le b \\le B\\)\uff1a\u9898\u76ee\u8981\u6c42\u3002</li> </ul> <p>\u5229\u7528\u7b2c\u4e09\u6761\u7b49\u5f0f\uff0c\u628a\u6240\u6709 \\(b\\) \u4ee3\u6362\u6210 \\(b = \\frac{y - x}{t} + a\\)\uff0c\u5c31\u80fd\u5f97\u5230 \\(a\\) \u7684\u8303\u56f4\u3002\u56e0\u4e3a \\(b\\) \u4e5f\u8981\u662f\u6574\u6570\uff0c\u6240\u4ee5 \\((y - x) \\bmod t = 0\\) \u7684 \\(t\\) \u624d\u80fd\u68c0\u6d4b\u3002\u8fd9\u79cd\u60c5\u51b5\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(\\sqrt{x})\\)\u3002</p> <p>\u5f53\u5e8f\u5217\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e \\(3\\) \u65f6\uff0c\\(a \\le \\sqrt{x}\\)\uff0c\\(b \\le \\sqrt{y}\\)\uff0c\u8ba1\u7b97\u6bcf\u79cd \\(a\\) \u548c\u6bcf\u79cd \\(b\\) \u7684\u7b54\u6848\uff0c\u770b\u662f\u5426\u6709\u4e00\u6837\u7684\u5373\u53ef\u3002\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\u8bb0\u5f55\uff0c\u4f46\u662f\u5e38\u6570\u6bd4\u8f83\u5927\uff0c\u4e5f\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u7684\u65b9\u5f0f\u5224\u65ad\u3002\u8fd9\u79cd\u60c5\u51b5\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(\\sqrt{x} \\times \\log x)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/j/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nlong long x, y, A, B;\n\nlong long ceil(long long a, long long b) {\n    return (a + b - 1) / b;\n}\n\n// \u628a x \u7684 a \u8fdb\u5236\u8868\u793a\u5f53\u6210\u4e00\u4e2a b \u8fdb\u5236\u6570\nlong long gao(long long a, long long b) {\n    long long ret = 0;\n    for (long long t = x, p = 1; t; t /= a, p *= b) {\n        // \u6ce8\u610f\uff01t % a &gt;= b \u662f\u6709\u53ef\u80fd\u7684\uff0c\u5728\u8c03\u7528\u51fd\u6570\u7684\u5730\u65b9\u68c0\u67e5\n        ret += p * (t % a);\n        // \u8d85\u8fc7 y \u5c31\u9000\u51fa\uff0c\u9632\u6b62\u6ea2\u51fa\n        if (ret &gt; y) break;\n    }\n    return ret;\n}\n\n// \u68c0\u67e5 x \u7684 a \u8fdb\u5236\u548c y \u7684 b \u8fdb\u5236\u8868\u793a\u662f\u5426\u76f8\u7b49\nbool check(long long a, long long b) {\n    long long xx = x, yy = y;\n    while (xx &amp;&amp; yy) {\n        if (xx % a != yy % b) return false;\n        xx /= a; yy /= b;\n    }\n    return xx == yy;\n}\n\nvoid solve() {\n    scanf(\"%lld%lld%lld%lld\", &amp;x, &amp;y, &amp;A, &amp;B);\n\n    // \u5e8f\u5217\u957f\u5ea6\u4e3a 1 \u7684\u60c5\u51b5\n    if (x == y) { printf(\"YES\\n2 2\\n\"); return; }\n\n    // \u5e8f\u5217\u957f\u5ea6\u4e3a 2 \u7684\u60c5\u51b5\n    for (long long t = 1; t * t &lt;= max(x, y); t++) if ((y - x) % t == 0) {\n        long long L = 2, R = A;\n        L = max(L, ceil(2 * t + x - y, t));\n        L = max(L, x / (t + 1) + 1);\n        L = max(L, t + 1);\n        L = max(L, ((t + 1) * x - y) / (t * (t + 1)) + 1);\n        L = max(L, (t * t + x - y) / t + 1);\n        R = min(R, (t * B + x - y) / t);\n        R = min(R, x / t);\n        if (L &lt;= R) { printf(\"YES\\n%lld %lld\\n\", L, (t * L - x + y) / t); return; }\n    }\n\n    // \u5e8f\u5217\u957f\u5ea6\u4e3a 3 \u7684\u60c5\u51b5\uff0c\u7528\u53cc\u6307\u9488\u5224\u65ad\n    for (long long a = 2, b = 2; a * a &lt;= x &amp;&amp; a &lt;= A; a++) {\n        // \u628a x \u7684 a \u8fdb\u5236\u8868\u793a\u5f53\u6210\u4e00\u4e2a b \u8fdb\u5236\u6570\uff0c\u5982\u679c\u8fd9\u4e2a\u6570\u4e0d\u591f y \u8bf4\u660e b \u8fdb\u5236\u4e0d\u591f\u5927\n        while (gao(a, b) &lt; y &amp;&amp; b * b &lt;= y &amp;&amp; b &lt;= B) b++;\n        if (b * b &gt; y || b &gt; B) break;\n        // \u5fc5\u987b\u68c0\u67e5\u4e24\u79cd\u8868\u793a\u662f\u5426\u771f\u7684\u76f8\u7b49\uff0c\u56e0\u4e3a gao \u51fd\u6570\u4e2d\uff0cx \u7684 a \u8fdb\u5236\u8868\u793a\u91cc\u7684\u67d0\u4e00\u4f4d\u53ef\u80fd\u5927\u4e8e\u7b49\u4e8e b\n        if (gao(a, b) == y &amp;&amp; check(a, b)) { printf(\"YES\\n%lld %lld\\n\", a, b); return; }\n    }\n\n    printf(\"NO\\n\");\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/k/","title":"K - \u72ec\u7acb\u94bb\u77f3","text":""},{"location":"2023-provincial-guangdong/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387179/295 (60.7%)"},{"location":"2023-provincial-guangdong/k/#_2","title":"\u9898\u89e3","text":"<p>\u56e0\u4e3a\u6bcf\u4e2a\u68cb\u5b50\u53ea\u80fd\u88ab\u6a2a\u5411\u6216\u8005\u7eb5\u5411\u8df3\u8fc7\uff0c\u56e0\u6b64\u5f53\u68cb\u76d8\u4e0a\u5b58\u5728 \\(k\\) \u679a\u68cb\u5b50\u65f6\uff0c\u5171\u6709 \\(2k\\) \u79cd\u64cd\u4f5c\u53ef\u4ee5\u9009\u62e9\u3002\u53c8\u56e0\u4e3a\u6bcf\u4e00\u6b65\u90fd\u5c06\u51cf\u5c11 \\(1\\) \u679a\u68cb\u5b50\uff0c\u56e0\u6b64\u81f3\u591a\u6267\u884c \\((k - 1)\\) \u6b65\u3002</p> <p>\u76f4\u63a5\u901a\u8fc7 dfs \u8fdb\u884c\u641c\u7d22\u7684\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(T \\times nm \\times \\prod\\limits_{i=2}^k 2i) \\approx 1.7 \\times 10^7\\)\uff0c\u65e0\u9700\u4efb\u4f55\u4f18\u5316\u5373\u53ef\u5728\u65f6\u9650\u5185\u901a\u8fc7\u3002</p>"},{"location":"2023-provincial-guangdong/k/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 6\n#define MAXM 6\nusing namespace std;\n\nint n, m, K, ans;\nint MAP[MAXN + 5][MAXM + 5];\n\nvoid dfs(int now) {\n    ans = min(ans, now);\n    for (int i = 1; i &lt;= n; i++) for (int j = 1; j &lt;= m; j++) if (MAP[i][j]) {\n        if (i &gt; 1 &amp;&amp; i &lt; n) {\n            // \u5411\u4e0b\u8df3\n            if (MAP[i - 1][j] &amp;&amp; !MAP[i + 1][j]) {\n                MAP[i - 1][j] = MAP[i][j] = 0;\n                MAP[i + 1][j] = 1;\n                dfs(now - 1);\n                MAP[i - 1][j] = MAP[i][j] = 1;\n                MAP[i + 1][j] = 0;\n            }\n\n            // \u5411\u4e0a\u8df3\n            if (!MAP[i - 1][j] &amp;&amp; MAP[i + 1][j]) {\n                MAP[i + 1][j] = MAP[i][j] = 0;\n                MAP[i - 1][j] = 1;\n                dfs(now - 1);\n                MAP[i + 1][j] = MAP[i][j] = 1;\n                MAP[i - 1][j] = 0;\n            }\n        }\n\n        if (j &gt; 1 &amp;&amp; j &lt; m) {\n            // \u5411\u53f3\u8df3\n            if (MAP[i][j - 1] &amp;&amp; !MAP[i][j + 1]) {\n                MAP[i][j - 1] = MAP[i][j] = 0;\n                MAP[i][j + 1] = 1;\n                dfs(now - 1);\n                MAP[i][j - 1] = MAP[i][j] = 1;\n                MAP[i][j + 1] = 0;\n            }\n\n            // \u5411\u5de6\u8df3\n            if (!MAP[i][j - 1] &amp;&amp; MAP[i][j + 1]) {\n                MAP[i][j + 1] = MAP[i][j] = 0;\n                MAP[i][j - 1] = 1;\n                dfs(now - 1);\n                MAP[i][j + 1] = MAP[i][j] = 1;\n                MAP[i][j - 1] = 0;\n            }\n        }\n    }\n}\n\nvoid solve() {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;K);\n    memset(MAP, 0, sizeof(MAP));\n    for (int i = 1; i &lt;= K; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        MAP[x][y] = 1;\n    }\n    ans = K; dfs(K);\n    printf(\"%d\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/l/","title":"L - \u7ecf\u5178\u95ee\u9898","text":""},{"location":"2023-provincial-guangdong/l/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73870/295 (0.0%)"},{"location":"2023-provincial-guangdong/l/#_2","title":"\u9898\u89e3","text":"<p>\u6c42\u5b8c\u5168\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u901a\u5e38\u4f7f\u7528 Boruvka \u7b97\u6cd5\u3002</p> <p>\u79f0\u7279\u6b8a\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u4e3a\u7279\u6b8a\u70b9\uff0c\u5176\u5b83\u8282\u70b9\u4e3a\u4e00\u822c\u70b9\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\\(2m\\) \u4e2a\u7279\u6b8a\u70b9\u5c06\u4e00\u822c\u70b9\u5206\u6210\u4e86 \\((2m + 1)\\) \u6bb5\u3002\u4e00\u822c\u70b9\u548c\u5176\u5b83\u70b9\u7684\u8fde\u8fb9\u6743\u503c\u81f3\u5c11\u4e3a \\(1\\)\u3002\u56e0\u6b64\u6700\u540e\u80af\u5b9a\u5b58\u5728\u4e00\u79cd\u6700\u5c0f\u751f\u6210\u6811\uff0c\u4f7f\u5f97\u6bcf\u6bb5\u4e00\u822c\u70b9 \\(l, (l + 1), \\cdots, r\\) \u5185\u90e8\u662f\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u76f8\u8fde\u7684\u3002</p> <p>\u8fde\u63a5\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u56fe\u7f29\u4e3a \\((2m + 1)\\) \u4e2a\u201c\u8fde\u7eed\u70b9\u201d\uff08\u6bcf\u4e2a\u8fde\u7eed\u70b9\u4ee3\u8868\u8fde\u7eed\u7684\u4e00\u6bb5\u4e00\u822c\u70b9\uff09\u4ee5\u53ca \\(2m\\) \u4e2a\u7279\u6b8a\u70b9\u7684\u5b8c\u5168\u56fe\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u5728\u8fd9\u5f20\u56fe\u4e0a\u8fd0\u884c Boruvka \u7b97\u6cd5\uff0c\u95ee\u9898\u53d8\u4e3a\uff1a\u5feb\u901f\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5411\u5176\u5b83\u8fde\u901a\u5757\u8fde\u8fb9\u7684\u6700\u5c0f\u8fb9\u6743\u3002</p> \u7f29\u70b9\u7684\u6b63\u786e\u6027\u8bc1\u660e <p>\u8003\u8651\u4f7f\u7528\u53cd\u8bc1\u6cd5\u3002\u5047\u8bbe\u6700\u540e\u6c42\u51fa\u6765\u7b54\u6848 \\(T\\) \u7684\u4e0d\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u771f\u6b63\u7684\u6700\u5c0f\u751f\u6210\u6811\u5176\u5b9e\u662f \\(T'\\)\u3002\u8003\u8651\u5728 \\(T'\\) \u800c\u4e0d\u5728 \\(T\\) \u4e0a\u7684\u67d0\u6761\u8fb9 \\(e\\)\uff0c\u6709\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\\(e\\) \u8fde\u63a5\u4e86\u7f29\u70b9\u540e\u7684\u56fe\u4e0a\u4e24\u4e2a\u4e0d\u540c\u7684\u70b9\uff1a\u4e0d\u53ef\u80fd\uff0c\u56e0\u4e3a Boruvka \u662f\u5728\u7f29\u70b9\u540e\u7684\u56fe\u4e0a\u8fd0\u884c\u7684\uff0c\u6c42\u51fa\u6765\u7684\u80af\u5b9a\u662f \u7f29\u70b9\u540e\u7684\u56fe \u7684\u6700\u5c0f\u751f\u6210\u6811\u3002</li> <li>\\(e\\) \u7684\u4e24\u7aef\u90fd\u5728\u540c\u4e00\u4e2a\u8fde\u7eed\u70b9\u5185\uff1a\u52a0\u5165 \\(e\\) \u4e4b\u540e\uff0c\u4f1a\u5728\u8be5\u8fde\u7eed\u70b9\u5185\u90e8\u5f62\u6210\u4e00\u4e2a\u73af\u3002\u4f46\u8fde\u7eed\u70b9\u5185\u7684\u5176\u4ed6\u8fb9\u6743\u503c\u90fd\u662f \\(1\\)\uff0c\\(e\\) \u7684\u6743\u503c\u80af\u5b9a\u662f\u73af\u4e0a\u6700\u5927\u7684\uff0c\u9009 \\(e\\) \u4e0d\u4f18\uff0c\u4e0e \\(T'\\) \u662f\u771f\u6b63\u7684\u6700\u5c0f\u751f\u6210\u6811\u77db\u76fe\u3002</li> </ul> <p>\u6bcf\u4e00\u8f6e Boruvka \u521a\u5f00\u59cb\u65f6\uff0c\u8ba1\u7b97 <code>pre[i]</code> \u8868\u793a\u70b9 \\(i\\) \u5de6\u8fb9\u6700\u8fd1\u7684\uff0c\u4e14\u548c\u5b83\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u7684\u70b9\u662f\u54ea\u4e2a\u3002\u540c\u7406\uff0c\u8ba1\u7b97 <code>nxt[i]</code> \u8868\u793a\u70b9 \\(i\\) \u53f3\u8fb9\u6700\u8fd1\u7684\uff0c\u4e14\u548c\u5b83\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u7684\u70b9\u662f\u54ea\u4e2a\u3002\u63a5\u4e0b\u6765\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff1a</p> <ul> <li>\u5982\u679c\u5f53\u524d\u662f\u8fde\u7eed\u70b9\uff0c\u9009\u62e9 <code>pre[i]</code> \u548c <code>nxt[i]</code> \u4e2d\u8ddd\u79bb\u6700\u8fd1\u7684\u5373\u53ef\u3002</li> <li>\u5982\u679c\u5f53\u524d\u662f\u7279\u6b8a\u70b9\uff0c\u5219\u9700\u8981\u5411\u5de6 / \u53f3\u679a\u4e3e\u5230\u7b2c\u4e00\u4e2a\u548c\u5b83\u6ca1\u6709\u8fde\u7279\u6b8a\u8fb9\uff0c\u4e14\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u70b9\u3002\u53e6\u5916\u8fd8\u8981\u8003\u8651\u4e0e\u5b83\u76f8\u90bb\u7684\u6240\u6709\u7279\u6b8a\u8fb9\u3002\u8fd9\u4e00\u6b65\u603b\u4f53\u662f \\(\\mathcal{O}(m)\\) \u7684\u3002\u5b9e\u73b0\u8be6\u89c1\u53c2\u8003\u4ee3\u7801\u7684\u6ce8\u91ca\u3002</li> </ul> <p>Boruvka \u7b97\u6cd5\u6267\u884c \\(\\mathcal{O}(\\log \\text{\u70b9\u6570})\\) \u8f6e\uff0c\u56e0\u6b64\u603b\u4f53\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(m \\log m)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/l/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXM ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n, m;\nlong long ans;\n\n// \u7f29\u70b9\u540e\u56fe\u4e0a\u7684\u4e00\u4e2a\u8282\u70b9\nstruct Vert {\n    // spec == true\uff1a\u7279\u6b8a\u70b9\uff1bspec == false\uff1a\u8fde\u7eed\u70b9\n    bool spec;\n    // \u5bf9\u4e8e\u7279\u6b8a\u70b9\uff0cL = R = \u70b9\u7684\u7f16\u53f7\uff1b\u5bf9\u4e8e\u8fde\u7eed\u70b9\uff0cL \u662f\u6240\u4ee3\u8868\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0cR \u662f\u53f3\u7aef\u70b9\n    int L, R;\n    // \u53ea\u5bf9\u7279\u6b8a\u70b9\u6709\u7528\uff0c\u8bb0\u5f55\u4e0e\u8be5\u7279\u6b8a\u70b9\u76f8\u90bb\u7684\u6240\u6709\u7279\u6b8a\u8fb9\uff0ckey \u662f\u7ec8\u70b9\u7f16\u53f7\uff0cvalue \u662f\u6743\u503c\n    unordered_map&lt;int, int&gt; e;\n};\nvector&lt;Vert&gt; V;\n\nint root[MAXM * 4 + 10], pre[MAXM * 4 + 10], nxt[MAXM * 4 + 10];\n\nint findroot(int x) {\n    if (root[x] != x) root[x] = findroot(root[x]);\n    return root[x];\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    map&lt;int, vector&lt;pii&gt;&gt; e;\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y, z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z);\n        e[x].push_back(pii(y, z)); e[y].push_back(pii(x, z));\n    }\n\n    // \u7528\u7279\u6b8a\u70b9\u628a\u4e00\u822c\u70b9\u5206\u6210\u4e00\u6bb5\u6bb5\u533a\u95f4\n    V.clear();\n    int last = 0;\n    for (auto &amp;entry : e) {\n        int pos = entry.first;\n        if (last + 1 != pos) V.push_back(Vert{false, last + 1, pos - 1, {}});\n        V.push_back(Vert{true, pos, pos, {}});\n        last = pos;\n    }\n    if (last != n) V.push_back(Vert{false, last + 1, n, {}});\n    n = V.size();\n\n    // \u628a\u539f\u56fe\u7684\u70b9\u7f16\u53f7\u8f6c\u6362\u6210\u7f29\u70b9\u540e\u56fe\u7684\u70b9\u7f16\u53f7\n    unordered_map&lt;int, int&gt; mp;\n    for (int i = 0; i &lt; n; i++) if (V[i].spec) mp[V[i].L] = i;\n    auto it = e.begin();\n    for (auto &amp;v : V) if (v.spec) {\n        for (auto &amp;[fn, val] : it-&gt;second) v.e[mp[fn]] = val;\n        it++;\n    }\n\n    // \u628a\u6bcf\u4e2a\u8fde\u7eed\u70b9\u5185\u90e8\u8fde\u8d77\u6765\n    ans = 0;\n    for (auto &amp;v : V) if (!v.spec) ans += v.R - v.L;\n\n    for (int i = 0; i &lt; n; i++) root[i] = i;\n    int comp = n;\n    // boruvka\n    while (comp &gt; 1) {\n        // pre[i] \u8868\u793a\u70b9 i \u5de6\u8fb9\u6700\u8fd1\u7684\uff0c\u4e14\u548c\u5b83\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u7684\u70b9\u662f\u54ea\u4e2a\n        pre[0] = -1;\n        for (int i = 1; i &lt; n; i++) pre[i] = (findroot(i - 1) == findroot(i) ? pre[i - 1] : i - 1);\n        // nxt[i] \u8868\u793a\u70b9 i \u53f3\u8fb9\u6700\u8fd1\u7684\uff0c\u4e14\u548c\u5b83\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u7684\u70b9\u662f\u54ea\u4e2a\n        nxt[n - 1] = n;\n        for (int i = n - 2; i &gt;= 0; i--) nxt[i] = (findroot(i + 1) == findroot(i) ? nxt[i + 1] : i + 1);\n\n        vector&lt;int&gt; best(n, -1), len(n, 2e9);\n        for (int i = 0; i &lt; n; i++) {\n            int r = findroot(i);\n            if (V[i].spec) {\n                // \u8003\u8651\u4e0e\u8be5\u7279\u6b8a\u70b9\u76f8\u8fde\u7684\u6240\u6709\u7279\u6b8a\u8fb9\n                // \u7279\u6b8a\u8fb9\u4e00\u5171 m \u6761\uff0c\u6240\u4ee5\u6bcf\u4e00\u8f6e boruvka \u8fd9\u4e00\u6bb5\u603b\u5171\u6267\u884c m \u6b21\n                for (auto &amp;[fn, val] : V[i].e)\n                    if (r != findroot(fn) &amp;&amp; val &lt; len[r]) best[r] = fn, len[r] = val;\n                // \u5bfb\u627e\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u548c\u5b83\u6ca1\u6709\u8fde\u7279\u6b8a\u8fb9\uff0c\u4e14\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u70b9\n                //\n                // \u7b80\u5355\u5206\u6790\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u3002\u627e\u7684\u65f6\u5019\u5171\u6709 3 \u79cd\u60c5\u51b5\uff1a\n                //   1. \u78b0\u5230\u6709\u7279\u6b8a\u8fb9\u76f8\u8fde\u7684\u70b9\uff0c\u76f4\u63a5\u7ee7\u7eed\u5f80\u524d\u8003\u8651\u4e00\u4e2a\u70b9\u3002\n                //   2. \u78b0\u5230\u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u70b9\uff0c\u901a\u8fc7 pre[j] \u76f4\u63a5\u8df3\u5230\u524d\u4e00\u4e2a\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u70b9\u3002\n                //   3. \u627e\u5230\u4e86\uff0c\u76f4\u63a5\u9000\u51fa\u3002\n                //\n                // \u60c5\u51b5 1 \u53ef\u80fd\u4f1a\u8df3\u5230\u60c5\u51b5 1, 2, 3 \u7684\u4efb\u610f\u4e00\u79cd\u3002\u60c5\u51b5 2 \u53ea\u4f1a\u8df3\u5230\u60c5\u51b5 1 \u548c 3\u3002\n                // \u56e0\u4e3a\u60c5\u51b5 1 \u6bcf\u8f6e boruvka \u6700\u591a\u51fa\u73b0 m \u6b21\uff0c\u800c\u60c5\u51b5 2 \u53ea\u80fd\u4ece\u60c5\u51b5 1 \u8df3\u8fc7\u53bb\uff0c\n                // \u56e0\u6b64\u60c5\u51b5 2 \u6bcf\u8f6e\u4e5f\u6700\u591a\u51fa\u73b0 m \u6b21\u3002\n                // \u6240\u4ee5\u8fd9\u4e00\u6bb5\u4ee3\u7801\u7684\u590d\u6742\u5ea6\u4e5f\u662f\u6bcf\u8f6e O(m) \u7684\u3002\n                for (int j = pre[i]; j &gt;= 0; ) {\n                    // \u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u70b9\uff0c\u901a\u8fc7 pre[j] \u76f4\u63a5\u8df3\n                    if (r == findroot(j)) j = pre[j];\n                    // \u548c j \u6709\u7279\u6b8a\u8fb9\u76f8\u8fde\uff0c\u4e0d\u80fd\u8003\u8651\u8fd9\u4e2a\u70b9\n                    else if (V[i].e.count(j)) j--;\n                    else {\n                        // \u627e\u5230\u4e86\n                        int val = V[i].L - V[j].R;\n                        if (val &lt; len[r]) best[r] = j, len[r] = val;\n                        break;\n                    }\n                }\n                // \u5bfb\u627e\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u548c\u5b83\u6ca1\u6709\u8fde\u7279\u6b8a\u8fb9\uff0c\u4e14\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u5185\u7684\u70b9\uff0c\u4e0e\u4e0a\u9762\u7c7b\u4f3c\u7684\u903b\u8f91\n                for (int j = nxt[i]; j &lt; n; ) {\n                    if (r == findroot(j)) j = nxt[j];\n                    else if (V[i].e.count(j)) j++;\n                    else {\n                        int val = V[j].L - V[i].R;\n                        if (val &lt; len[r]) best[r] = j, len[r] = val;\n                        break;\n                    }\n                }\n            } else {\n                // \u8fde\u7eed\u70b9\uff0c\u8003\u8651 pre[i] \u548c nxt[i] \u54ea\u4e2a\u66f4\u597d\u5373\u53ef\n                int j = pre[i];\n                if (j &gt;= 0) {\n                    int val = V[i].L - V[j].R;\n                    if (val &lt; len[r]) best[r] = j, len[r] = val;\n                }\n                j = nxt[i];\n                if (j &lt; n) {\n                    int val = V[j].L - V[i].R;\n                    if (val &lt; len[r]) best[r] = j, len[r] = val;\n                }\n            }\n        }\n\n        // \u628a\u8fd9\u4e00\u8f6e\u6211\u4eec\u9009\u4e0a\u7684\u8fb9\u8fde\u63a5\u4e00\u4e0b\n        for (int i = 0; i &lt; n; i++) if (best[i] &gt;= 0) {\n            int x = findroot(i), y = findroot(best[i]);\n            if (x == y) continue;\n            root[x] = y;\n            ans += len[i];\n            comp--;\n        }\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-guangdong/m/","title":"M - \u8ba1\u7b97\u51e0\u4f55","text":""},{"location":"2023-provincial-guangdong/m/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5e7f\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738719/295 (6.4%)"},{"location":"2023-provincial-guangdong/m/#_2","title":"\u9898\u89e3","text":"<p>\u679a\u4e3e\u7528\u4e8e\u5207\u5f00\u5927\u591a\u8fb9\u5f62\u7684\u9876\u70b9 \\(i\\) \u548c \\(j\\)\uff0c\u95ee\u9898\u53d8\u4e3a\u5982\u4f55\u5feb\u901f\u8ba1\u7b97\u4e24\u4e2a\u5c0f\u591a\u8fb9\u5f62\u7684\u76f4\u5f84\u3002\u663e\u7136\u4e24\u4e2a\u5c0f\u591a\u8fb9\u5f62\u4e5f\u90fd\u662f\u51f8\u591a\u8fb9\u5f62\u3002</p> <p>\u56e0\u4e3a\u51f8\u591a\u8fb9\u5f62\u7684\u76f4\u5f84\u4e00\u5b9a\u662f\u67d0\u4e24\u4e2a\u9876\u70b9\u7684\u8fde\u7ebf\uff08\u521d\u4e2d\u51e0\u4f55\u8bc1\u660e\u9898\uff0c\u8bf7\u8bfb\u8005\u81ea\u884c\u5b8c\u6210\uff09\uff0c\u7ef4\u62a4 \\(f(i, j)\\) \u8868\u793a\u7b2c \\(i\\) \u4e2a\u9876\u70b9\u5230\u7b2c \\(j\\) \u4e2a\u9876\u70b9\u4e4b\u95f4\uff0c\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb\u7684\u5e73\u65b9\uff08\u5982\u679c \\(i &gt; j\\) \u90a3\u5c31\u662f\u9876\u70b9 \\(i, i + 1, \\cdots, n, 1, 2, \\cdots, j\\) \u4e4b\u95f4\u7684\u6700\u5927\u8ddd\u79bb\uff09\uff0c\u4ee4 \\(\\text{dis}(i, j)\\) \u8868\u793a\u9876\u70b9 \\(i\\) \u548c \\(j\\) \u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5bb9\u6613\u5f97\u5230\u533a\u95f4 dp \u65b9\u7a0b</p> \\[ f(i, j) = \\max \\{ f(i + 1, j), f(i, j - 1), \\text{dis}^2(i, j) \\} \\] <p>\u521d\u503c \\(f(i, i + 1) = \\text{dis}^2(i, i + 1)\\)\u3002</p> <p>\u4e24\u4e2a\u5c0f\u591a\u8fb9\u5f62\u7684\u76f4\u5f84\u5e73\u65b9\u548c\u5373\u4e3a \\(f(i, j) + f(j, i)\\)\uff0c\u53d6\u6700\u5c0f\u503c\u4e3a\u7b54\u6848\u5373\u53ef\u3002</p> <p>\u5f53\u7136\uff0c\u8981\u6c42\u9876\u70b9 \\(i\\) \u548c \\(j\\) \u7684\u8fde\u7ebf\u5207\u5230\u51f8\u591a\u8fb9\u5f62\u5185\u90e8\u3002\u6839\u636e\u51f8\u591a\u8fb9\u5f62\u7684\u6027\u8d28\uff0c\u8fd9\u7b49\u4ef7\u4e8e\u9876\u70b9 \\(j\\) \u4e0d\u80fd\u5728\u9876\u70b9 \\(i\\) \u548c \\((i + 1)\\) \u7684\u8fde\u7ebf\u4e0a\uff0c\u4e5f\u4e0d\u80fd\u5728\u9876\u70b9 \\(i\\) \u548c \\((i - 1)\\) \u7684\u8fde\u7ebf\u4e0a\u3002\u7b97\u51fa\u53c9\u79ef\u8fdb\u884c\u5224\u65ad\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n^2)\\)\u3002</p>"},{"location":"2023-provincial-guangdong/m/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 5e3)\nusing namespace std;\n\nint n;\nlong long ans, X[MAXN], Y[MAXN];\n\nlong long f[MAXN][MAXN];\n\nlong long cross(long long x1, long long y1, long long x2, long long y2) {\n    return x1 * y2 - x2 * y1;\n}\n\nlong long dis2(int i, int j) {\n    return (X[i] - X[j]) * (X[i] - X[j]) + (Y[i] - Y[j]) * (Y[i] - Y[j]);\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 0; i &lt; n; i++) scanf(\"%lld%lld\", &amp;X[i], &amp;Y[i]);\n\n    // \u533a\u95f4 dp\n    for (int i = 0; i &lt; n; i++) {\n        int j = (i + 1) % n;\n        f[i][j] = dis2(i, j);\n    }\n    for (int len = 3; len &lt;= n; len++) for (int i = 0; i &lt; n; i++) {\n        int j = (i + len - 1) % n;\n        f[i][j] = max({f[(i + 1) % n][j], f[i][(j - 1 + n) % n], dis2(i, j)});\n    }\n\n    ans = 9e18;\n    for (int i = 0; i &lt; n; i++) {\n        int nxt = (i + 1) % n, pre = (i - 1 + n) % n;\n        for (int j = 0; j &lt; n; j++) if (i != j) {\n            // \u70b9 j \u4e0d\u80fd\u5728\u8fde\u63a5 i \u548c (i + 1) \u7684\u76f4\u7ebf\u4e0a\uff0c\u5426\u5219\u8fd9\u6761\u7ebf\u65e0\u6cd5\u5207\u5230\u591a\u8fb9\u5f62\u5185\u90e8\n            long long c1 = cross(X[j] - X[i], Y[j] - Y[i], X[nxt] - X[i], Y[nxt] - Y[i]);\n            // \u70b9 j \u4e0d\u80fd\u5728\u8fde\u63a5 i \u548c (i - 1) \u7684\u76f4\u7ebf\u4e0a\uff0c\u5426\u5219\u8fd9\u6761\u7ebf\u65e0\u6cd5\u5207\u5230\u591a\u8fb9\u5f62\u5185\u90e8\n            long long c2 = cross(X[j] - X[i], Y[j] - Y[i], X[pre] - X[i], Y[pre] - Y[i]);\n            if (c1 == 0 || c2 == 0) continue;\n            ans = min(ans, f[i][j] + f[j][i]);\n        }\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/","title":"2023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2023-provincial-shandong/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2023/06/04 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ | \u6d1b\u8c37 \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2023-provincial-shandong/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 233, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 33, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 30, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 13, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 111, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 22, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 43, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 14, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 187, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 28, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 239, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 37, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 12, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 105, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 20, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 11, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 47, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 57, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 37, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 47, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 20, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2023-provincial-shandong/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2023-provincial-shandong/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2023-provincial-shandong/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":"<ul> <li>A - \u8ba2\u5355</li> <li>B - \u5efa\u7b51\u516c\u53f8</li> <li>C - \u5b57\u5178\u6811</li> <li>D - \u8d1f\u91cd\u8d8a\u91ce</li> <li>E - \u6570\u5b66\u95ee\u9898</li> <li>F - \u591a\u5f69\u7684\u7ebf\u6bb5</li> <li>G - \u5339\u914d</li> <li>H - \u8bf7\u5c0f\u5fc3 2</li> <li>I - \u4e09\u53ea\u9ab0\u5b50</li> <li>J - \u4e0d\u662f\u4e00\u9053\u8def\u5f84\u67e5\u8be2\u95ee\u9898</li> <li>K - \u56f0\u96be\u7684\u6784\u9020\u9898</li> <li>L - \u8c1c\u9898\uff1a\u66f2\u5c3a</li> <li>M - \u8ba1\u7b97\u51e0\u4f55</li> </ul>"},{"location":"2023-provincial-shandong/a/","title":"A - \u8ba2\u5355","text":""},{"location":"2023-provincial-shandong/a/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387266/276 (96.4%)"},{"location":"2023-provincial-shandong/a/#_2","title":"\u9898\u89e3","text":"<p>\u5c06\u6240\u6709\u8ba2\u5355\u6309 \\(a_i\\) \u6392\u5e8f\uff0c\u68c0\u67e5\u6392\u5e8f\u540e\u7684\u8ba2\u5355 \\(i\\) \u4e4b\u524d\uff0c\u5b58\u8d27\u91cf\u589e\u52a0 \\(k \\times (a_i - a_{i - 1})\\) \u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\uff0c\u4e3b\u8981\u662f\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2023-provincial-shandong/a/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 100\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\nlong long K;\npii A[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%lld\", &amp;n, &amp;K);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d%d\", &amp;A[i].first, &amp;A[i].second);\n    // \u8ba2\u5355\u6309\u54ea\u5929\u4ea4\u4ed8\u6392\u5e8f\n    sort(A + 1, A + n + 1);\n\n    int last = 0;\n    long long have = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        // \u8ba1\u7b97\u589e\u52a0\u7684\u5b58\u8d27\u91cf\n        have += (A[i].first - last) * K;\n        // \u5224\u65ad\u5b58\u8d27\u662f\u5426\u8db3\u591f\n        if (have &gt;= A[i].second) have -= A[i].second;\n        else { printf(\"No\\n\"); return; }\n        last = A[i].first;\n    }\n    printf(\"Yes\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/b/","title":"B - \u5efa\u7b51\u516c\u53f8","text":""},{"location":"2023-provincial-shandong/b/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738743/276 (15.6%)"},{"location":"2023-provincial-shandong/b/#_2","title":"\u9898\u89e3","text":"<p>\u672c\u9898\u7c7b\u4f3c\u4e8e\u62d3\u6251\u6392\u5e8f\u3002</p> <p>\u6211\u4eec\u7ef4\u62a4\u6bcf\u9879\u5de5\u7a0b\u8fd8\u6709\u51e0\u6761\u8981\u6c42\u6ca1\u6709\u6ee1\u8db3\uff0c\u5e76\u5c06\u4e0d\u540c\u5de5\u79cd\u7684\u8981\u6c42\u5206\u522b\u7ef4\u62a4\u3002\u6240\u6709\u8981\u6c42\u90fd\u88ab\u6ee1\u8db3\u7684\u5de5\u7a0b\u5c06\u52a0\u5165\u961f\u5217\u3002</p> <p>\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u9879\u5de5\u7a0b\u540e\uff0c\u6211\u4eec\u4f1a\u83b7\u5f97\u8be5\u5de5\u7a0b\u7684\u5956\u52b1\u3002\u5f53\u5de5\u79cd\u4e3a \\(t\\) \u7684\u5458\u5de5\u52a0\u5165\u516c\u53f8\u540e\uff0c\u6211\u4eec\u68c0\u67e5\u548c\u5de5\u79cd \\(t\\) \u6709\u5173\u7684\u4eba\u6570\u6700\u5c11\u7684\u672a\u6ee1\u8db3\u9700\u6c42\u3002\u5982\u679c\u8fd9\u9879\u9700\u6c42\u88ab\u6ee1\u8db3\u4e86\uff0c\u5219\u5bf9\u5e94\u5de5\u7a0b\u7684\u8981\u6c42\u6570\u51cf\u4e00\u3002\u8981\u6c42\u6570\u51cf\u5c11\u4e3a\u96f6\u7684\u5de5\u7a0b\u7ee7\u7eed\u52a0\u5165\u961f\u5217\u3002</p> <p>\u7b54\u6848\u5c31\u662f\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u7684\u5de5\u7a0b\u6570\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\uff0c\u4e3b\u8981\u662f\u6bcf\u6b21\u62ff\u51fa\u201c\u4eba\u6570\u6700\u5c11\u7684\u9700\u6c42\u201d\u9700\u8981\u9884\u5148\u6392\u5e8f\u6216\u4f7f\u7528\u5806\u7b49\u6570\u636e\u7ed3\u6784\u3002</p>"},{"location":"2023-provincial-shandong/b/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint g, n, A[MAXN + 10][2];\n\n// M[i] \u8868\u793a\u7b2c i \u9879\u5de5\u7a0b\u8fd8\u6709\u51e0\u6761\u8981\u6c42\u672a\u6ee1\u8db3\nint M[MAXN + 10];\n// B[i] \u8868\u793a\u7b2c i \u9879\u5de5\u7a0b\u7684\u5956\u52b1\nvector&lt;pii&gt; B[MAXN + 10];\n\n// mp[i] \u662f\u4e00\u4e2a\u6309\u4eba\u6570\u6392\u5e8f\u7684\u5c0f\u6839\u5806\uff0c\u7ef4\u62a4\u4e86\u4e0e\u5de5\u79cd i \u6709\u5173\u7684\u672a\u6ee1\u8db3\u9700\u6c42\nunordered_map&lt;int, priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt;&gt; mp;\n// have[i] \u8868\u793a\u516c\u53f8\u73b0\u6709\u5de5\u79cd i \u7684\u5458\u5de5\u6570\u91cf\nunordered_map&lt;int, long long&gt; have;\nqueue&lt;int&gt; q;\n\n// \u516c\u53f8\u589e\u52a0\u5de5\u79cd t \u7684\u5458\u5de5\u5171 u \u540d\nvoid add(int t, int u) {\n    long long &amp;val = have[t];\n    val += u;\n    priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; &amp;pq = mp[t];\n    // \u770b\u54ea\u4e9b\u548c\u5de5\u79cd t \u6709\u5173\u7684\u9700\u6c42\u88ab\u6ee1\u8db3\u4e86\n    while (!pq.empty()) {\n        pii p = pq.top();\n        if (p.first &gt; val) break;\n        pq.pop();\n        // \u5de5\u7a0b\u6240\u6709\u8981\u6c42\u90fd\u88ab\u6ee1\u8db3\uff0c\u52a0\u5165\u961f\u5217\n        if ((--M[p.second]) == 0) q.push(p.second);\n    }\n}\n\nint main() {\n    scanf(\"%d\", &amp;g); assert(g &gt;= 1);\n    for (int i = 1; i &lt;= g; i++) scanf(\"%d%d\", &amp;A[i][0], &amp;A[i][1]);\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;M[i]);\n        for (int j = 1; j &lt;= M[i]; j++) {\n            int a, b; scanf(\"%d%d\", &amp;a, &amp;b);\n            mp[a].push(pii(b, i));\n        }\n        int K; scanf(\"%d\", &amp;K);\n        for (int j = 1; j &lt;= K; j++) {\n            int c, d; scanf(\"%d%d\", &amp;c, &amp;d);\n            B[i].push_back(pii(c, d));\n        }\n    }\n\n    // \u628a\u6ca1\u6709\u4efb\u4f55\u8981\u6c42\u7684\u5de5\u7a0b\u52a0\u5165\u961f\u5217\n    for (int i = 1; i &lt;= n; i++) if (M[i] == 0) q.push(i);\n    // \u516c\u53f8\u4e00\u5f00\u59cb\u5c31\u6709\u7684\u5458\u5de5\n    for (int i = 1; i &lt;= g; i++) add(A[i][0], A[i][1]);\n\n    int ans = 0;\n    // \u7c7b\u4f3c\u62d3\u6251\u6392\u5e8f\uff0c\u4e0d\u65ad\u4ece\u961f\u5217\u4e2d\u62ff\u51fa\u5de5\u7a0b\uff0c\u5e76\u83b7\u5f97\u5956\u52b1\n    while (!q.empty()) {\n        int idx = q.front(); q.pop();\n        ans++;\n        for (pii p : B[idx]) add(p.first, p.second);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/c/","title":"C - \u5b57\u5178\u6811","text":""},{"location":"2023-provincial-shandong/c/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73872/276 (0.7%)"},{"location":"2023-provincial-shandong/c/#_2","title":"\u9898\u89e3","text":"<p>\u672c\u9898\u601d\u8def\u7c7b\u4f3c\u4e8e\u540e\u7f00\u6570\u7ec4\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002</p> <p>\u5bf9\u4e8e\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u8003\u8651\u5982\u4f55\u5c06\u5b57\u6bcd\u5206\u7ed9\u5b83\u7684\u6240\u6709\u5b50\u6811\u3002\u663e\u7136\uff0c<code>a</code> \u5e94\u8be5\u5206\u7ed9\u6700\u5c0f\u7684\u5b50\u6811\uff0c<code>b</code> \u5e94\u8be5\u5206\u7ed9\u7b2c\u4e8c\u5c0f\u7684\u5b50\u6811\uff0c...</p> <p>\u8fd9\u91cc\uff0c\u5b50\u6811 \\(i\\) \u5c0f\u4e8e\u5b50\u6811 \\(j\\)\uff0c\u6307\u7684\u662f\u5b50\u6811 \\(i\\) \u91cc\u6700\u5c0f\u7684\u5173\u952e\u5b57\u7b26\u4e32\u6bd4\u5b50\u6811 \\(j\\) \u91cc\u7684\u5c0f\uff0c\u5982\u679c\u4e00\u6837\u5c31\u6bd4\u7b2c\u4e8c\u5c0f\u7684\u5173\u952e\u5b57\u7b26\u4e32... \u5982\u679c\u67d0\u4e2a\u5b50\u6811\u91cc\u7684\u5b57\u7b26\u4e32\u5df2\u7ecf\u6bd4\u5b8c\u4e86\uff0c\u90a3\u4e48\u54ea\u4e2a\u5b50\u6811\u6709\u66f4\u591a\u7684\u5b57\u7b26\u4e32\uff0c\u54ea\u4e2a\u5b50\u6811\u5c31\u66f4\u5c0f\u3002</p> <p>\u5047\u8bbe\u5bf9\u4e8e\u6bcf\u68f5\u5b50\u6811\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e00\u4e2a\u503c <code>rank[i]</code>\uff0c<code>rank[i]</code> \u8d8a\u5c0f\u7684\u5b50\u6811\u8d8a\u5c0f\u3002\u56e0\u4e3a\u540c\u4e00\u5c42\u7684\u5b50\u6811\u4f1a\u5728\u5b83\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u8fdb\u884c\u6bd4\u8f83\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u6309\u5c42\u7ed9\u5b50\u6811\u7b97 rank\u3002</p> <p>\u5982\u4e0a\u6240\u8ff0\uff0c\u5b50\u6811\u7684\u6392\u5e8f\u4f9d\u636e\u662f\uff1a\u628a\u6839\u8282\u70b9\u7684\u6240\u6709\u5b50\u8282\u70b9\u7684 rank \u653e\u8fdb\u4e00\u4e2a <code>vector</code> \u91cc\uff0c\u5e76\u628a\u8be5 <code>vector</code> \u6392\u5e8f\u3002\u8fd9\u6837\uff0c<code>vector</code> \u91cc\u7684\u7b2c \\(i\\) \u4e2a\u5143\u7d20\u5c31\u662f\u8be5\u5b50\u6811\u4e2d\u6240\u6709\u4ee5\u7b2c \\(i\\) \u4e2a\u5b57\u6bcd\u5f00\u5934\u7684\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u4e24\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\u5173\u7cfb\u53ea\u8981\u6bd4\u8f83 <code>vector</code> \u7684\u5b57\u5178\u5e8f\u5927\u5c0f\u5373\u53ef\u3002\u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a <code>vector</code> \u662f\u53e6\u4e00\u4e2a <code>vector</code> \u7684\u524d\u7f00\u65f6\uff0c\u66f4\u957f\u7684 <code>vector</code> \u5e94\u8be5\u6392\u5728\u66f4\u524d\u9762\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n \\log n)\\)\u3002</p>"},{"location":"2023-provincial-shandong/c/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 2e5)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\ntypedef pair&lt;vector&lt;int&gt;, int&gt; pvi;\n\nint n, m;\nbool flag[MAXN + 10];\nchar ans[MAXN + 10];\n\nvector&lt;int&gt; e[MAXN + 10];\n// dep[d]\uff1a\u6240\u6709\u6df1\u5ea6\u4e3a d \u7684\u8282\u70b9\nvector&lt;int&gt; dep[MAXN + 10];\n// rnk[x]\uff1a\u8282\u70b9 x \u7684 rank\nint rnk[MAXN + 10];\n\n// \u901a\u8fc7 dfs \u7b97\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u6df1\u5ea6\nvoid dfs1(int sn, int d) {\n    dep[d].push_back(sn);\n    for (int fn : e[sn]) dfs1(fn, d + 1);\n}\n\n// \u7b97\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 rank \u4e4b\u540e\u518d\u6b21\u8fdb\u884c dfs\n// \u7ed9\u5f53\u524d\u8282\u70b9\u8fde\u5411\u5b50\u8282\u70b9\u7684\u8fb9\u6309\u5b50\u8282\u70b9 rank \u5927\u5c0f\u586b\u5165\u5b57\u6bcd\n// \u53e6\u5916\u9898\u76ee\u8981\u6c42\u6ee1\u8db3\u6761\u4ef6\u4ee5\u540e\uff0c\u7b54\u6848\u5b57\u5178\u5e8f\u5c3d\u53ef\u80fd\u5c0f\uff0c\u56e0\u6b64 rank \u4e00\u6837\u7684\u5b50\u8282\u70b9\uff0c\u7f16\u53f7\u66f4\u5c0f\u7684\u8981\u6392\u524d\u9762\nvoid dfs2(int sn) {\n    vector&lt;pii&gt; vec;\n    for (int fn : e[sn]) vec.push_back(pii(rnk[fn], fn));\n    sort(vec.begin(), vec.end());\n    for (int i = 0; i &lt; vec.size(); i++) ans[vec[i].second] = i + 'a';\n    for (int fn : e[sn]) dfs2(fn);\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 0; i &lt;= n; i++) e[i].clear();\n    for (int i = 1; i &lt;= n; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        e[x].push_back(i);\n    }\n    memset(flag, 0, sizeof(bool) * (n + 3));\n    for (int i = 1; i &lt;= m; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        flag[x] = true;\n    }\n\n    for (int i = 0; i &lt;= n; i++) dep[i].clear();\n    dfs1(0, 0);\n\n    // \u6309\u6df1\u5ea6\u7ed9\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u5206\u522b\u7b97 rank\n    for (int i = n; i &gt;= 0; i--) {\n        vector&lt;pvi&gt; vec;\n        // \u6bcf\u68f5\u8282\u70b9\u7684\u6392\u5e8f\u4f9d\u636e\u662f\u6240\u6709\u5b50\u8282\u70b9\u7684 rank \u5f62\u6210\u7684\u6709\u5e8f vector\n        for (int sn : dep[i]) {\n            vector&lt;int&gt; ch;\n            if (flag[sn]) ch.push_back(0);\n            for (int fn : e[sn]) ch.push_back(rnk[fn]);\n            sort(ch.begin(), ch.end());\n            vec.push_back(pvi(ch, sn));\n        }\n        sort(vec.begin(), vec.end(), [](pvi &amp;a, pvi &amp;b) {\n            for (int i = 0; i &lt; a.first.size() &amp;&amp; i &lt; b.first.size(); i++) {\n                if (a.first[i] != b.first[i]) return a.first[i] &lt; b.first[i];\n            }\n            return a.first.size() &gt; b.first.size();\n        });\n        // \u7b97\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 rank\uff0c\u4e00\u6837\u7684\u6709\u5e8f vector \u5c31\u662f\u4e00\u6837\u7684 rank\n        int now = 1;\n        for (int j = 0; j &lt; vec.size(); j++) {\n            rnk[vec[j].second] = now;\n            if (j + 1 &lt; vec.size() &amp;&amp; vec[j].first != vec[j + 1].first) now++;\n        }\n    }\n\n    dfs2(0);\n    ans[n + 1] = 0;\n    printf(\"%s\\n\", ans + 1);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/d/","title":"D - \u8d1f\u91cd\u8d8a\u91ce","text":""},{"location":"2023-provincial-shandong/d/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387133/276 (48.2%)"},{"location":"2023-provincial-shandong/d/#_2","title":"\u9898\u89e3","text":"<p>\u4e8c\u5206\u6574\u4e2a\u961f\u4f0d\u7684\u901f\u5ea6\u81f3\u5c11\u4e3a \\(x\\)\uff0c\u63a5\u4e0b\u6765\u8003\u8651\u5982\u4f55\u68c0\u9a8c\u7b54\u6848\u3002</p> <p>\u5982\u679c\u961f\u5458 \\(i\\) \u7684\u901f\u5ea6\u5927\u4e8e\u7b49\u4e8e \\(x\\)\uff0c\u5219\u81f3\u591a\u53ef\u4ee5\u80cc\u8d77\u4f53\u91cd\u4e3a \\((v_i - x + w_i)\\) \u7684\u961f\u5458\u3002\u5982\u679c\u961f\u5458   \u7684\u901f\u5ea6\u5c0f\u4e8e  \uff0c\u5219\u5fc5\u987b\u88ab\u522b\u4eba\u80cc\u8d1f\u3002\u56e0\u6b64\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a</p> <p>\u6709 \\(p\\) \u4e2a\u4eba\u548c \\(q\\) \u4ef6\u5de5\u4f5c\uff0c\u7b2c \\(i\\) \u4e2a\u4eba\u7684\u80fd\u529b\u503c\u4e3a \\(a_i\\)\uff0c\u7b2c \\(i\\) \u9879\u5de5\u4f5c\u7684\u96be\u5ea6\u4e3a \\(b_i\\)\uff0c\u53ea\u6709 \\(a_i \\ge b_j\\) \u624d\u80fd\u8ba9\u7b2c \\(i\\) \u4e2a\u4eba\u505a\u7b2c \\(j\\) \u9879\u5de5\u4f5c\u3002\u6bcf\u4e2a\u4eba\u6700\u591a\u505a\u4e00\u9879\u5de5\u4f5c\uff0c\u95ee\u6240\u6709\u5de5\u4f5c\u662f\u5426\u90fd\u80fd\u88ab\u5b8c\u6210\u3002</p> <p>\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684\u8d2a\u5fc3\u95ee\u9898\u3002\u9996\u5148\u9009\u51fa\u80fd\u529b\u503c\u6700\u9ad8\u7684 \\(q\\) \u4e2a\u4eba\uff0c\u7136\u540e\u5c06\u7b2c \\(i\\) \u96be\u7684\u5de5\u4f5c\u6d3e\u7ed9\u80fd\u529b\u503c\u7b2c \\(i\\) \u9ad8\u7684\u4eba\u5373\u53ef\u3002</p> <p>\u5982\u679c\u9884\u5148\u5c06\u961f\u5458\u5206\u522b\u6309 \\((v_i + w_i)\\) \u4ee5\u53ca \\(w_i\\) \u6392\u5e8f\uff0c\u672c\u9898\u7684\u590d\u6742\u5ea6\u53ef\u4ee5\u505a\u5230 \\(\\mathcal{O}(n\\log n + n\\log(\\max v_i))\\)\u3002</p>"},{"location":"2023-provincial-shandong/d/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\ntypedef pair&lt;long long, long long&gt; pll;\n\nint n;\n\npll A[MAXN + 10], B[MAXN + 10];\n\n// \u68c0\u9a8c\u7b54\u6848 x\uff0c\u8f6c\u6362\u6210\u8d2a\u5fc3\nbool check(long long x) {\n    vector&lt;long long&gt; P, Q;\n    // \u8ba1\u7b97\u54ea\u4e9b\u961f\u5458\u53ef\u4ee5\u80cc\u522b\u4eba\uff0c\u5373\u4e3a\u8d2a\u5fc3\u95ee\u9898\u4e2d\u6bcf\u4e2a\u4eba\u7684\u80fd\u529b\u503c\n    for (int i = 1; i &lt;= n; i++)\n        if (A[i].first &gt;= x) P.push_back(A[i].first + A[i].second - x);\n    // \u8ba1\u7b97\u54ea\u4e9b\u961f\u5458\u9700\u8981\u522b\u4eba\u80cc\uff0c\u5373\u4e3a\u8d2a\u5fc3\u95ee\u9898\u4e2d\u5de5\u4f5c\u7684\u96be\u5ea6\n    for (int i = 1; i &lt;= n; i++)\n        if (B[i].first &lt; x) Q.push_back(B[i].second);\n    // \u56e0\u4e3a A \u548c B \u5df2\u7ecf\u4ece\u5927\u5230\u5c0f\u6392\u8fc7\u5e8f\u4e86\uff0c\u6240\u4ee5 P \u548c Q \u4e5f\u5df2\u7ecf\u662f\u6709\u5e8f\u7684\uff0c\u4e0d\u9700\u8981 sort\n    // \u628a\u7b2c i \u96be\u7684\u5de5\u4f5c\u5206\u7ed9\u80fd\u529b\u503c\u7b2c i \u5927\u7684\u4eba\n    if (P.size() &lt; Q.size()) return false;\n    for (int i = 0; i &lt; Q.size(); i++) if (P[i] &lt; Q[i]) return false;\n    return true;\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        long long v, w; scanf(\"%lld%lld\", &amp;v, &amp;w);\n        A[i] = B[i] = pll(v, w);\n    }\n    // \u5c06\u961f\u5458\u6309 v_i + w_i \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8bb0\u5728 A \u91cc\n    sort(A + 1, A + n + 1, [](pll &amp;a, pll &amp;b) {\n        return a.first + a.second &gt; b.first + b.second;\n    });\n    // \u5c06\u961f\u5458\u6309 w_i \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u8bb0\u5728 B \u91cc\n    sort(B + 1, B + n + 1, [](pll &amp;a, pll &amp;b) {\n        return a.second &gt; b.second;\n    });\n\n    // \u4e8c\u5206\u7b54\u6848\n    long long head = A[1].first, tail = A[1].first;\n    for (int i = 2; i &lt;= n; i++) {\n        head = min(head, A[i].first);\n        tail = max(tail, A[i].first);\n    }\n    while (head &lt; tail) {\n        long long mid = (head + tail + 1) &gt;&gt; 1;\n        if (check(mid)) head = mid;\n        else tail = mid - 1;\n    }\n    printf(\"%lld\\n\", head);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/e/","title":"E - \u6570\u5b66\u95ee\u9898","text":""},{"location":"2023-provincial-shandong/e/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738757/276 (20.7%)"},{"location":"2023-provincial-shandong/e/#_2","title":"\u9898\u89e3","text":"<p>\u663e\u7136\u4e00\u5b9a\u5148\u8fdb\u884c\u9664\u6cd5\uff0c\u7136\u540e\u518d\u8fdb\u884c\u4e58\u6cd5\uff0c\u4e0d\u4f1a\u628a\u65b0\u4e58\u4e0a\u53bb\u7684\u4e1c\u897f\u518d\u9664\u6389\u3002</p> <p>\u8fdb\u884c \\(p\\) \u6b21\u4e58\u6cd5\u64cd\u4f5c\u540e\uff0c\\(n\\) \u7684\u8303\u56f4\u662f \\([k^p \\times n_0, k^p \\times (n_0 + 1) - 1]\\)\uff08\u5176\u4e2d \\(n_0\\) \u662f \\(n\\) \u5b8c\u6210\u9664\u6cd5\u64cd\u4f5c\u65f6\u7684\u503c\uff09\uff0c\u53ea\u8981\u8fd9\u4e2a\u8303\u56f4\u91cc\u9762\u5305\u62ec \\(m\\) \u7684\u500d\u6570\u5373\u53ef\u505c\u6b62\u4e58\u6cd5\u64cd\u4f5c\u3002\u56e0\u6b64\u4e58\u6cd5\u64cd\u4f5c\u81f3\u591a\u8fdb\u884c \\(\\log_k m\\) \u6b21\u3002</p> <p>\u6240\u4ee5\u6211\u4eec\u679a\u4e3e\u9664\u6cd5\u64cd\u4f5c\u8fdb\u884c\u51e0\u6b21\uff0c\u7136\u540e\u679a\u4e3e\u4e58\u6cd5\u64cd\u4f5c\u8fdb\u884c\u51e0\u6b21\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(\\log_k n \\times \\log_k m)\\)\u3002</p> <p>\u5982\u679c\u76f4\u63a5\u6309\u4e0a\u9762\u7684\u601d\u8def\u5b9e\u73b0\uff0c\u53ef\u80fd\u4e2d\u95f4\u7ed3\u679c\u4f1a\u8d85\u51fa <code>long long</code> \u7684\u8303\u56f4\u3002\u53ef\u4ee5\u9009\u62e9\u7528 <code>__int128</code> \u5b9e\u73b0\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728 \\(\\bmod m\\) \u7684\u610f\u4e49\u4e0b\u8ba1\u7b97\uff0c\u8be6\u89c1\u53c2\u8003\u4ee3\u7801\u3002</p>"},{"location":"2023-provincial-shandong/e/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nlong long n, K, m, a, b;\n\nvoid solve() {\n    scanf(\"%lld%lld%lld%lld%lld\", &amp;n, &amp;K, &amp;m, &amp;a, &amp;b);\n    if (n % m == 0) { printf(\"0\\n\"); return; }\n    if (K == 1) { printf(\"-1\\n\"); return; }\n\n    long long ans = 1e18, cost = 0;\n    while (true) {\n        // base\uff1a\u4e58\u6cd5\u64cd\u4f5c\u4e4b\u540e\u7684\u8303\u56f4\u533a\u95f4\u5de6\u7aef\u70b9\n        // p\uff1a\u4e58\u6cd5\u64cd\u4f5c\u4e4b\u540e\u8303\u56f4\u533a\u95f4\u7684\u957f\u5ea6\n        long long base = n % m, p = 1;\n        for (int i = 0; ; i++) {\n            // \u8ddd\u79bb\u4e0b\u4e00\u4e2a m \u7684\u500d\u6570\u8fd8\u6709\u591a\u5c11\n            long long delta = (m - base) % m;\n            if (delta &lt; p) {\n                // \u8303\u56f4\u533a\u95f4\u8986\u76d6\u4e86 m \u7684\u500d\u6570\uff0c\u66f4\u65b0\u7b54\u6848\n                ans = min(ans, cost + i * a);\n                break;\n            }\n            // \u518d\u505a\u4e00\u6b21\u4e58\u6cd5\u64cd\u4f5c\n            base = base * K % m;\n            p *= K;\n        }\n        if (n == 0) break;\n        // \u679a\u4e3e\u9664\u6cd5\u64cd\u4f5c\u7684\u6b21\u6570\n        n /= K;\n        cost += b;\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/f/","title":"F - \u591a\u5f69\u7684\u7ebf\u6bb5","text":""},{"location":"2023-provincial-shandong/f/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73875/276 (1.8%)"},{"location":"2023-provincial-shandong/f/#_2","title":"\u9898\u89e3","text":""},{"location":"2023-provincial-shandong/f/#_3","title":"\u9519\u8bef\u505a\u6cd5","text":"<p>\u9996\u5148\u5206\u6790\u4e00\u79cd\u5e38\u89c1\u7684\u9519\u8bef\u505a\u6cd5\u3002\u4e00\u4e9b\u8bfb\u8005\u53ef\u80fd\u4f1a\u5c06\u6240\u6709\u7ebf\u6bb5\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u7ef4\u62a4 \\(f(i)\\) \u8868\u793a\u53ea\u8003\u8651\u524d \\(i\\) \u6761\u7ebf\u6bb5\uff0c\u4e14\u7b2c \\(i\\) \u6761\u7ebf\u6bb5\u5fc5\u9009\u6709\u51e0\u79cd\u65b9\u6cd5\u3002\u679a\u4e3e\u4e0a\u4e00\u6761\u9009\u62e9\u7684\u7ebf\u6bb5 \\(j\\)\uff0c\u5219\u9012\u63a8\u5f0f\u4e3a</p> \\[ f(i) = 1 + \\sum\\limits_{1 \\le j &lt; i, c_i = c_j} f(j) + \\sum\\limits_{1 \\le j &lt; i, c_i \\ne c_j, r_j &lt; l_i} f(j) \\] <p>\u5173\u4e8e\u8be5\u505a\u6cd5\u7684\u53cd\u4f8b\uff0c\u8003\u8651\u4e00\u6761\u84dd\u8272\u7ebf\u6bb5 \\([2, 3]\\) \u4ee5\u53ca\u4e24\u6761\u7ea2\u8272\u7ebf\u6bb5 \\([4, 5]\\) \u548c \\([1, 6]\\)\uff0c\u5219 \\(f(2) = 2\\)\uff08\u9009\u62e9 \\([4, 5]\\) \u65f6\uff0c\\([2, 3]\\) \u53ef\u9009\u53ef\u4e0d\u9009\uff09\uff0c\\(f(3) = 1 + f(2) = 3\\)\u3002\u7136\u800c \\(f(3)\\) \u6b63\u786e\u7684\u503c\u5e94\u8be5\u662f \\(2\\)\uff08\u9009\u62e9 \\([1, 6]\\) \u65f6\uff0c\\([4, 5]\\) \u53ef\u9009\u53ef\u4e0d\u9009\uff0c\\([2, 3]\\) \u4e00\u5b9a\u4e0d\u80fd\u9009\uff09\uff0c\u8fd9\u662f\u56e0\u4e3a \\(f(2)\\) \u5305\u542b\u7684\u4e24\u79cd\u9009\u6cd5\u5bf9\u4e8e \\(f(3)\\) \u5e76\u975e\u5168\u90e8\u6709\u6548\u3002</p>"},{"location":"2023-provincial-shandong/f/#_4","title":"\u6b63\u786e\u4f46\u590d\u6742\u5ea6\u8f83\u9ad8\u7684\u505a\u6cd5","text":"<p>\u9996\u5148\u4ecd\u7136\u5c06\u6240\u6709\u7ebf\u6bb5\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\u3002\u6839\u636e\u4e0a\u4e00\u8282\u7684\u5206\u6790\u53ef\u77e5\uff0c\u6211\u4eec\u4e0d\u80fd\u5c06\u6bcf\u6761\u7ebf\u6bb5\u5355\u72ec\u8003\u8651\uff0c\u800c\u662f\u8981\u8003\u8651\u989c\u8272\u76f8\u540c\u7684\u4e00\u6574\u7ec4\u7ebf\u6bb5\u3002\u6211\u4eec\u628a\u6240\u9009\u7ebf\u6bb5\u5206\u6210\u82e5\u5e72\u8fde\u7eed\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u5185\u7684\u7ebf\u6bb5\u989c\u8272\u90fd\u76f8\u540c\u3002</p> <p>\u4ee4 \\(f(i, c)\\) \u8868\u793a\u53ea\u8003\u8651\u524d \\(i\\) \u6761\u7ebf\u6bb5\uff0c\u4e14\u7b2c \\(i\\) \u6761\u7ebf\u6bb5\u5fc5\u9009\uff0c\u4e14\u7b2c \\(i\\) \u6761\u7ebf\u6bb5\u7684\u989c\u8272\u4e3a \\(c\\) \u7684\u65b9\u6848\u6570\u3002\u8f6c\u79fb\u65f6\uff0c\u6211\u4eec\u679a\u4e3e\u4e0a\u4e00\u6bb5\u7684\u7ec8\u70b9 \\(j\\)\uff08\\(j\\) \u7684\u989c\u8272\u5fc5\u987b\u548c \\(i\\) \u4e0d\u540c\uff09\uff0c\u5219\u8f6c\u79fb\u65b9\u7a0b\u4e3a</p> \\[ f(i, c) = \\sum\\limits_{j = 0}^{p_i} f(j, 1 - c) \\times 2^{g(i - 1, r_j + 1, c)} \\] <p>\u5176\u4e2d \\(p_i\\) \u8868\u793a\u6ee1\u8db3 \\(r_{p_i} &lt; l_i\\) \u7684\u6700\u5927\u4e0b\u6807\u3002\\(g(i - 1, r_j + 1, c)\\) \u8868\u793a\u524d \\((i - 1)\\) \u6761\u7ebf\u6bb5\u4e2d\uff0c\u5de6\u7aef\u70b9\u5927\u4e8e\u7b49\u4e8e \\((r_j + 1)\\)\uff0c\u4e14\u989c\u8272\u4e3a \\(c\\) \u7684\u7ebf\u6bb5\u6570\u91cf\u3002\u5f62\u8c61\u5730\u7406\u89e3\uff0c\u5c31\u662f\u4f4d\u4e8e\u4e0a\u4e00\u6bb5\u7ec8\u70b9\u53f3\u8fb9\uff0c\u4e14\u989c\u8272\u548c\u5f53\u524d\u7ebf\u6bb5\u4e00\u6837\u7684\u5176\u5b83\u7ebf\u6bb5\u968f\u4fbf\u9009\u3002</p> <p>\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u4ee4 \\(r_0 = 0\\)\uff0c\\(f(0, 0) = f(0, 1) = 1\\)\uff0c\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86\u521d\u503c\u7684\u95ee\u9898\u3002\u7b54\u6848\u5c31\u662f \\(1 + \\sum\\limits_{i = 1}^n f(i, c_i)\\)\u3002</p>"},{"location":"2023-provincial-shandong/f/#_5","title":"\u4f18\u5316\u590d\u6742\u5ea6","text":"<p>\u76f4\u63a5\u8ba1\u7b97\u8fd9\u4e2a dp \u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(n^2)\\) \u7684\uff0c\u8003\u8651\u4f18\u5316\u3002</p> <p>\u4ee4 \\(h(i, j, c) = f(j, c) \\times 2^{g(i, r_j + 1, 1 - c)}\\)\uff0c\u5219 dp \u65b9\u7a0b\u53ef\u4ee5\u6539\u5199\u4e3a</p> \\[ f(i, c) = \\sum\\limits_{j = 0}^{p_i} h(i - 1, j, 1 - c) \\] <p>\u6ce8\u610f\u5230 \\(g\\) \u6709\u4ee5\u4e0b\u9012\u63a8\u5173\u7cfb</p> \\[ \\begin{cases} g(i, r_j + 1, c) = g(i - 1, r_j + 1, c) + 1 &amp; \\text{if } 1 \\le j \\le p_i \\text{ and } c = c_i \\\\ g(i, r_j + 1, c) = g(i - 1, r_j + 1, c) &amp; \\text{otherwise} \\end{cases} \\] <p>\u5373</p> \\[ \\begin{cases} h(i, j, c) = 2h(i - 1, j, c) &amp; \\text{if } 1 \\le j \\le p_i \\text{ and } c = 1 - c_i \\\\ h(i, j, c) = h(i - 1, j, c) &amp; \\text{otherwise} \\end{cases} \\] <p>\u5f62\u8c61\u5730\u7406\u89e3\uff0c\u5c31\u662f\u5904\u7406\u5b8c\u7b2c \\(i\\) \u6761\u7ebf\u6bb5\u4e4b\u540e\uff0c\u5bf9\u4e8e\u6240\u6709\u4e0a\u4e00\u6bb5\u7684\u7ec8\u70b9\uff0c\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u7684\u7ebf\u6bb5\u6570\u91cf\u53c8\u589e\u52a0\u4e86\u4e00\u6761\u3002</p> <p>\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4 \\(h(i, j, c)\\) \u7684\u503c\u3002\u9700\u8981\u652f\u6301\u524d\u7f00\u4e58 \\(2\\)\uff0c\u5355\u70b9\u8d4b\u503c\uff0c\u4ee5\u53ca\u524d\u7f00\u6c42\u548c\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\u3002</p>"},{"location":"2023-provincial-shandong/f/#_6","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MOD 998244353\nusing namespace std;\n\nint n;\nlong long ans;\n\nstruct Seg {\n    int l, r, c;\n} A[MAXN + 10];\n\nlong long sumo[2][MAXN * 4 + 10], lazy[2][MAXN * 4 + 10];\n\n// \u7ebf\u6bb5\u6811\u521d\u59cb\u5316\nvoid build(int tid, int id, int l, int r) {\n    if (l != r) {\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        build(tid, nxt, l, mid); build(tid, nxt | 1, mid + 1, r);\n    }\n    sumo[tid][id] = 0; lazy[tid][id] = 1;\n}\n\n// \u7ebf\u6bb5\u6811 lazy \u6807\u5fd7\u4e0b\u63a8\nvoid down(int tid, int id) {\n    long long &amp;p = lazy[tid][id];\n    if (p == 1) return;\n    int nxt = id &lt;&lt; 1;\n    sumo[tid][nxt] = sumo[tid][nxt] * p % MOD;\n    lazy[tid][nxt] = lazy[tid][nxt] * p % MOD;\n    sumo[tid][nxt | 1] = sumo[tid][nxt | 1] * p % MOD;\n    lazy[tid][nxt | 1] = lazy[tid][nxt | 1] * p % MOD;\n    p = 1;\n}\n\n// \u7ebf\u6bb5\u6811\u5355\u70b9\u52a0\u6cd5\nvoid add(int tid, int id, int l, int r, int pos, long long val) {\n    if (l == r) sumo[tid][id] = (sumo[tid][id] + val) % MOD;\n    else {\n        down(tid, id);\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (pos &lt;= mid) add(tid, nxt, l, mid, pos, val);\n        else add(tid, nxt | 1, mid + 1, r, pos, val);\n        sumo[tid][id] = (sumo[tid][nxt] + sumo[tid][nxt | 1]) % MOD;\n    }\n}\n\n// \u7ebf\u6bb5\u6811\u524d\u7f00 * 2\nvoid mul2(int tid, int id, int l, int r, int pos) {\n    if (r &lt;= pos) {\n        sumo[tid][id] = sumo[tid][id] * 2 % MOD;\n        lazy[tid][id] = lazy[tid][id] * 2 % MOD;\n    } else {\n        down(tid, id);\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        mul2(tid, nxt, l, mid, pos);\n        if (pos &gt; mid) mul2(tid, nxt | 1, mid + 1, r, pos);\n        sumo[tid][id] = (sumo[tid][nxt] + sumo[tid][nxt | 1]) % MOD;\n    }\n}\n\n// \u7ebf\u6bb5\u6811\u8be2\u95ee\u524d\u7f00\u548c\nlong long query(int tid, int id, int l, int r, int pos) {\n    if (r &lt;= pos) return sumo[tid][id];\n    else {\n        down(tid, id);\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        return (\n            query(tid, nxt, l, mid, pos) +\n            (pos &gt; mid ? query(tid, nxt | 1, mid + 1, r, pos) : 0)\n        ) % MOD;\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d%d%d\", &amp;A[i].l, &amp;A[i].r, &amp;A[i].c);\n    // \u6240\u6709\u533a\u95f4\u6309\u53f3\u7aef\u70b9\u6392\u5e8f\n    sort(A + 1, A + n + 1, [](Seg &amp;a, Seg &amp;b) {\n        return a.r &lt; b.r;\n    });\n    A[0].l = A[0].r = 0;\n\n    // dp \u521d\u503c\uff1af(0, 0) = f(0, 1) = 1\n    for (int k = 0; k &lt; 2; k++) build(k, 1, 0, n), add(k, 1, 0, n, 0, 1);\n    ans = 1;\n    for (int i = 1; i &lt;= n; i++) {\n        // \u4e8c\u5206\u627e\u5230\u53f3\u7aef\u70b9\u5c0f\u4e8e\u5f53\u524d\u7ebf\u6bb5\u5de6\u7aef\u70b9\u7684\u3001\u6700\u53f3\u8fb9\u7684\u7ebf\u6bb5\n        int head = 0, tail = i - 1;\n        while (head &lt; tail) {\n            int mid = (head + tail + 1) &gt;&gt; 1;\n            if (A[mid].r &lt; A[i].l) head = mid;\n            else tail = mid - 1;\n        }\n        // \u7b97\u51fa\u4ee5\u5f53\u524d\u7ebf\u6bb5\u4e3a\u7ed3\u5c3e\u7684\u65b9\u6848\u6570\n        long long val = query(A[i].c ^ 1, 1, 0, n, head);\n        // h(i, i, c_i) = f(i, c_i)\n        add(A[i].c, 1, 0, n, i, val);\n        // h(i, j, 1 - c_i) = 2h(i - 1, j, 1 - c_i) if 1 &lt;= j &lt;= p_i\n        mul2(A[i].c ^ 1, 1, 0, n, head);\n        ans = (ans + val) % MOD;\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/g/","title":"G - \u5339\u914d","text":""},{"location":"2023-provincial-shandong/g/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387215/276 (77.9%)"},{"location":"2023-provincial-shandong/g/#_2","title":"\u9898\u89e3","text":"<p>\u79fb\u9879\u5f97 \\(i - a_i = j - a_j\\)\u3002\u56e0\u6b64\u6240\u6709 \\((u - a_u)\\) \u4e3a\u76f8\u540c\u503c\u7684\u8282\u70b9 \\(u\\) \u7ec4\u6210\u4e00\u4e2a\u56e2\uff08\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u4e24\u4e24\u90fd\u6709\u8fde\u8fb9\u7684\u8fde\u901a\u5757\uff09\u3002\u56e2\u4e0e\u56e2\u4e4b\u95f4\u56e0\u4e3a\u6ca1\u6709\u8fde\u8fb9\uff0c\u7b54\u6848\u4e0d\u4e92\u76f8\u5f71\u54cd\uff0c\u56e0\u6b64\u53ef\u4ee5\u6bcf\u4e2a\u56e2\u5355\u72ec\u8ba1\u7b97\u7b54\u6848\u5e76\u52a0\u8d77\u6765\u3002</p> <p>\u7531\u4e8e\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u5b9e\u9645\u4e0a\u662f\u4e24\u4e2a\u7aef\u70b9\u7684\u70b9\u6743\u4e4b\u548c\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e00\u4e2a\u56e2\uff0c\u6bcf\u6b21\u9009\u62e9\u70b9\u6743\u6700\u5927\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u770b\u5b83\u4eec\u52a0\u8d77\u6765\u662f\u5426\u4e3a\u6b63\u6570\u5373\u53ef\u3002</p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n\\log n)\\)\uff0c\u4e3b\u8981\u662f\u7ed9\u70b9\u6743\u6392\u5e8f\u7684\u590d\u6742\u5ea6\u3002</p>"},{"location":"2023-provincial-shandong/g/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n;\nlong long ans;\n\n// mp[t] \u4fdd\u5b58\u6240\u6709 t == u - a_u \u7684\u70b9 u\nunordered_map&lt;int, vector&lt;int&gt;&gt; mp;\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    mp.clear();\n    for (int i = 1; i &lt;= n; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        mp[i - x].push_back(x);\n    }\n\n    ans = 0;\n    // \u6bcf\u4e2a\u56e2\u5355\u72ec\u8ba1\u7b97\u7b54\u6848\n    for (auto &amp;p : mp) {\n        vector&lt;int&gt; &amp;vec = p.second;\n        reverse(vec.begin(), vec.end());\n        // \u6bcf\u6b21\u9009\u56e2\u4e2d\u6700\u5927\u7684\u4e24\u4e2a\u70b9\u6743\uff0c\u5e76\u68c0\u67e5\u52a0\u8d77\u6765\u662f\u5426\u4e3a\u6b63\u6570\n        for (int i = 0; i + 1 &lt; vec.size(); i += 2) {\n            int sm = vec[i] + vec[i + 1];\n            if (sm &lt;= 0) break;\n            ans += sm;\n        }\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/h/","title":"H - \u8bf7\u5c0f\u5fc3 2","text":""},{"location":"2023-provincial-shandong/h/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73870/276 (0.0%)"},{"location":"2023-provincial-shandong/h/#_2","title":"\u9898\u89e3","text":"<p>\uff08\u8bf7\u5148\u53c2\u8003 \u7b80\u8981\u9898\u89e3\uff09</p>"},{"location":"2023-provincial-shandong/h/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 5000\n#define MOD 998244353\n#define MAXINV 30\n#define MAXPOW 5\nusing namespace std;\ntypedef long long ll;\ntypedef pair&lt;ll, ll&gt; pll;\n\nint n;\nll W, H;\npll P[MAXN + 10];\n\nll inv[MAXINV + 10];\n\nvoid power(ll a, ll *res) {\n    res[0] = 1; res[1] = a;\n    for (int i = 2; i &lt;= MAXPOW; i++) res[i] = res[i - 1] * a % MOD;\n}\n\nll sum2(ll *n) { return (inv[3] * n[3] + inv[2] * n[2] + inv[6] * n[1]) % MOD; }\nll sum3(ll *n) { return (inv[4] * n[4] + inv[2] * n[3] + inv[4] * n[2]) % MOD; }\nll sum4(ll *n) { return ((inv[5] * n[5] + inv[2] * n[4] + inv[3] * n[3] - inv[30] * n[1]) % MOD + MOD) % MOD; }\n\nll calc(ll l, ll r, ll *kx, ll *ky) {\n    l--; l = max(0LL, l);\n    ll pl[MAXPOW + 1]; power(l, pl);\n    ll pr[MAXPOW + 1]; power(r, pr);\n\n    ll coef2 = kx[0] * ky[0] % MOD, coef3 = (kx[0] * ky[1] + kx[1] * ky[0]) % MOD, coef4 = kx[1] * ky[1] % MOD;\n    return ((\n        (sum2(pr) - sum2(pl)) * coef2 +\n        (sum3(pr) - sum3(pl)) * coef3 +\n        (sum4(pr) - sum4(pl)) * coef4\n    ) % MOD + MOD) % MOD;\n}\n\nvoid coef(ll len, ll l, ll r, ll mx, ll *k) {\n    if (len &lt;= r &amp;&amp; len &lt;= mx - l) k[0] = l - r + 1, k[1] = 1;\n    else if (len &gt; r &amp;&amp; len &gt; mx - l) k[0] = mx + 1, k[1] = -1;\n    else if (len &gt; r) k[0] = l + 1, k[1] = 0;\n    else k[0] = mx - r + 1, k[1] = 0;\n}\n\nll gao(ll xl, ll xr, ll yl, ll yr) {\n    assert(xl &lt;= xr);\n    if (yl &gt; yr) swap(yl, yr);\n    xl--; xr++; yl--; yr++;\n    if (xl &lt; 0 || xr &gt; W || yl &lt; 0 || yr &gt; H) return 0;\n\n    ll mn = max(xr - xl, yr - yl);\n    ll mx = min(W, H);\n    if (mn &gt; mx) return 0;\n    vector&lt;ll&gt; vec = {\n        mn, mx + 1,\n        xr + 1, W - xl + 1,\n        yr + 1, H - yl + 1,\n    };\n    sort(vec.begin(), vec.end());\n\n    ll ret = 0;\n    for (int i = 0; i + 1 &lt; vec.size(); i++) {\n        if (vec[i] &lt; mn) continue;\n        if (vec[i] &gt; mx) break;\n        if (vec[i] == vec[i + 1]) continue;\n        ll kx[2], ky[2];\n        coef(vec[i], xl, xr, W, kx);\n        coef(vec[i], yl, yr, H, ky);\n        ret = (ret + calc(vec[i], vec[i + 1] - 1, kx, ky)) % MOD;\n    }\n    return ret;\n}\n\nint main() {\n    inv[1] = 1;\n    for (int i = 2; i &lt;= MAXINV; i++) inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;\n\n    scanf(\"%lld%lld%d\", &amp;W, &amp;H, &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%lld%lld\", &amp;P[i].first, &amp;P[i].second);\n    sort(P + 1, P + n + 1);\n\n    ll kx[2] = { W + 1, -1 }, ky[2] = { H + 1, -1 };\n    ll ans = calc(1, min(W, H), kx, ky);\n\n    for (int i = 1; i &lt;= n; i++) {\n        ans = (ans - gao(P[i].first, P[i].first, P[i].second, P[i].second) + MOD) % MOD;\n        ll U = 1e18, D = -1e18;\n        for (int j = i + 1; j &lt;= n; j++) {\n            if (P[j].second &gt;= U || P[j].second &lt;= D) continue;\n            ans = ((ans\n                + gao(P[i].first, P[j].first, P[i].second, P[j].second)\n                - gao(P[i].first, P[j].first, min(P[i].second, P[j].second), U)\n                - gao(P[i].first, P[j].first, D, max(P[i].second, P[j].second))\n                + gao(P[i].first, P[j].first, D, U)\n            ) % MOD + MOD) % MOD;\n            if (P[j].second &gt;= P[i].second) U = P[j].second;\n            if (P[j].second &lt;= P[i].second) D = P[j].second;\n        }\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/i/","title":"I - \u4e09\u53ea\u9ab0\u5b50","text":""},{"location":"2023-provincial-shandong/i/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387276/276 (100.0%)"},{"location":"2023-provincial-shandong/i/#_2","title":"\u9898\u89e3","text":"<p>\u679a\u4e3e\u4e09\u53ea\u9ab0\u5b50\u7684\u70b9\u6570\u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(1)\\)\u3002</p>"},{"location":"2023-provincial-shandong/i/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n// \u7ea2\u8272\u70b9\u6570\nint X[7] = {0, 1, 0, 0, 4, 0, 0};\n// \u9ed1\u8272\u70b9\u6570\nint Y[7] = {0, 0, 2, 3, 0, 5, 6};\n\nint main() {\n    int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n    for (int i = 1; i &lt;= 6; i++) for (int j = 1; j &lt;= 6; j++) for (int k = 1; k &lt;= 6; k++)\n        if (X[i] + X[j] + X[k] == x &amp;&amp; Y[i] + Y[j] + Y[k] == y) {\n            printf(\"Yes\\n\");\n            return 0;\n        }\n    printf(\"No\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/j/","title":"J - \u4e0d\u662f\u4e00\u9053\u8def\u5f84\u67e5\u8be2\u95ee\u9898","text":""},{"location":"2023-provincial-shandong/j/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738728/276 (10.1%)"},{"location":"2023-provincial-shandong/j/#_2","title":"\u9898\u89e3","text":"<p>\u7c7b\u4f3c\u4e8e\u6570\u4f4d dp \u7684\u601d\u60f3\uff0c\u5927\u4e8e \\(V\\) \u7684\u6570 \\(v'\\) \u90fd\u6709\u4e00\u6bb5\u524d\u7f00\u4e0e \\(V\\) \u76f8\u540c\uff08\u5047\u8bbe\u6700\u9ad8\u4f4d\u8865\u96f6\u5230\u76f8\u540c\u7684\u957f\u5ea6\uff09\u3002\u8bbe\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u4e3a \\(i\\)\uff0c\u8003\u8651\u7b2c \\((i + 1)\\) \u9ad8\u4f4d\uff1a</p> <ul> <li>\u82e5 \\(V\\) \u7684\u7b2c \\((i + 1)\\) \u9ad8\u4f4d\u662f \\(0\\)\uff0c\u5219 \\(v'\\) \u7684\u7b2c \\((i + 1)\\) \u9ad8\u4f4d\u662f \\(1\\)\uff0c\u90a3\u4e48 \\(v'\\) \u7684\u66f4\u4f4e\u4f4d\u53ef\u4ee5\u4efb\u610f\u9009\u62e9\u3002\u6b64\u65f6\u76ee\u6807\u503c\u7684\u524d \\((i + 1)\\) \u4f4d\u662f\u786e\u5b9a\u7684\uff0c\u6211\u4eec\u53ea\u8981\u8ba9\u8fd9 \\((i + 1)\\) \u4f4d\u4e2d\u7684\u6240\u6709 \\(1\\) \u5728\u6240\u9009\u8fb9\u6743\u4e2d\u90fd\u51fa\u73b0\u5373\u53ef\uff0c\u6700\u540e\u901a\u8fc7 BFS \u68c0\u67e5\u8d77\u70b9\u548c\u7ec8\u70b9\u662f\u5426\u8fde\u901a\u3002</li> <li>\u82e5 \\(V\\) \u7684\u7b2c \\((i + 1)\\) \u9ad8\u4f4d\u662f \\(1\\)\uff0c\u5219 \\(v'\\) \u7684\u7b2c \\((i + 1)\\) \u9ad8\u4f4d\u662f \\(0\\)\uff0c\u5f97\u51fa \\(V &gt; v'\\)\uff0c\u77db\u76fe\u3002</li> </ul> <p>\u56e0\u6b64\u6211\u4eec\u53ea\u8981\u679a\u4e3e\u6700\u957f\u516c\u5171\u524d\u7f00\u7684\u957f\u5ea6\u5373\u53ef\u3002\u957f\u5ea6\u5171\u6709 \\(\\mathcal{O}(\\log(\\max(V, w_i)))\\) \u79cd\uff0c\u56e0\u6b64\u590d\u6742\u5ea6\u4e3a \\(\\mathcal{O}(n + m + q)\\log(\\max(V, w_i))\\)\u3002</p>"},{"location":"2023-provincial-shandong/j/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXQ ((int) 5e5)\nusing namespace std;\n\nint n, m, q, qry[MAXQ + 10][2];\nlong long V;\nbool ans[MAXQ + 10];\n\nvector&lt;int&gt; e[MAXN + 10];\nvector&lt;long long&gt; v[MAXN + 10];\nint bel[MAXN + 10];\n\n// \u6c42\u5305\u542b S \u7684\u8fde\u901a\u5757\uff0c\u8981\u6c42\u6240\u9009\u8fb9\u6743\u5305\u542b t \u91cc\u6240\u6709\u7684 1\nvoid bfs(int S, long long t) {\n    queue&lt;int&gt; q;\n    q.push(S); bel[S] = S;\n    while (!q.empty()) {\n        int sn = q.front(); q.pop();\n        for (int i = 0; i &lt; e[sn].size(); i++) {\n            int fn = e[sn][i];\n            long long val = v[sn][i];\n            if (bel[fn] || (val &amp; t) != t) continue;\n            q.push(fn); bel[fn] = S;\n        }\n    }\n}\n\n// \u5bf9\u4e8e\u524d\u7f00 t \u68c0\u67e5\u54ea\u4e9b\u70b9\u662f\u8fde\u901a\u7684\nvoid gao(long long t) {\n    memset(bel, 0, sizeof(int) * (n + 3));\n    // \u901a\u8fc7 bfs \u68c0\u67e5\u4e24\u4e2a\u70b9\u662f\u5426\u4f4d\u4e8e\u540c\u4e00\u8fde\u901a\u5757\n    for (int i = 1; i &lt;= n; i++) if (!bel[i]) bfs(i, t);\n    for (int i = 1; i &lt;= q; i++) ans[i] = ans[i] || bel[qry[i][0]] == bel[qry[i][1]];\n}\n\nint main() {\n    scanf(\"%d%d%d%lld\", &amp;n, &amp;m, &amp;q, &amp;V);\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y;\n        long long z;\n        scanf(\"%d%d%lld\", &amp;x, &amp;y, &amp;z);\n        e[x].push_back(y); v[x].push_back(z);\n        e[y].push_back(x); v[y].push_back(z);\n    }\n    for (int i = 1; i &lt;= q; i++) scanf(\"%d%d\", &amp;qry[i][0], &amp;qry[i][1]);\n\n    if (V == 0) gao(0);\n    // \u901a\u8fc7\u6bcf\u6b21 += lowbit\uff0c\u679a\u4e3e\u503c\u57df\u8303\u56f4\u5185\u6240\u6709\u4e0d\u540c\u7684\u524d\u7f00\n    else for (long long t = V; t &lt; (1LL &lt;&lt; 60); t += t &amp; (-t)) gao(t);\n    for (int i = 1; i &lt;= q; i++)\n        if (ans[i]) printf(\"Yes\\n\");\n        else printf(\"No\\n\");\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/k/","title":"K - \u56f0\u96be\u7684\u6784\u9020\u9898","text":""},{"location":"2023-provincial-shandong/k/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u73878/276 (2.9%)"},{"location":"2023-provincial-shandong/k/#_2","title":"\u9898\u89e3","text":"<p>\u5047\u8bbe\u5b57\u7b26\u4e32\u5934\u5c3e\u4e0d\u5b58\u5728\u95ee\u53f7\uff0c\u53ea\u6709\u4e2d\u95f4\u6709\u95ee\u53f7\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u628a\u4e00\u4e2a\u5b57\u7b26\u4ece \\(0\\) \u53d8\u6210 \\(1\\)\uff0c\u6216\u8005\u4ece \\(1\\) \u53d8\u6210 \\(0\\) \u540e\uff0c\u6ee1\u8db3\u6761\u4ef6\u7684\u4e0b\u6807\u6570\u91cf\u5c06\u4f1a\u589e\u52a0\u6216\u51cf\u5c11 \\(2\\)\u3002\u56e0\u6b64\u6ee1\u8db3\u6761\u4ef6\u7684\u4e0b\u6807\u6570\u91cf\u53ef\u4ee5\u53d6\u5230\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u4e4b\u95f4\u7684\u6240\u6709\u5947\uff08\u5076\uff09\u6570\u3002</p> <p>\u56e0\u6b64\u8ba1\u7b97 \\(f(i, 0/1)\\) \u4ee5\u53ca \\(g(i, 0/1)\\)\uff0c\u8868\u793a\u53ea\u8003\u8651\u4ece\u7b2c \\(i\\) \u4e2a\u5b57\u7b26\u5f00\u59cb\u7684\u540e\u7f00\uff0c\u4e14\u7b2c \\(i\\) \u4e2a\u5b57\u7b26\u586b \\(0/1\\) \u65f6\uff0c\u540e\u7f00\u4e2d\u6700\u5c11\uff08\u6700\u591a\uff09\u6709\u51e0\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4e0b\u6807\u3002\u8f6c\u79fb\u65b9\u7a0b\u4e3a</p> \\[ \\begin{matrix} f(i, j) = \\min(f(i + 1, j), f(i + 1, 1 - j) + 1) \\\\ g(i, j) = \\max(g(i + 1, j), g(i + 1, 1 - j) + 1) \\end{matrix} \\] <p>\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u9010\u4f4d\u786e\u5b9a\u7b54\u6848\u3002\u5148\u770b \\(f(1, s_1)\\) \u548c \\(k\\) \u7684\u5947\u5076\u6027\u662f\u5426\u4e00\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4f4d\u518d\u770b\u662f\u5426 \\(f(i, 0/1) \\le k - k' \\le g(i, 0/1)\\) \u6765\u5224\u65ad\u8fd9\u4e00\u4f4d\u80fd\u5426\u9009 \\(0/1\\)\uff08\u56e0\u4e3a\u8981\u6c42\u7b54\u6848\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6240\u4ee5\u80fd\u9009 \\(0\\) \u5c31\u9009\uff09\uff0c\u5176\u4e2d \\(k'\\) \u8868\u793a\u524d \\(i\\) \u4e2a\u5b57\u7b26\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u4e0b\u6807\u6570\u91cf\u3002</p> <p>\u6700\u540e\u8003\u8651\u95ee\u53f7\u5728\u5b57\u7b26\u4e32\u5934\u5c3e\u7684\u60c5\u51b5\u3002\u5176\u5b9e\u53ea\u8981\u679a\u4e3e\u5934\u5c3e\u7684\u4e24\u4e2a\u5b57\u7b26\u662f \\(0\\) \u8fd8\u662f \\(1\\) \u5373\u53ef\u3002\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2023-provincial-shandong/k/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define INF ((int) 1e9)\nusing namespace std;\n\nint n, K;\nchar s[MAXN + 10];\n\nint L[MAXN + 10][2], R[MAXN + 10][2];\n\nstring gao() {\n    // \u540e\u7f00\u4e2d\u6700\u5c11\uff08\u6700\u591a\uff09\u6709\u51e0\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u4e0b\u6807\n    for (int j = 0; j &lt;= 1; j++) {\n        if (s[n] == j + '0') L[n][j] = R[n][j] = 0;\n        else L[n][j] = 1e9, R[n][j] = -1e9;\n    }\n    for (int i = n - 1; i &gt; 0; i--) for (int j = 0; j &lt;= 1; j++) {\n        if (s[i] == j + '0' || s[i] == '?') {\n            L[i][j] = min(L[i + 1][j], L[i + 1][j ^ 1] + 1);\n            R[i][j] = max(R[i + 1][j], R[i + 1][j ^ 1] + 1);\n        } else {\n            L[i][j] = 1e9; R[i][j] = -1e9;\n        }\n    }\n\n    // \u5148\u770b L[1][s_1] \u7684\u5947\u5076\u6027\u548c k \u662f\u5426\u4e00\u6837\n    if (K % 2 != L[1][s[1] - '0'] % 2) return \"2\";\n\n    string ret;\n    int cnt = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        bool ok = false;\n        for (int j = 0; j &lt;= 1; j++) {\n            // cnt + t \u8868\u793a\u524d i \u4e2a\u5b57\u7b26\u4e2d\u6ee1\u8db3\u6761\u4ef6\u7684\u4e0b\u6807\u6570\u91cf\n            int t = (i &gt; 1 &amp;&amp; j != ret[i - 2] - '0' ? 1 : 0);\n            // \u770b\u7b2c i \u4f4d\u80fd\u5426\u586b\u5165\u5b57\u7b26 j\n            if (L[i][j] + cnt + t &lt;= K &amp;&amp; R[i][j] + cnt + t &gt;= K) {\n                ret.push_back(j + '0');\n                cnt += t;\n                ok = true;\n                break;\n            }\n        }\n        // 0 \u548c 1 \u90fd\u586b\u4e0d\u8fdb\u7b2c i \u4f4d\uff0c\u65e0\u89e3\n        if (!ok) return \"2\";\n    }\n    assert(cnt == K);\n    return ret;\n}\n\nvoid solve() {\n    scanf(\"%d%d%s\", &amp;n, &amp;K, s + 1);\n\n    char x = s[1], y = s[n];\n    string ans = \"2\";\n    // \u679a\u4e3e\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\n    for (int i = 0; i &lt;= 1; i++) if (x == '?' || x == i + '0') \n        for (int j = 0; j &lt;= 1; j++) if (y == '?' || y == j + '0') {\n            s[1] = i + '0'; s[n] = j + '0';\n            ans = min(ans, gao());\n        }\n    if (ans == \"2\") printf(\"Impossible\\n\");\n    else printf(\"%s\\n\", ans.c_str());\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/l/","title":"L - \u8c1c\u9898\uff1a\u66f2\u5c3a","text":""},{"location":"2023-provincial-shandong/l/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u7387125/276 (45.3%)"},{"location":"2023-provincial-shandong/l/#_2","title":"\u9898\u89e3","text":"<p>\u6211\u4eec\u4ece\u9ed1\u8272\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u6b21\u64cd\u4f5c\u5411\u5916\u201c\u5305\u201d\u4e00\u5c42 L\uff0c\u4f7f\u5f97\u7b2c \\(i\\) \u6b21\u64cd\u4f5c\u7ed3\u675f\u540e\u80fd\u5f62\u6210\u4e00\u4e2a \\((i + 1) \\times (i + 1)\\) \u7684\u6b63\u65b9\u5f62\u3002\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u590d\u6742\u5ea6 \\(\\mathcal{O}(n)\\)\u3002</p>"},{"location":"2023-provincial-shandong/l/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint main() {\n    int n, i, j; scanf(\"%d%d%d\", &amp;n, &amp;i, &amp;j);\n    // UDLR \u8868\u793a\u73b0\u5728\u5305\u51fa\u6765\u7684\u6b63\u65b9\u5f62\u7684\u4e0a\u4e0b\u5de6\u53f3\u8fb9\u754c\n    int U = i, D = i;\n    int L = j, R = j;\n    printf(\"Yes\\n%d\\n\", n - 1);\n    for (int k = 1; k &lt; n; k++) {\n        if (U &gt; 1 &amp;&amp; L &gt; 1) {\n            U--; L--;\n            printf(\"%d %d %d %d\\n\", U, L, D - U, R - L);\n        } else if (U &gt; 1 &amp;&amp; R &lt; n) {\n            U--; R++;\n            printf(\"%d %d %d %d\\n\", U, R, D - U, L - R);\n        } else if (D &lt; n &amp;&amp; L &gt; 1) {\n            D++; L--;\n            printf(\"%d %d %d %d\\n\", D, L, U - D, R - L);\n        } else {\n            D++; R++;\n            printf(\"%d %d %d %d\\n\", D, R, U - D, L - R);\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"2023-provincial-shandong/m/","title":"M - \u8ba1\u7b97\u51e0\u4f55","text":""},{"location":"2023-provincial-shandong/m/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u9898\u76ee\u51fa\u59042023 \u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b \u961f\u4f0d\u901a\u8fc7\u738720/276 (7.2%)"},{"location":"2023-provincial-shandong/m/#_2","title":"\u9898\u89e3","text":"<p>\u591a\u8fb9\u5f62 \\(Q\\) \u53ef\u4ee5\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff1a\u7531 \\(b\\)\uff0c\\(c\\) \u548c\u5b83\u4eec\u4e4b\u95f4 \\(k\\) \u6761\u8fb9\u7ec4\u6210\u7684 \\((k + 1)\\) \u8fb9\u5f62 \\(R\\)\uff0c\u4ee5\u53ca\u4e09\u89d2\u5f62 \\(\\Delta abc\\)\u3002</p> <p>\u5982\u679c\u6211\u4eec\u679a\u4e3e \\(b\\) \u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48 \\(c\\) \u7684\u4f4d\u7f6e\u4e5f\u4f1a\u540c\u65f6\u786e\u5b9a\uff0c\u5219 \\(R\\) \u7684\u9762\u79ef\u4e5f\u786e\u5b9a\u4e86\u3002\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u6700\u5927\u5316 \\(\\Delta abc\\) \u7684\u9762\u79ef\u3002\u6211\u4eec\u53ef\u4ee5\u4e09\u5206 \\(a\\) \u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f \\(\\mathcal{O}(n\\log n)\\)\u3002\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u4e8e\u65cb\u8f6c\u5361\u58f3\u7684\u65b9\u6cd5\u5728 \\(\\mathcal{O}(n)\\) \u7684\u590d\u6742\u5ea6\u5185\u4e00\u6b21\u6027\u6c42\u51fa\u6240\u6709 \\(bc\\) \u5bf9\u5e94\u7684\u70b9 \\(a\\)\u3002</p>"},{"location":"2023-provincial-shandong/m/#_3","title":"\u53c2\u8003\u4ee3\u7801","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, K;\nlong long X[MAXN + 10], Y[MAXN + 10];\n\nlong long cross(int a, int b) {\n    return X[a] * Y[b] - X[b] * Y[a];\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;K);\n    for (int i = 0; i &lt; n; i++) scanf(\"%lld%lld\", &amp;X[i], &amp;Y[i]);\n\n    long long ans = 0, sm = 0;\n    for (int i = 1; i &lt;= K; i++) sm += cross(i - 1, i);\n    // \u679a\u4e3e\u70b9 b\n    for (int b = 0, a = K; b &lt; n; b++) {\n        int c = (b + K) % n;\n        // \u7c7b\u4f3c\u65cb\u8f6c\u5361\u58f3\uff0c\u968f\u7740 bc \u7684\u9006\u65f6\u9488\u65cb\u8f6c\uff0c\u6700\u4f18\u7684 a \u7684\u4f4d\u7f6e\u4e5f\u4f1a\u9006\u65f6\u9488\u65cb\u8f6c\n        while (a != b) {\n            long long now = cross(c, a) + cross(a, b);\n            long long nxt = cross(c, (a + 1) % n) + cross((a + 1) % n, b);\n            if (nxt &gt; now) a = (a + 1) % n;\n            else break;\n        }\n        ans = max(ans, sm + cross(c, a) + cross(a, b));\n        sm += cross(c, (c + 1) % n) - cross(b, (b + 1) % n);\n        // a \u8981\u59cb\u7ec8\u5904\u4e8e c \u5230 b \u4e4b\u95f4\n        if (a == c) a = (a + 1) % n;\n    }\n    printf(\"%.12f\\n\", ans / 2.0);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"2024-ccpc-invitational-shandong/","title":"2024 CCPC \u5168\u56fd\u9080\u8bf7\u8d5b\u5c71\u4e1c\u7ad9\u66a8\u5c71\u4e1c\u7701\u5927\u5b66\u751f\u7a0b\u5e8f\u8bbe\u8ba1\u7ade\u8d5b","text":""},{"location":"2024-ccpc-invitational-shandong/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2024/05/26 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ \u9009\u624b\u8bc4\u4ef7zhihu"},{"location":"2024-ccpc-invitational-shandong/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 383, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 43, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 292, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 29, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 138, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 353, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 37, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 33, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 455, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 45, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 263, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 28, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 409, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 44, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 48, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 39, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 44, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 65, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 100, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 98, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 31, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2024-ccpc-invitational-shandong/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2024-ccpc-invitational-shandong/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2024-ccpc-invitational-shandong/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":""},{"location":"2024-icpc-hangzhou/","title":"2024 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u676d\u5dde\u7ad9","text":""},{"location":"2024-icpc-hangzhou/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2024/11/10 \u7ade\u8d5b\u8bd5\u9898 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60 \u9009\u624b\u8bc4\u4ef7zhihu <p>\u672c\u6b21\u7ade\u8d5b\u8bd5\u9898\u5c06\u7528\u4e8e 12 \u6708 21 \u65e5\u4e3e\u884c\u7684 Universal Cup Stage Hangzhou\uff0c\u7ade\u8d5b\u8bd5\u9898\u4e0e\u89e3\u7b54\u5c06\u4e8e Universal Cup \u7ed3\u675f\u540e\u516c\u5e03\u3002</p>"},{"location":"2024-icpc-hangzhou/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 356, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 24, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 38, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 15, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 264, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 22, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 81, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 20, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 7, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 241, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 24, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 364, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 24, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 181, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 21, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 55, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 65, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 84, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 74, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 44, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 20, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 7, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2024-icpc-hangzhou/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2024-icpc-hangzhou/#_4","title":"\u7b80\u8981\u9898\u89e3","text":""},{"location":"2024-icpc-hangzhou/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":""},{"location":"2024-icpc-invitational-kunming/","title":"2024 ICPC \u5168\u56fd\u9080\u8bf7\u8d5b\u6606\u660e\u7ad9","text":""},{"location":"2024-icpc-invitational-kunming/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2024/05/26 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ \u9009\u624b\u8bc4\u4ef7zhihu \u73b0\u573a\u76f4\u64adbilibili"},{"location":"2024-icpc-invitational-kunming/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 206, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 9, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 255, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 15, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 93, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 5, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 242, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 12, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 230, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 10, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 33, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 25, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 42, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 12, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 26, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 89, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 5, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 70, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 22, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 6, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 1, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2024-icpc-invitational-kunming/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2024-icpc-invitational-kunming/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2024-icpc-invitational-kunming/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":""},{"location":"2024-icpc-nanjing/","title":"2024 ICPC \u4e9a\u6d32\u533a\u57df\u8d5b\u5357\u4eac\u7ad9","text":""},{"location":"2024-icpc-nanjing/#_1","title":"\u57fa\u672c\u4fe1\u606f","text":"\u7ade\u8d5b\u65e5\u671f2024/11/03 \u7ade\u8d5b\u8bd5\u9898English | \u4e2d\u6587 \u7ade\u8d5b\u699c\u5355SUA Board | XCPC Board \u5728\u7ebf\u7ec3\u4e60Codeforces Gym | QOJ \u9009\u624b\u8bc4\u4ef7zhihu \u73b0\u573a\u76f4\u64adbilibili"},{"location":"2024-icpc-nanjing/#_2","title":"\u7edf\u8ba1\u6570\u636e","text":"<p>{   \"title\": {     \"text\": \"\u9898\u76ee\u901a\u8fc7\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"A\", \"ac\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 77, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"B\", \"ac\": 18, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 20, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"C\", \"ac\": 11, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"D\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 334, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"E\", \"ac\": 24, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 4, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"F\", \"ac\": 6, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 135, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"G\", \"ac\": 21, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"H\", \"ac\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 16, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"I\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 326, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"J\", \"ac\": 24, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 213, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"K\", \"ac\": 22, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"L\", \"ac\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 9, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"id\": \"M\", \"ac\": 8, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u9898\u76ee\u7f16\u53f7\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u901a\u8fc7\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u961f\u4f0d\u7c7b\u578b\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u901a\u8fc7\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"\u961f\u4f0d\u8fc7\u9898\u6570\u7edf\u8ba1\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 2, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 8, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 1, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 87, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 2, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 107, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 3, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 74, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 4, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 32, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 5, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 10, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 6, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 13, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 7, \"cnt\": 4, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 3, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 8, \"cnt\": 1, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 11, \"cnt\": 2, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u6b63\u5f0f\u8d5b\u961f\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"\u975e\u6b63\u5f0f\u8d5b\u961f\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u8fc7\u9898\u6570\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"\u961f\u4f0d\u6570\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"\u7c7b\u578b\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"\u961f\u4f0d\u6570\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"\u6b63\u5f0f\u8d5b\u961f\", \"\u975e\u6b63\u5f0f\u8d5b\u961f\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"2024-icpc-nanjing/#_3","title":"\u9898\u89e3\u5217\u8868","text":""},{"location":"2024-icpc-nanjing/#_4","title":"\u7b80\u8981\u9898\u89e3","text":"<ul> <li>pdf</li> </ul>"},{"location":"2024-icpc-nanjing/#_5","title":"\u8be6\u7ec6\u9898\u89e3","text":""},{"location":"en/","title":"Welcome to SUA Wiki","text":"<p>This website contains the information and detailed tutorials/solutions of all public contests prepared by the SUA Problem Setter Team. Past contests will be added gradually.</p>"},{"location":"en/#contest-list","title":"Contest List","text":"<ul> <li>The 2024 ICPC Asia Hangzhou Regional Contest</li> <li>The 2024 ICPC Asia Nanjing Regional Contest</li> <li>The 2024 ICPC Kunming Invitational Contest</li> <li>The 2024 CCPC Shandong Invitational Contest and Provincial Collegiate Programming Contest</li> <li>The 2023 ICPC Asia Jinan Regional Contest</li> <li>The 2023 ICPC Asia Nanjing Regional Contest</li> <li>The 2023 Shandong Provincial Collegiate Programming Contest</li> <li>The 2023 Guangdong Provincial Collegiate Programming Contest</li> <li>The 2022 ICPC Asia Nanjing Regional Contest</li> <li>The 2021 ICPC Asia Macau Regional Contest</li> <li>The 2021 ICPC Asia Nanjing Regional Contest</li> <li>The 2021 Sichuan Provincial Collegiate Programming Contest</li> <li>The 2020 ICPC Asia Nanjing Regional Contest</li> <li>The 2019 Shaanxi Provincial Collegiate Programming Contest</li> <li>The 2019 Shandong Provincial Collegiate Programming Contest</li> <li>The 2019 Zhejiang Provincial Collegiate Programming Contest</li> <li>The 2019 Zhejiang University Programming Contest</li> <li>The 2018 ICPC Asia Qingdao Regional Contest</li> <li>The 2018 ICPC Asia Qingdao Regional Contest, Online</li> <li>The 2018 Zhejiang Provincial Collegiate Programming Contest</li> <li>The 2018 Zhejiang University Programming Contest</li> <li>The 2017 China Collegiate Programming Contest Qinhuangdao Site</li> <li>The 2017 Zhejiang Provincial Collegiate Programming Contest</li> <li>The 2017 Zhejiang University Programming Contest</li> </ul>"},{"location":"en/2018-icpc-qingdao/","title":"The 2018 ICPC Asia Qingdao Regional Contest","text":""},{"location":"en/2018-icpc-qingdao/#basic-information","title":"Basic Information","text":"Contest Date2018/11/04 ProblemsetEnglish RanklistSUA Board | Web Archive Online PracticeCodeforces Gym | QOJ Contestants' Thoughtszhihu"},{"location":"en/2018-icpc-qingdao/#statistics","title":"Statistics","text":"<p>{   \"title\": {     \"text\": \"Number of Accepted Teams Per Problem\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"id\": \"A\", \"ac\": 0, \"type\": \"Official\"},       {\"id\": \"A\", \"ac\": 0, \"type\": \"Unofficial\"},       {\"id\": \"B\", \"ac\": 0, \"type\": \"Official\"},       {\"id\": \"B\", \"ac\": 2, \"type\": \"Unofficial\"},       {\"id\": \"C\", \"ac\": 333, \"type\": \"Official\"},       {\"id\": \"C\", \"ac\": 18, \"type\": \"Unofficial\"},       {\"id\": \"D\", \"ac\": 88, \"type\": \"Official\"},       {\"id\": \"D\", \"ac\": 11, \"type\": \"Unofficial\"},       {\"id\": \"E\", \"ac\": 109, \"type\": \"Official\"},       {\"id\": \"E\", \"ac\": 12, \"type\": \"Unofficial\"},       {\"id\": \"F\", \"ac\": 105, \"type\": \"Official\"},       {\"id\": \"F\", \"ac\": 9, \"type\": \"Unofficial\"},       {\"id\": \"G\", \"ac\": 5, \"type\": \"Official\"},       {\"id\": \"G\", \"ac\": 3, \"type\": \"Unofficial\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"Official\"},       {\"id\": \"H\", \"ac\": 0, \"type\": \"Unofficial\"},       {\"id\": \"I\", \"ac\": 2, \"type\": \"Official\"},       {\"id\": \"I\", \"ac\": 4, \"type\": \"Unofficial\"},       {\"id\": \"J\", \"ac\": 332, \"type\": \"Official\"},       {\"id\": \"J\", \"ac\": 18, \"type\": \"Unofficial\"},       {\"id\": \"K\", \"ac\": 7, \"type\": \"Official\"},       {\"id\": \"K\", \"ac\": 3, \"type\": \"Unofficial\"},       {\"id\": \"L\", \"ac\": 17, \"type\": \"Official\"},       {\"id\": \"L\", \"ac\": 6, \"type\": \"Unofficial\"},       {\"id\": \"M\", \"ac\": 353, \"type\": \"Official\"},       {\"id\": \"M\", \"ac\": 19, \"type\": \"Unofficial\"}     ]   },   \"transform\": [{     \"calculate\": \"if(datum.type === 'off', 0, 1)\",     \"as\": \"typeOrder\"   }],   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"Problem\", \"titleFontSize\": 14},           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"# of Accepted Teams\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"Team Type\"           },           {             \"field\": \"ac\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"# of Accepted Teams\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"Official\", \"Unofficial\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"id\",           \"type\": \"nominal\",           \"sort\": \"-y\"         },         \"y\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"ac\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p> <p>{   \"title\": {     \"text\": \"Number of Accepted Problems Per Team\",     \"fontSize\": 20   },   \"data\": {     \"values\": [       {\"ac\": 0, \"cnt\": 1, \"type\": \"Official\"},       {\"ac\": 0, \"cnt\": 0, \"type\": \"Unofficial\"},       {\"ac\": 1, \"cnt\": 9, \"type\": \"Official\"},       {\"ac\": 1, \"cnt\": 1, \"type\": \"Unofficial\"},       {\"ac\": 2, \"cnt\": 23, \"type\": \"Official\"},       {\"ac\": 2, \"cnt\": 0, \"type\": \"Unofficial\"},       {\"ac\": 3, \"cnt\": 146, \"type\": \"Official\"},       {\"ac\": 3, \"cnt\": 5, \"type\": \"Unofficial\"},       {\"ac\": 4, \"cnt\": 83, \"type\": \"Official\"},       {\"ac\": 4, \"cnt\": 2, \"type\": \"Unofficial\"},       {\"ac\": 5, \"cnt\": 50, \"type\": \"Official\"},       {\"ac\": 5, \"cnt\": 2, \"type\": \"Unofficial\"},       {\"ac\": 6, \"cnt\": 28, \"type\": \"Official\"},       {\"ac\": 6, \"cnt\": 4, \"type\": \"Unofficial\"},       {\"ac\": 7, \"cnt\": 7, \"type\": \"Official\"},       {\"ac\": 7, \"cnt\": 0, \"type\": \"Unofficial\"},       {\"ac\": 8, \"cnt\": 4, \"type\": \"Official\"},       {\"ac\": 8, \"cnt\": 2, \"type\": \"Unofficial\"},       {\"ac\": 9, \"cnt\": 3, \"type\": \"Official\"},       {\"ac\": 9, \"cnt\": 1, \"type\": \"Unofficial\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"Official\"},       {\"ac\": 10, \"cnt\": 0, \"type\": \"Unofficial\"},       {\"ac\": 11, \"cnt\": 0, \"type\": \"Official\"},       {\"ac\": 11, \"cnt\": 2, \"type\": \"Unofficial\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"Official\"},       {\"ac\": 12, \"cnt\": 0, \"type\": \"Unofficial\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"Official\"},       {\"ac\": 13, \"cnt\": 0, \"type\": \"Unofficial\"}     ]   },   \"layer\": [     {       \"mark\": {\"type\": \"bar\", \"tooltip\": true, \"width\": {\"band\": 0.5}},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"# of Accepted Problems\", \"titleFontSize\": 14}         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\",           \"axis\": {\"labelAngle\": 0, \"labelFontSize\": 14, \"title\": \"# of Teams\", \"titleFontSize\": 14}         },         \"tooltip\": [           {             \"field\": \"type\",             \"type\": \"nominal\",             \"title\": \"Team Type\"           },           {             \"field\": \"cnt\",             \"aggregate\": \"sum\",             \"type\": \"quantitative\",             \"title\": \"# of Teams\"           }         ],         \"color\": {           \"field\": \"type\",           \"type\": \"nominal\",           \"scale\": {             \"domain\": [\"Official\", \"Unofficial\"],             \"range\": [\"#4c78a8\", \"#616166\"]           },           \"legend\": null         },         \"order\": {\"field\": \"typeOrder\"}       }     },     {       \"mark\": {\"type\": \"text\", \"style\": \"label\", \"fontSize\": 14, \"dy\": -10},       \"encoding\": {         \"x\": {           \"field\": \"ac\",           \"type\": \"nominal\"         },         \"y\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         },         \"text\": {           \"field\": \"cnt\",           \"aggregate\": \"sum\",           \"type\": \"quantitative\"         }       }     }   ] }</p>"},{"location":"en/2018-icpc-qingdao/#tutorials","title":"Tutorials","text":""},{"location":"en/2018-icpc-qingdao/#detailed-tutorials","title":"Detailed Tutorials","text":"<ul> <li>A - Sequence and Sequence</li> <li>B - Kawa Exam</li> <li>C - Flippy Sequence</li> <li>D - Magic Multiplication</li> <li>E - Plants vs. Zombies</li> <li>F - Tournament</li> <li>G - Repair the Artwork</li> <li>H - Mirror</li> <li>I - Soldier Game</li> <li>J - Books</li> <li>K - Airdrop</li> <li>L - Sub-cycle Graph</li> <li>M - Function and Function</li> </ul>"},{"location":"en/2018-icpc-qingdao/a/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio0/373 (0.0%)"},{"location":"en/2018-icpc-qingdao/a/#tutorial","title":"Tutorial","text":"<p>Because \\(n\\) is large, we need to first try to reduce the range of \\(n\\). Note that there are only \\(\\mathcal{O}(\\sqrt{n})\\) different values of \\(P(i)\\), and only \\(\\mathcal{O}(\\sqrt{n})\\) values of \\(i\\) satisfy \\(P_i - P_{i - 1} \\ne 0\\). If we can express \\(Q(n)\\) in the form of \\((Q(P(i)) - Q(P(i - 1)))\\), we can reduce the range of \\(n\\) to \\(\\mathcal{O}(\\sqrt{n})\\).</p> <p>For convenience, we define \\(Q(0) = P(0) = 0\\).</p> <p>First, according to the definition of \\(Q\\), it is easy to find that</p> \\[ Q(n) = \\sum\\limits_{i = 1}^n Q(P(i)) \\] <p>To get the form of \\((Q(P(i)) - Q(P(i - 1)))\\), we use a technique called summation by parts (also known as the Abel transformation). Let's introduce a constant polynomial \\(f^{(0)}(x) = 1\\), then</p> \\[ Q(n) = \\sum\\limits_{i = 1}^n f^{(0)}(i) \\times Q(P(i)) \\] <p>Let \\(F^{(0)}(x) = \\sum\\limits_{i = 1}^x f^{(0)}(i)\\), then</p> \\[ Q(n) = \\sum\\limits_{i = 1}^n (F^{(0)}(i) - F^{(0)}(i - 1)) \\times Q(P(i)) \\] <p>Using the summation by parts, we can extract the terms with the same \\(F^{(0)}(i)\\), then we get</p> \\[ Q(n) = F^{(0)}(n) \\times Q(P(n)) - \\sum\\limits_{i = 1}^n F^{(0)}(i - 1) \\times (Q(P(i)) - Q(P(i - 1))) \\] <p>The desired \\((Q(P(i)) - Q(P(i - 1)))\\) appears! Based on the value of \\(P(i)\\), most of the terms can be eliminated, and we have</p> \\[ \\begin{matrix} &amp; \\sum\\limits_{i = 1}^n F^{(0)}(i - 1) \\times (Q(P(i)) - Q(P(i - 1))) \\\\  = &amp; \\sum\\limits_{i = 1}^{P(n)} F^{(0)}(\\frac{i(i + 1)}{2} - 1) \\times (Q(i) - Q(i - 1)) \\\\  = &amp; \\sum\\limits_{i = 1}^{P(n)} F^{(0)}(\\frac{i(i + 1)}{2} - 1) \\times Q(P(i)) \\end{matrix} \\] <p>Let the polynomial \\(f^{(1)}(x) = F^{(0)}(\\frac{x(x + 1)}{2} - 1)\\), and let the function \\(g(d, n) = \\sum\\limits_{i = 1}^n f^{(d)}(i) \\times Q(P(i))\\), then</p> \\[ Q(n) = g(0, n) = F^{(0)}(n) \\times g(0, P(n)) - g(1, P(n)) \\] <p>We can see that we have transformed the problem \\(g(0, n)\\) into two smaller problems, \\(g(0, P(n))\\) and \\(g(1, P(n))\\), each of which has a size of \\(\\mathcal{O}(\\sqrt{n})\\). Let \\(f^{(d)}(x) = F^{(d-1)}(\\frac{x(x+1)}{2}-1)\\) and \\(F^{(d)}(x) = \\sum\\limits_{i = 1}^x f^{(d)}(i)\\), then we can easily obtain the formula:</p> \\[ g(d, n) = F^{(d)}(n) \\times g(0, P(n)) - g(d + 1, P(n)) \\] <p>When the problem size becomes small enough (in the data range of this problem, when \\(d=4\\) we have \\(n \\leq 605\\), which is small enough), we can directly compute the answer.</p> <p>The value of the polynomial can be evaluated by Lagrange interpolation. Note that every time we recurse, the degree of the polynomial will increase by \\(1\\) and then multiply by \\(2\\). Taking the deepest recursion level to be \\(D=4\\), the degree of the polynomial will be \\(K=30\\), and the maximum value of \\(n\\) will be \\(N=605\\). By appropriate pre-processing (see solution below), the pre-processing time complexity can be reduced to \\(\\mathcal{O}(K^2+DK+DN)\\), and the time complexity of a single case can be reduced to \\(\\mathcal{O}(2^{D+1}K)\\) (assuming the time complexity of high-precision arithmetic is a constant).</p>"},{"location":"en/2018-icpc-qingdao/a/#solution","title":"Solution","text":"<pre><code>from math import isqrt\n\n# ======== Pre-process: the point-value representation of polynomial f and F ========\n\n# the maximum degree of polynomial\nMAX_K = 30\n\n# prod[i][j] = product(i - k), 0 &lt;= k &lt;= j, k != i\nprod = []\nfor i in range(MAX_K + 1):\n    prod.append([])\n    p = 1\n    for j in range(MAX_K + 1):\n        if i != j:\n            p *= i - j\n        prod[-1].append(p)\n\n# given the point-value representation (0, y[0]), (1, y[1]), ..., (k, y[k])\n# of a polynomial of degree k\n# use Lagrange interpolation to calculate its value when the independent variable equals x\ndef evalPoly(x, y):\n    if x &gt;= 0 and x &lt; len(y):\n        return y[x]\n\n    p = 1\n    for i in range(len(y)):\n        p *= x - i\n\n    nume, deno = 0, 1\n    for i in range(len(y)):\n        a = y[i] * (p // (x - i))\n        b = prod[i][len(y) - 1]\n        nume = nume * b + deno * a\n        deno *= b\n    return nume // deno\n\n# maximum recurse level\nMAX_DEP = 4\n\n# polys[i] is the point-value representation of f^{(i)}(x)\npolys = []\npolys.append([1])\n# smPolys[i] is the point-value representation of F^{(i)}(x)\nsmPolys = []\n\nfor _ in range(MAX_DEP):\n    prevLen = len(polys[-1])\n\n    # F^{(i)}(x) is the prefix sum of f^{(i)}(x)\n    sm = [0]\n    for y in polys[-1][1:]:\n        sm.append(sm[-1] + y)\n    sm.append(sm[-1] + evalPoly(prevLen, polys[-1]))\n    smPolys.append(sm)\n\n    # f^{(i + 1)}(x) = F^{(i)}(x * (x + 1) // 2 - 1)\n    sq = []\n    for x in range(0, prevLen * 2 + 1):\n        sq.append(evalPoly(x * (x + 1) // 2 - 1, sm))\n    polys.append(sq)\n\n# ======== Pre-process: the first few values of P and Q ========\n\n# at the maximum recurse level, n &lt; MAX_LEN\nMAX_LEN = 610\n\nP = [0]\nt = 1\nwhile len(P) &lt;= MAX_LEN:\n    for _ in range(t + 1):\n        P.append(t)\n    t += 1\n\nQ = [0, 1]\nfor i in range(2, MAX_LEN):\n    Q.append(Q[-1] + Q[P[i]])\n\n# ======== Pre-process: the value of g(d, n) where d &lt;= MAX_DEP and n &lt; MAX_LEN ========\n\n# S[d][n] = g(d, n)\nS = []\nfor i in range(MAX_DEP + 1):\n    S.append([0])\n    for j in range(1, MAX_LEN):\n        S[-1].append(S[-1][-1] + evalPoly(j, polys[i]) * Q[P[j]])\n\n# ======== Test cases starts from here ========\n\n# if P(n) = p, then (p + 3) * p // 2 &gt;= n and p is as small as possible\n# we calculate the value of p by solving the quadratic equation\n# because we use integer sqrt and division, we need to check a few larger values\ndef calcP(n):\n    p = (isqrt(8 * n + 9) - 3) // 2\n    while p * (p + 3) // 2 &lt; n:\n        p += 1\n    return p\n\ndef g(d, n):\n    if n &lt; MAX_LEN:\n        return S[d][n]\n    return evalPoly(n, smPolys[d]) * g(0, calcP(n)) - g(d + 1, calcP(n))\n\ntcase = int(input())\nfor _ in range(tcase):\n    n = int(input())\n    print(g(0, n))\n</code></pre>"},{"location":"en/2018-icpc-qingdao/b/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio2/373 (0.5%)"},{"location":"en/2018-icpc-qingdao/b/#tutorial","title":"Tutorial","text":"<p>This problem is the classic \"dsu on tree\". This problem mainly tests the participant's coding ability.</p> <p>If we think of the exam questions as vertices and bugs as edges, then the same connected component of vertices can only have the same answer. Therefore, if we don't fix any bugs, the answer of a connected component is the number of occurances of its mode, and the answer of the whole graph can be calculated by adding up the answers of all connected components.</p> <p>Next, let's consider what happens when we remove an edge. If the edge is not a bridge, then the connectivity of the graph does not change, and the answer does not change either. If the edge is a bridge, then one connected component will become two, and we need to subtract the number of times the mode appears in the original connected component, and then add the number of times the mode appears in the new connected components.</p> <p>Therefore, we first use Tarjan's algorithm to transform the biconnected components into single vertices, and each vertex records all the elements in the biconnected component. This way, the entire connected component becomes a tree, and removing an edge divides the tree into a subtree and the remaining part. Therefore, the problem becomes:</p> <p>Given a tree where each vertex contains some numbers, find the number of times the mode appears in each subtree and the number of times the mode appears outside each subtree.</p> <p>Finding the number of times the mode appears in each subtree is a classic \"dsu on tree\" problem. If you are not familiar with \"dsu on tree\", you can try CF600E or refer to oiwiki and this CF blog. We'll skip the introduction here.</p> <p>We will instead explain how to find the number of times the mode appears in \\(\\mathcal{O}(1)\\) time when a number is added or removed. </p> <p>We maintain <code>f[i]</code> to represent how many times the number \\(i\\) appears, and <code>g[i]</code> to represent how many numbers appear \\(i\\) times. Suppose the current number of times the mode appears is \\(a\\), when adding a number \\(x\\), we run the following code:</p> <pre><code>g[f[x]]--;\nf[x]++;\ng[f[x]]++;\na = max(a, f[x]);\n</code></pre> <p>When removing a number \\(x\\), we run the following code:</p> <pre><code>g[f[x]]--;\nf[x]--;\ng[f[x]]++;\n// the number of times x appears has been reduced by 1\n//   * if x was not the mode originally, it has no effect on the answer;\n//   * if x was the mode originally but there are more than one modes, it still has no effect on the answer;\n//   * if x was the mode originally and there is only one mode, the mode remains the same after x's occurrence is reduced by 1, and the answer decreases by 1 compared to the original answer.\na = g[a] &gt; 0 ? a : a - 1;\n</code></pre> <p>The mode outside the subtree is also easy to maintain. Before starting \"dsu on tree\", we first add all the numbers in the tree to the set. When updating the contribution of the subtree, we subtract the elements in the subtree from the set; when undoing the contribution of the subtree, we add the elements in the subtree back to the set.</p> <p>Therefore, the time complexity is \\(\\mathcal{O}(n\\log n)\\).</p>"},{"location":"en/2018-icpc-qingdao/b/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXM ((int) 1e5)\n#define MAXA ((int) 1e5)\nusing namespace std;\n\nint n, m, A[MAXN + 10], ans[MAXM + 10];\n\nvector&lt;int&gt; e[MAXN + 10], v[MAXN + 10];\nint clk, dfn[MAXN + 10], low[MAXN + 10];\nstack&lt;int&gt; stk;\nbool inS[MAXN + 10];\n\nint bCnt, bel[MAXN + 10];\nvector&lt;int&gt; nums[MAXN + 10];\n\nvector&lt;int&gt; E[MAXN + 10], V[MAXN + 10];\nint CLK, ORD[MAXN + 10], DL[MAXN + 10], DR[MAXN + 10], SZ[MAXN + 10], HEAVY[MAXN + 10];\n\n// add or delete one number each time, and calculate the number of times the mode appears\nstruct Mode {\n    int f[MAXA + 10], g[MAXN + 10], a;\n\n    void clear() {\n        for (int i = 1; i &lt;= n; i++) f[A[i]] = 0;\n        for (int i = 1; i &lt;= n; i++) g[i] = 0;\n        a = 0;\n    }\n\n    void add(int x) {\n        if (f[x]) g[f[x]]--;\n        f[x]++;\n        g[f[x]]++;\n        a = max(a, f[x]);\n    }\n\n    void del(int x) {\n        g[f[x]]--;\n        f[x]--;\n        if (f[x]) g[f[x]]++;\n        a = g[a] &gt; 0 ? a : a - 1;\n    }\n} M1, M2;\n\nvoid tarjan(int sn, int from) {\n    low[sn] = dfn[sn] = ++clk;\n    stk.push(sn); inS[sn] = true;\n    for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i], val = v[sn][i];\n        if (val == from) continue;\n        if (!dfn[fn]) {\n            tarjan(fn, val);\n            low[sn] = min(low[sn], low[fn]);\n        } else if (inS[fn]) {\n            low[sn] = min(low[sn], dfn[fn]);\n        }\n    }\n\n    if (dfn[sn] == low[sn]) {\n        bCnt++;\n        while (stk.top() != sn) {\n             bel[stk.top()] = bCnt;\n             inS[stk.top()] = false; stk.pop();\n        }\n        bel[sn] = bCnt;\n        inS[sn] = false; stk.pop();\n    }\n}\n\nvoid DFS(int sn, int fa) {\n    DL[sn] = ++CLK; ORD[CLK] = sn;\n    SZ[sn] = nums[sn].size(); HEAVY[sn] = 0;\n    for (int fn : E[sn]) if (fn != fa) {\n        DFS(fn, sn);\n        SZ[sn] += SZ[fn];\n        if (SZ[HEAVY[sn]] &lt; SZ[fn]) HEAVY[sn] = fn;\n    }\n    DR[sn] = CLK;\n}\n\nvoid DSU(int sn, bool keep, int from, int ALL) {\n    // firstly, traverse the light subtrees but don't keep their contributions\n    for (int i = 0; i &lt; E[sn].size(); i++) {\n        int fn = E[sn][i], val = V[sn][i];\n        if (val == from || fn == HEAVY[sn]) continue;\n        DSU(fn, false, val, ALL);\n    }\n    // then, traverse the heavy subtree and keep its contributions\n    for (int i = 0; i &lt; E[sn].size(); i++) {\n        int fn = E[sn][i], val = V[sn][i];\n        if (fn == HEAVY[sn]) DSU(fn, true, val, ALL);\n    }\n    // add contributions from light subtrees\n    for (int i = 0; i &lt; E[sn].size(); i++) {\n        int fn = E[sn][i], val = V[sn][i];\n        if (val == from || fn == HEAVY[sn]) continue;\n        for (int j = DL[fn]; j &lt;= DR[fn]; j++) for (int x : nums[ORD[j]]) M1.add(x), M2.del(x);\n    }\n    // add contributions from `sn` itself\n    for (int x : nums[sn]) M1.add(x), M2.del(x);\n    // we can now calculate the answer of `sn`\n    if (from) ans[from] = M1.a + M2.a - ALL;\n    if (keep) return;\n    // undo contributions from subtree of `sn`\n    for (int j = DL[sn]; j &lt;= DR[sn]; j++) for (int x : nums[ORD[j]]) M1.del(x), M2.add(x);\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    for (int i = 1; i &lt;= n; i++) e[i].clear(), v[i].clear();\n    for (int i = 1; i &lt;= m; i++) {\n        int x, y; scanf(\"%d%d\", &amp;x, &amp;y);\n        e[x].push_back(y); v[x].push_back(i);\n        e[y].push_back(x); v[y].push_back(i);\n    }\n\n    clk = 0; bCnt = 0;\n    memset(dfn, 0, sizeof(int) * (n + 3));\n    for (int i = 1; i &lt;= n; i++) if (!dfn[i]) tarjan(i, 0);\n\n    for (int i = 1; i &lt;= n; i++) nums[i].clear();\n    for (int i = 1; i &lt;= n; i++) nums[bel[i]].push_back(A[i]);\n\n    for (int i = 1; i &lt;= n; i++) E[i].clear(), V[i].clear();\n    for (int sn = 1; sn &lt;= n; sn++) for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i], val = v[sn][i];\n        if (bel[sn] == bel[fn]) continue;\n        E[bel[sn]].push_back(bel[fn]); V[bel[sn]].push_back(val);\n    }\n\n    CLK = 0;\n    memset(DL, 0, sizeof(int) * (n + 3));\n    memset(ans, 0, sizeof(int) * (m + 3));\n    for (int i = 1; i &lt;= n; i++) if (!DL[i]) {\n        DFS(i, 0);\n        for (int j = DL[i]; j &lt;= DR[i]; j++) for (int x : nums[ORD[j]]) M2.add(x);\n        ans[0] += M2.a;\n        DSU(i, false, 0, M2.a);\n        for (int j = DL[i]; j &lt;= DR[i]; j++) for (int x : nums[ORD[j]]) M2.del(x);\n    }\n    for (int i = 1; i &lt;= m; i++) printf(\"%d%c\", ans[i] + ans[0], \"\\n \"[i &lt; m]);\n    M1.clear(); M2.clear();\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/c/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio351/373 (94.1%)"},{"location":"en/2018-icpc-qingdao/c/#tutorial","title":"Tutorial","text":"<p>First, find out in which intervals \\(s\\) and \\(t\\) are different.</p> <p>We can only flip at most two intervals with two operations. If there are more than two intervals which are different, there is no solution and the answer is \\(0\\).</p> <p>Next, let's discuss the cases where there are \\(0\\), \\(1\\) or \\(2\\) different intervals.</p>"},{"location":"en/2018-icpc-qingdao/c/#no-different-interval","title":"No Different Interval","text":"<p>If \\(s\\) and \\(t\\) are equal, both operations must flip the same interval to keep \\(s\\) unchanged. So the answer is the number of non-empty intervals, that is, \\((\\frac{n(n - 1)}{2} + n)\\).</p>"},{"location":"en/2018-icpc-qingdao/c/#one-different-interval","title":"One Different Interval","text":"<p>If there is exactly one interval, we have two types of ways to perform the operations. Let the length of the interval be \\(l\\).</p> <p></p> <p>Type One: Choose two non-intersecting intervals such that their union is our target interval. There are \\(2(l - 1)\\) ways of this type.</p> <p>Type Two: Choose two intersecting intervals such that their difference is our target interval. There are \\(2(n - l)\\) ways of this type.</p> <p>So the answer is \\(2(l - 1) + 2(n - l) = 2(n - 1)\\)\u3002</p>"},{"location":"en/2018-icpc-qingdao/c/#two-different-intervals","title":"Two Different Intervals","text":"<p>If there are two intervals, we have three types of ways to perform the operations.</p> <p></p> <p>By changing the order of the two operations we get two ways from each type. So the answer is \\(2 \\times 3 = 6\\).</p> <p>The time complexity is \\(\\mathcal{O}(n)\\).</p>"},{"location":"en/2018-icpc-qingdao/c/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e6)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\nchar A[MAXN + 10], B[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%s%s\", &amp;n, A + 1, B + 1);\n\n    // calculate which intervals are different\n    vector&lt;pii&gt; vec;\n    int bgn = -1;\n    for (int i = 1; i &lt;= n; i++) if (A[i] != B[i]) {\n        if (A[i - 1] == B[i - 1]) bgn = i;\n        if (A[i + 1] == B[i + 1]) vec.push_back(pii(bgn, i));\n    }\n\n    // discuss the cases\n    if (vec.size() == 0) printf(\"%lld\\n\", 1LL * n * (n - 1) / 2 + n);\n    else if (vec.size() == 1) printf(\"%d\\n\", 2 * (n - 1));\n    else if (vec.size() == 2) printf(\"6\\n\");\n    else printf(\"0\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/d/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio99/373 (26.5%)"},{"location":"en/2018-icpc-qingdao/d/#tutorial","title":"Tutorial","text":"<p>Once \\(a_1\\) is determined, we can uniquely determine a \\(B\\). This is because:</p> <ul> <li>If the current product starts with \\(0\\), since \\(a_1 \\neq 0\\) is required by the problem, we must have \\(b_i=0\\).</li> <li> <p>If the current product starts with \\(1\\leq x\\leq 9\\), then there is only one number among \\(1\\) to \\(9\\) that, when multiplied by \\(a_1\\), can result in a number starting with \\(x\\).</p> <p>You might be concerned about whether there exist \\(b_i'\\) and \\(b_i''\\) such that \\(a_1\\times b_i' = x\\) and \\(a_1\\times b_i''\\) is a two-digit number starting with \\(x\\). Obviously, this is not possible, because a two-digit number starting with \\(x\\) is at least \\(10\\) times of \\(x\\), so \\(b_i''\\) must be at least \\(10\\) times of \\(b_i'\\), but we only consider numbers from \\(1\\) to \\(9\\).</p> </li> </ul> <p>Therefore, we enumerate \\(a_1\\) from \\(1\\) to \\(9\\). After obtaining all the elements in \\(B\\), we can reversely calculate all elements in \\(A\\) using \\(b_1\\), and finally check whether this group of \\(A\\) and \\(B\\) is valid.</p> <p>The time complexity is \\(\\mathcal{O}(9 \\times |s|)\\).</p>"},{"location":"en/2018-icpc-qingdao/d/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 2e5)\nusing namespace std;\n\nint n, m, sLen;\nchar s[MAXN + 10];\n\nint A[MAXN + 10], B[MAXN + 10], f[10][100];\n\n// given a factor (1 ~ 9) of the product, calculate the other factor (0 ~ 9)\n// x: the given factor\n// now: the position of product in s\nint gao(int x, int &amp;now) {\n    if (now &gt; sLen) return -1;\n\n    // product starts with 0, the other factor must be 0\n    if (s[now] == '0') {\n        now++;\n        return 0;\n    }\n\n    // product not start with 0, check the multiplication table\n    int t = s[now] - '0';\n    if (f[x][t] &gt; 0) {\n        now++;\n        return f[x][t];\n    }\n\n    t = t * 10 + (s[now + 1] - '0');\n    if (now &lt; sLen &amp;&amp; f[x][t] &gt; 0) {\n        now += 2;\n        return f[x][t];\n    }\n\n    return -1;\n}\n\n// enumerate a_1 = X\nbool check(int X) {\n    A[1] = X;\n\n    // use a_1 to determine all elements in B\n    int now = 1;\n    for (int i = 1; i &lt;= m; i++) {\n        B[i] = gao(X, now);\n        if (B[i] &lt; 0) return false;\n    }\n    // problem requires that b_1 != 0\n    if (B[1] == 0) return false;\n\n    for (int i = 2; i &lt;= n; i++) {\n        // use b_1 to reversely calculate a_i\n        // here b_1 != 0, so we can also use the gao() function\n        A[i] = gao(B[1], now);\n        if (A[i] &lt; 0) return false;\n        // check if the remaining product matches\n        for (int j = 2; j &lt;= m; j++) {\n            int t = A[i] * B[j];\n            int l = t &gt;= 10 ? 2 : 1;\n            for (int k = l - 1; k &gt;= 0; k--) {\n                if (now + k &gt; sLen || s[now + k] - '0' != t % 10) return false;\n                t /= 10;\n            }\n            now += l;\n        }\n    }\n\n    // we must use up all characters in the string\n    return now == sLen + 1;\n}\n\nvoid solve() {\n    scanf(\"%d%d%s\", &amp;n, &amp;m, s + 1);\n    sLen = strlen(s + 1);\n\n    // enumerate a_1\n    for (int i = 1; i &lt;= 9; i++) if (check(i)) {\n        for (int j = 1; j &lt;= n; j++) printf(\"%d\", A[j]);\n        printf(\" \");\n        for (int j = 1; j &lt;= m; j++) printf(\"%d\", B[j]);\n        printf(\"\\n\");\n        return;\n    }\n    printf(\"Impossible\\n\");\n}\n\nint main() {\n    // pre-calculate the multiplication table\n    for (int i = 1; i &lt;= 9; i++) for (int j = 1; j &lt;= 9; j++) f[i][i * j] = j;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/e/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio121/373 (32.4%)"},{"location":"en/2018-icpc-qingdao/e/#tutorial","title":"Tutorial","text":"<p>It is easy to think of binary search, next we need to consider how to verify the answer \\(x\\).</p> <p>Since we must move before watering each plant, to water the first plant to height \\(x\\) without wasting water, we need to repeatedly move between the first and second plants. After watering the first plant, in order to water the second plant to height \\(x\\) without wasting water, we need to repeatedly move between the second and third plants...</p> <p>Implement the above greedy process. The time complexity is \\(\\mathcal{O}(n\\log (m \\times \\max a_i))\\).</p>"},{"location":"en/2018-icpc-qingdao/e/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, A[MAXN + 10];\nlong long m;\n\n// indicates the current height of each plant\nlong long B[MAXN + 10];\n\nbool check(long long LIM) {\n    long long step = 0;\n    memset(B, 0, sizeof(long long) * (n + 3));\n    for (int i = 1; i &lt;= n; i++) {\n        if (LIM &gt; B[i]) {\n            // the i-th plant needs watering\n            // repeatedly move between it and the (i + 1)-th plant\n            long long t = LIM - B[i];\n            t = (t + A[i] - 1) / A[i];\n            step += t * 2 - 1;\n            // return immediately if the number of steps exceeds the limit\n            // otherwise the number of steps may exceed long long\n            if (step &gt; m) return false;\n            B[i + 1] += A[i + 1] * (t - 1);\n        } else {\n            // the i-th plant does not need watering\n            // just pass by, but we still need to count the steps\n            // the number of steps may exceed the limit here\n            // but we won't return false as long as\n            // there are no plants which need watering on the right\n            step++;\n        }\n    }\n    return true;\n}\n\nvoid solve() {\n    scanf(\"%d%lld\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    // binary search\n    long long head = 0, tail = 1e18;\n    while (head &lt; tail) {\n        long long mid = (head + tail + 1) &gt;&gt; 1;\n        if (check(mid)) head = mid;\n        else tail = mid - 1;\n    }\n    printf(\"%lld\\n\", head);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/f/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio114/373 (30.6%)"},{"location":"en/2018-icpc-qingdao/f/#tutorial","title":"Tutorial","text":"<p>If you only aim at solving the problem, you can calculate the first few answers and look for the pattern. You can see that there must be \\(k \\leq \\text{lowbit}(n) - 1\\) in order for there to be a solution, and in the \\(i\\)-th round of the competition (\\(i\\in [1, k]\\)), player \\(j\\) (\\(j \\in [0, n-1]\\)) will compete against player \\(i \\oplus j\\), where \\(\\oplus\\) denotes the XOR operation. The time complexity is \\(\\mathcal{O}(nk)\\).</p> <p>For a detailed proof, please refer to IMO 2006  problem C5 (Thanks for hos.lyric).</p>"},{"location":"en/2018-icpc-qingdao/f/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, K;\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;K);\n    int lb = n &amp; (-n);\n    if (K &gt;= lb) { printf(\"Impossible\\n\"); return; }\n    for (int i = 1; i &lt;= K; i++) for (int j = 0; j &lt; n; j++) printf(\"%d%c\", (i ^ j) + 1, \"\\n \"[j + 1 &lt; n]);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/g/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio8/373 (2.1%)"},{"location":"en/2018-icpc-qingdao/g/#tutorial","title":"Tutorial","text":""},{"location":"en/2018-icpc-qingdao/g/#considering-only-0-and-1","title":"Considering Only 0 and 1","text":"<p>First, let's consider the case where only \\(0\\) and \\(1\\) are present. Obviously, the answer is \\(k^m\\), where \\(k\\) is the number of intervals that do not contain \\(1\\).</p>"},{"location":"en/2018-icpc-qingdao/g/#adding-a-few-2s","title":"Adding a Few 2s","text":"<p>Let \\(\\{a_1a_2\\cdots a_n\\}\\) represent the answer to the sequence \\(a_1, a_2, \\cdots, a_n\\).</p> <p>Let's first consider an example with only one \\(2\\), such as \\(021\\). What we want is the \"number of ways where \\(2\\) must be covered.\" We can transform this into the \"number of ways where \\(2\\) may be covered\" minus the \"number of ways where \\(2\\) must not be covered.\"</p> <p>A position that \"may be covered\" is equivalent to a \\(0\\), and a position that \"must not be covered\" is equivalent to a \\(1\\). We can represent this with the following equation:</p> \\[ \\{021\\} = \\{0\\underline{0}1\\} - \\{0\\underline{1}1\\} \\] <p>The position of \\(2\\) in the original sequence is indicated by an underline. This transforms the problem into the case where only \\(0\\) and \\(1\\) are present.</p> <p>Next, let's consider an example with two \\(2\\)s, such as \\(02121\\). We can use the same method to obtain the following equation:</p> \\[ \\begin{matrix} \\{02121\\} &amp; = &amp; \\{0\\underline{0}121\\} - \\{0\\underline{1}121\\} \\\\  &amp; = &amp; (\\{0\\underline{0}1\\underline{0}1\\} - \\{0\\underline{0}1\\underline{1}1\\}) - (\\{0\\underline{1}1\\underline{0}1\\} - \\{0\\underline{1}1\\underline{1}1\\}) \\\\  &amp; = &amp; \\{0\\underline{0}1\\underline{0}1\\} - \\{0\\underline{0}1\\underline{1}1\\} - \\{0\\underline{1}1\\underline{0}1\\} + \\{0\\underline{1}1\\underline{1}1\\} \\\\ \\end{matrix} \\] <p>This also transforms the problem into the case where only \\(0\\) and \\(1\\) are present.</p>"},{"location":"en/2018-icpc-qingdao/g/#generalizing","title":"Generalizing","text":"<p>If you are familiar with the principle of inclusion-exclusion, you may quickly recognize that the above equations are examples of this principle. We can express the answer in terms of the principle of inclusion-exclusion:</p> \\[ \\sum (-1)^{c(a_1a_2\\cdots a_n)} \\times k(a_1a_2\\cdots a_n)^m \\] <p>Here, \\(a_1, a_2, \\cdots, a_n\\) is a sequence composed of \\(0\\), \\(1\\), \\(\\underline{0}\\), and \\(\\underline{1}\\), \\(c(a_1a_2\\cdots a_n)\\) represents the number of underlined \\(1\\)s in the sequence, and \\(k(a_1a_2\\cdots a_n)\\) represents the number of intervals in the sequence that do not contain \\(1\\) or \\(\\underline{1}\\).</p> <p>Note that the value of the expression only depends on the parity of \\(c\\) and the number of valid intervals, so we maintain \\(f(i,j,0/1)\\) which represents the number of valid intervals with even/odd total occurrences of \\(1\\) and \\(\\underline{1}\\), considering only the first \\(i\\) elements. Since the number of valid intervals only depends on the position of \\(1\\) and \\(\\underline{1}\\), we can skip all the \\(0\\)s and only perform DP between the possible positions of \\(1\\) and \\(\\underline{1}\\).</p> <p>To simplify the calculation, we define \\(a_0=a_{n+1}=1\\), which does not affect the final answer. The final answer is then</p> \\[ \\sum\\limits_{j=0}^{\\frac{n(n + 1)}{2}} (f(n + 1, j, 0) - f(n + 1, j, 1)) \\times j^m \\] <p>Note that in the inclusion-exclusion formula, the sign of each term only depends on the number of occurrences of \\(\\underline{1}\\) in the sequence, while in the DP state \\(0/1\\) represents the total number of both \\(1\\) and \\(\\underline{1}\\). Therefore, if \\(1\\) occurs an odd number of times in the original sequence, the answer needs to be multiplied by \\(-1\\).</p> <p>Consider how many valid intervals will be added when we add a \\(1\\) or \\(\\underline{1}\\) to the end of the sequence. Obviously, the number of valid intervals only depends on the position of the previous \\(1\\) or \\(\\underline{1}\\), so we iterate over the previous \\(1\\) or \\(\\underline{1}\\) and obtain the equation:</p> \\[ f(i, k + \\frac{(i - j)(i - j - 1)}{2}, 0/1) = \\sum\\limits_{j=\\text{last}}^{i - 1} f(j, k, 1/0) \\] <p>where \\(\\text{last}\\) is the position of the previous \\(1\\) in the original sequence (no need to consider earlier than this position, because \\(2\\) can be replaced with \\(\\underline{0}\\), but a position that was originally \\(1\\) cannot be replaced). The initial values are \\(f(0,0,0)=0\\) and \\(f(0,0,1)=1\\) (because \\(a_0=1\\)).</p> <p>The time complexity is \\(\\mathcal{O}(n^4)\\), but the constant factor is very small. For example, the complexity of the solution below is</p> \\[ \\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^i \\frac{j^2}{2} \\approx \\frac{n^4}{48} \\] <p>which can pass easily.</p>"},{"location":"en/2018-icpc-qingdao/g/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 100\n#define MOD ((int) 1e9 + 7)\nusing namespace std;\n\nint n, m, A[MAXN + 10];\nlong long ans;\n\nlong long f[MAXN + 10][(MAXN + 1) * MAXN / 2 + 10][2];\nint lim[MAXN + 10];\n\nlong long power(long long a, long long b) {\n    long long y = 1;\n    for (; b; b &gt;&gt;= 1) {\n        if (b &amp; 1) y = y * a % MOD;\n        a = a * a % MOD;\n    }\n    return y;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n    A[0] = A[n + 1] = 1;\n\n    f[0][0][0] = 0; f[0][0][1] = 1; lim[0] = 0;\n    for (int i = 1, last = 0; i &lt;= n + 1; i++) if (A[i] &gt; 0) {\n        // lim[i] indicates the maximum possible number of valid intervals in the first i elements\n        lim[i] = lim[last] + (i - last) * (i - last - 1) / 2;\n        for (int j = 0; j &lt;= lim[i]; j++) f[i][j][0] = f[i][j][1] = 0;\n        // use the formula\n        for (int j = last; j &lt; i; j++) if (A[j] &gt; 0) {\n            int delta = (i - j) * (i - j - 1) / 2;\n            for (int k = 0; k &lt;= lim[j]; k++) {\n                f[i][k + delta][0] = (f[i][k + delta][0] + f[j][k][1]) % MOD;\n                f[i][k + delta][1] = (f[i][k + delta][1] + f[j][k][0]) % MOD;\n            }\n        }\n        if (A[i] == 1) last = i;\n    }\n\n    // if 1 occurs an odd number of times in the original sequence, the answer should multiply -1\n    bool odd = false;\n    for (int i = 0; i &lt;= n + 1; i++) if (A[i] == 1) odd = !odd;\n\n    ans = 0;\n    for (int i = 0; i &lt;= lim[n + 1]; i++) ans = (ans + (f[n + 1][i][0] - f[n + 1][i][1] + MOD) * power(i, m)) % MOD;\n    if (odd) ans = (MOD - ans) % MOD;\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/h/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio0/373 (0.0%)"},{"location":"en/2018-icpc-qingdao/h/#tutorial","title":"Tutorial","text":"<p>We first deal with some special cases.</p> <ul> <li>If the segment connecting the start and end points has no obstacles, the answer is \\((2m - 1) \\times l\\), where \\(l\\) is the distance between the start and end points.</li> <li>Otherwise, if \\(m = 1\\), we only need to consider the shortest path from the start to the end, avoiding obstacles and mirrors, no need to consider whether the path can see the start or end points. Therefore, we only need to consider the graph consisting of these seven points: start, end, obstacle vertices, and mirror endpoints, and compute the shortest path from the start to the end.</li> <li>Otherwise, \\(m &gt; 1\\). This requires the existence of a route from the start to the end that can see both the start and end points at any point on the route. If either the start or end point is to the left of the mirror, without loss of generality let's assume that the end point is to the left of the mirror, then it will be impossible to see the start point from the end point, because the segment connecting the start and end points has an obstacle, and the end point cannot see the mirror. Therefore, this case has no solution.</li> </ul> <p>After excluding the above special cases, the remaining case is: \\(m &gt; 1\\), there are obstacles on the segment connecting the start and end points, and both points are to the right of the mirror.</p> <p>At this point, the optimal route will be divided into three parts:</p> <ul> <li>At the beginning, we move the first stone from the start to the end, through a route where the start point can be seen at any time.</li> <li>In the middle, we need a route which is able to see the start and end points at any time, and this path will be repeated \\((2m-3)\\) times.</li> <li>Finally, we move the last stone from the start to the end, through a route where the end point can be seen at any time.</li> </ul> <p>Therefore, we need to consider which lines, as they are crossed, may change the visibility of the start and end points. A graph is built based on the intersection points of these lines. We need to calculate the length of the segment between any two points, whether there are obstacles on the segment, and whether each point on the segment can see the start and end points. Finally, the shortest path from the start to the end is calculated under specific visibility requirements.</p> <p>The lines that cause changes in visibility are:</p> <ol> <li>The line connecting the start/end point and the obstacle vertex.</li> <li>The line connecting the start/end point and the mirror endpoint.</li> <li>The line connecting the mirror image of the start/end point and the mirror endpoint.</li> <li>The line connecting the mirror image of the start/end point and the obstacle vertex.</li> <li>The line connecting the mirror image of the start/end point and the mirror image of the obstacle vertex.</li> </ol> <p></p> <p>You may think that the boundary of the obstacle and the mirror will also change the visibility, why not consider them? Because a valid path cannot cross the boundary of the obstacle or mirror, there is no need to consider them.</p> <p>When calculating whether each point on the segment between two points can always see the start and end points, since the segment may cross multiple lines that change the visibility, it is necessary to find the intersection points of the segment with each line and check the visibility of the midpoint of adjacent intersection points. This is correct because the region enclosed by the visibility lines is convex.</p> <p>There is also an optimization for this problem: in fact, the optimal route is always on the right side of the mirror, so all points on the mirror line and to the left of it can be excluded, and only the points on the right side of the mirror need to be considered. We now roughly calculate the number of points we need to consider. Notice that the \\(1\\)-st type and the \\(5\\)-th type of lines are symmetrical, also the \\(2\\)-nd type and the \\(3\\)-rd type of lines are symmetrical. So the number of intersections of these lines on the right of the mirror is \\(5 \\times (15 + 10 + 5) \\div 2 = 75\\). Even if the intersections of the \\(4\\)-th type of lines are all on the right of mirror, the number of points to consider will be at most \\(75 + 3 \\times 18 + 3 \\times 10 = 159\\). Adding the start and end points, there will be \\(161\\) points.</p> <p>So the time complexity is \\(\\mathcal{O}(n^2t + n^2\\log n)\\), where \\(n = 161\\) is the number of points to consider, and \\(t = 26\\) is the number of lines to change visibility.</p>"},{"location":"en/2018-icpc-qingdao/h/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN 200\nusing namespace std;\ntypedef long double db;\n\nconst db eps = 1e-12;\nconst db inf = 1.0 / 0.0;\n\nint sgn(db x) {\n    if (x &gt; eps) return 1;\n    else if (x &lt; -eps) return -1;\n    else return 0;\n}\n\nstruct Point {\n    db x, y;\n\n    Point() {}\n    Point(db x, db y): x(x), y(y) {}\n\n    db len() const {\n        return sqrt(x * x + y * y);\n    }\n\n    Point operator +(const Point &amp;p) const {\n        return Point(x + p.x, y + p.y);\n    }\n\n    Point operator -(const Point &amp;p) const {\n        return Point(x - p.x, y - p.y);\n    }\n\n    Point operator *(db k) const {\n        return Point(x * k, y * k);\n    }\n\n    Point operator /(db k) const {\n        return Point(x / k, y / k);\n    }\n\n    db operator *(const Point &amp;p) const {\n        return x * p.y - p.x * y;\n    }\n\n    db operator ^(const Point &amp;p) const {\n        return x * p.x + y * p.y;\n    }\n\n    bool operator &lt;(const Point &amp;p) const {\n        return sgn(x - p.x) &lt; 0 || (sgn(x - p.x) == 0 &amp;&amp; sgn(y - p.y) &lt; 0);\n    }\n\n    bool operator ==(const Point &amp;p) const {\n        return sgn(x - p.x) == 0 &amp;&amp; sgn(y - p.y) == 0;\n    }\n};\n\nstruct Line {\n    Point s, t;\n\n    Line() {}\n    Line(Point s, Point t): s(s), t(t) {}\n\n    db intersectRatio(const Line &amp;l) const {\n        if (sgn((t - s) * (l.t - l.s)) == 0) return inf;\n        db u = (l.s - s) * (l.t - l.s), v = (t - s) * (l.t - l.s);\n        return u / v;\n    }\n\n    vector&lt;Point&gt; operator &amp;(const Line &amp;l) const {\n        db r = intersectRatio(l);\n        if (r == inf) return {};\n        return {s + (t - s) * r};\n    }\n\n    Point reflect(const Point &amp;p) const {\n        db u = ((p - s) ^ (t - s)), v = (t - s).len();\n        return (s + (t - s) * (u / v / v)) * 2 - p;\n    }\n\n    db len() const {\n        return sqrt((s.x - t.x) * (s.x - t.x) + (s.y - t.y) * (s.y - t.y));\n    }\n};\n\nint X;\n// s, t: start and end points\n// m1, m2: endpoints of mirror\n// a[i]: obstacle vertices\nPoint s, t, m1, m2, a[3];\n// poly[i]: an edge of the obstacle polygon\nLine poly[3];\n\n// ms, mt: mirror image of start and end points\n// ma[i]: mirror image of obstacle vertices\nPoint ms, mt, ma[3];\n// mr: mirror\n// mpoly[i]: mirror image of an edge of the obstacle polygon\nLine mr, mpoly[3];\n\n// calculate if segment l1 and l2 intersect\n// `strict` means if they're strictly intersecting\n// (if `strict == true` then intersecting on endpoints are not counted)\nbool segmentIntersect(Line &amp;l1, Line &amp;l2, bool strict) {\n    db r1 = l1.intersectRatio(l2), r2 = l2.intersectRatio(l1);\n    if (strict) return sgn(r1) &gt; 0 &amp;&amp; sgn(r1 - 1) &lt; 0 &amp;&amp; sgn(r2) &gt; 0 &amp;&amp; sgn(r2 - 1) &lt; 0;\n    else return sgn(r1) &gt;= 0 &amp;&amp; sgn(r1 - 1) &lt;= 0 &amp;&amp; sgn(r2) &gt;= 0 &amp;&amp; sgn(r2 - 1) &lt;= 0;\n}\n\n// check if segment l strictly intersects with obstacle or mirror\nbool check(Line &amp;l) {\n    for (int i = 0; i &lt; 3; i++) if (segmentIntersect(l, poly[i], true)) return false;\n    if (segmentIntersect(l, mr, true)) return false;\n    return true;\n}\n\nint n;\nvector&lt;int&gt; e[MAXN], msk[MAXN];\nvector&lt;db&gt; v[MAXN];\ndb dis[MAXN];\n\ndb dijkstra(int MSK) {\n    for (int i = 0; i &lt; n; i++) dis[i] = inf;\n    typedef pair&lt;db, int&gt; pdi;\n    priority_queue&lt;pdi&gt; pq;\n    pq.push(pdi(0, 0));\n    while (!pq.empty()) {\n        pdi p = pq.top(); pq.pop();\n        int sn = p.second;\n        if (dis[sn] &lt; inf) continue;\n        dis[sn] = -p.first;\n        for (int i = 0; i &lt; e[sn].size(); i++) {\n            int fn = e[sn][i];\n            if ((MSK &amp; msk[sn][i]) == MSK)\n                pq.push(pdi(-dis[sn] - v[sn][i], fn));\n        }\n    }\n    return dis[1];\n}\n\n// building graph of special case #2\n// we only consider shortest paths among start/end points, obstacle vertices and mirror endpoints\n// no need to consider visibility\nvoid build1() {\n    vector&lt;Point&gt; keys;\n    keys.push_back(s); keys.push_back(t);\n    keys.push_back(m1); keys.push_back(m2);\n    for (int i = 0; i &lt; 3; i++) keys.push_back(a[i]);\n\n    n = keys.size();\n    for (int i = 0; i &lt; n; i++) e[i].clear(), v[i].clear(), msk[i].clear();\n    for (int i = 0; i &lt; n; i++) for (int j = i + 1; j &lt; n; j++) {\n        Line l(keys[i], keys[j]);\n        if (!check(l)) continue;\n        e[i].push_back(j); v[i].push_back(l.len()); msk[i].push_back(0);\n        e[j].push_back(i); v[j].push_back(l.len()); msk[j].push_back(0);\n    }\n}\n\n// if point `p` can see point `goal` directly or through mirror\nbool visible(Point &amp;p, Point &amp;goal) {\n    // see directly\n    Line l = Line(p, goal);\n    if (check(l)) return true;\n    // see through mirror\n    l = Line(p, mr.reflect(goal));\n    // if we want to see through mirror,\n    // then the segment connecting `p` and mirror image of `goal` must not intersect with\n    // obstacle or mirror image of obstacle\n    if (!segmentIntersect(l, mr, false)) return false;\n    for (int i = 0; i &lt; 3; i++) {\n        if (segmentIntersect(l, poly[i], true)) return false;\n        if (segmentIntersect(l, mpoly[i], true)) return false;\n    }\n    return true;\n}\n\n// if all points on segment `l` can see point `goal`\n// border: the lines which change visibility\nint visible(Line &amp;l, Point &amp;goal, vector&lt;Line&gt; &amp;border) {\n    typedef pair&lt;db, Point&gt; pdp;\n    vector&lt;pdp&gt; vec;\n    vec.push_back(pdp(0, l.s));\n    vec.push_back(pdp(1, l.t));\n    // calculate intersections of segment `l` and `border`\n    for (Line &amp;b : border) {\n        db r = l.intersectRatio(b);\n        if (sgn(r) &gt; 0 &amp;&amp; sgn(r - 1) &lt; 0) vec.push_back(pdp(r, l.s + (l.t - l.s) * r));\n    }\n    sort(vec.begin(), vec.end());\n\n    // check visibility of all passed areas\n    // because every area is convex, we only need to check the mid-points of neighboring intersections\n    for (int i = 1; i &lt; vec.size(); i++) {\n        Point p = (vec[i - 1].second + vec[i].second) / 2;\n        if (!visible(p, goal)) return 0;\n    }\n    return 1;\n}\n\n// building graph of normal cases\n// consider intersections of lines which may change visibility\nvoid build2() {\n    // calculate the lines which may change visibility\n    vector&lt;Line&gt; border;\n\n    border.push_back(Line(s, m1)); border.push_back(Line(s, m2));\n    border.push_back(Line(t, m1)); border.push_back(Line(t, m2));\n    for (int i = 0; i &lt; 3; i++) {\n        border.push_back(Line(s, a[i]));\n        border.push_back(Line(t, a[i]));\n    }\n\n    border.push_back(Line(ms, m1)); border.push_back(Line(ms, m2));\n    border.push_back(Line(mt, m1)); border.push_back(Line(mt, m2));\n    for (int i = 0; i &lt; 3; i++) {\n        border.push_back(Line(ms, a[i])); border.push_back(Line(ms, ma[i]));\n        border.push_back(Line(mt, a[i])); border.push_back(Line(mt, ma[i]));\n    }\n\n    // calculate intersections of `border` and only consider points on the right of mirror\n    vector&lt;Point&gt; keys;\n    keys.push_back(s); keys.push_back(t);\n    for (Line &amp;l1 : border) for (Line &amp;l2 : border) for (Point &amp;p : l1 &amp;l2)\n        if (sgn((m2 - m1) * (p - m1)) &lt; 0 &amp;&amp; find(keys.begin(), keys.end(), p) == keys.end())\n            keys.push_back(p);\n\n    n = keys.size();\n    for (int i = 0; i &lt; n; i++) e[i].clear(), v[i].clear(), msk[i].clear();\n    // check if segments between two points are valid and calculate visibility\n    for (int i = 0; i &lt; n; i++) for (int j = i + 1; j &lt; n; j++) {\n        Line l = Line(keys[i], keys[j]);\n        // segment intersects with obstacle, can't go from keys[i] to keys[j] directly\n        if (!check(l)) continue;\n        // calculate if every point on the segment can see start and end points\n        int tmp = visible(l, s, border) + visible(l, t, border) * 2;\n        e[i].push_back(j); v[i].push_back(l.len()); msk[i].push_back(tmp);\n        e[j].push_back(i); v[j].push_back(l.len()); msk[j].push_back(tmp);\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;X);\n    scanf(\"%Lf%Lf%Lf%Lf\", &amp;s.x, &amp;s.y, &amp;t.x, &amp;t.y);\n    scanf(\"%Lf%Lf%Lf%Lf\", &amp;m1.x, &amp;m1.y, &amp;m2.x, &amp;m2.y);\n    for (int i = 0; i &lt; 3; i++) scanf(\"%Lf%Lf\", &amp;a[i].x, &amp;a[i].y);\n\n    mr = Line(m1, m2);\n    ms = mr.reflect(s); mt = mr.reflect(t);\n    for (int i = 0; i &lt; 3; i++) ma[i] = mr.reflect(a[i]);\n    for (int i = 0; i &lt; 3; i++) {\n        poly[i] = Line(a[i], a[(i + 1) % 3]);\n        mpoly[i] = Line(ma[i], ma[(i + 1) % 3]);\n    }\n\n    Line st(s, t);\n    if (check(st)) {\n        // special case #1: no obstacle on segment between `s` and `t`\n        printf(\"%.12Lf\\n\", st.len() * (2 * X - 1));\n    } else if (X == 1) {\n        // special case #2: only one stone\n        build1();\n        db ans = dijkstra(0);\n        if (ans &lt; inf) printf(\"%.12Lf\\n\", ans);\n        else printf(\"-1\\n\");\n    } else if (sgn((m2 - m1) * (s - m1)) &lt; 0 &amp;&amp; sgn((m2 - m1) * (t - m1)) &lt; 0) {\n        // normal case:\n        // more than one stone\n        // segment between `s` and `t` has obstacle\n        // both start and end points are on the right of mirror\n        build2();\n        db ans = dijkstra(1) + dijkstra(3) * (2 * X - 3) + dijkstra(2);\n        if (ans &lt; inf) printf(\"%.12Lf\\n\", ans);\n        else printf(\"-1\\n\");\n    } else {\n        // special case #3:\n        // more than one stone\n        // segment between `s` and `t` has obstacle\n        // either of both start and end points are on the left of mirror\n        printf(\"-1\\n\");\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/i/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio6/373 (1.6%)"},{"location":"en/2018-icpc-qingdao/i/#tutorial","title":"Tutorial","text":"<p>Let's describe the problem in another way.</p> <p>Use segments of length \\(1\\) or \\(2\\) to cover the whole sequence. The value of a segment is the sum of elements it covers. Minimize the difference between the maximum value and the minimum value.</p> <p>Let's solve this problem using segment trees. Let \\(f(l, r, x \\in \\{0, 1\\}, y \\in \\{0, 1\\})\\) indicate the smallest max-value to cover the sub-array \\(a_l, a_{l + 1}, \\cdots, a_r\\). More precisely:</p> <ul> <li>\\(x = 0\\) indicates that the segment covering \\(a_l\\) is completely included in interval \\([l, r]\\). That is, the segment covering \\(a_l\\) is either \\([l, l]\\) or \\([l, l + 1]\\).</li> <li>\\(x = 1\\) indicates that the segment covering \\(a_l\\) is not completely included in interval \\([l, r]\\). That is, the segment covering \\(a_l\\) is \\([l - 1, l]\\).</li> <li>\\(y = 0\\) indicates that the segment covering \\(a_r\\) is completely included in interval \\([l, r]\\). That is, the segment covering \\(a_r\\) is either \\([r, r]\\) or \\([r - 1, r]\\).</li> <li>\\(y = 1\\) indicates that the segment covering \\(a_r\\) is not completely included in interval \\([l, r]\\). That is, the segment covering \\(a_r\\) is \\([r, r + 1]\\).</li> </ul> <p>We can get the recursive equation on segment tree:</p> \\[ f(l, r, x, y) = \\min_{k \\in {0, 1}} \\{ \\max(f(l, m, x, k), f(m + 1, r, k, y)) \\} \\] <p>where \\(m = \\lfloor\\frac{l + r}{2}\\rfloor\\). The answer is \\(f(1, n, 0, 0)\\). The initial values are:</p> <ul> <li>\\(f(i, i, 0, 0) = a_i\\), this is the segment of length \\(1\\).</li> <li>\\(f(i, i, 0, 1) = a_i + a_{i + 1}\\), this is the segment of length \\(2\\).</li> <li>\\(f(i, i, 1, 0) = -\\infty\\), the cost covering \\(a_i\\) is calculated in the previous interval.</li> <li>\\(f(i, i, 1, 1) = +\\infty\\), \\(a_i\\) cannot be covered by two segments.</li> </ul> <p>Next, we enumerate the min-value \\(v\\), and remove all segments whose value is smaller than \\(v\\) (no need to really remove them, just change their value to \\(+\\infty\\)), now the answer becomes \\(f(1, n, 0, 0) - v\\).</p> <p>There are \\((2n - 1)\\) possible values of \\(v\\). For each \\(v\\) modify the value of segments with segment tree and calculate the value of \\(f\\). The time complexity is \\(\\mathcal{O}(n\\log n)\\).</p>"},{"location":"en/2018-icpc-qingdao/i/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define INF ((long long) 1e18)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\ntypedef pair&lt;long long, pii&gt; plii;\n\nint n, A[MAXN + 10];\nlong long ans;\n\nlong long f[MAXN * 4 + 10][2][2];\n\n// update the value of f on segment trees according to recursive equations\nvoid update(int id) {\n    int nxt = id &lt;&lt; 1;\n    for (int i = 0; i &lt;= 1; i++) for (int j = 0; j &lt;= 1; j++) {\n        f[id][i][j] = INF;\n        for (int k = 0; k &lt;= 1; k++) f[id][i][j] = min(f[id][i][j], max(f[nxt][i][k], f[nxt | 1][k][j]));\n    }\n}\n\n// build the segment tree\nvoid build(int id, int l, int r) {\n    if (l == r) {\n        // initial values\n        f[id][0][0] = A[l];\n        f[id][0][1] = l &lt; n ? A[l] + A[l + 1] : INF;\n        f[id][1][0] = l &gt; 1 ? -INF : INF;\n        f[id][1][1] = INF;\n    } else {\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        build(nxt, l, mid);\n        build(nxt | 1, mid + 1, r);\n        update(id);\n    }\n}\n\n// change the value of segment to +INF, the segment starts at `pos` and has a length of `len`\nvoid modify(int id, int l, int r, int pos, int len) {\n    if (l == r) {\n        if (len == 1) f[id][0][0] = INF;\n        else f[id][0][1] = INF;\n    } else {\n        int nxt = id &lt;&lt; 1, mid = (l + r) &gt;&gt; 1;\n        if (pos &lt;= mid) modify(nxt, l, mid, pos, len);\n        else modify(nxt | 1, mid + 1, r, pos, len);\n        update(id);\n    }\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) scanf(\"%d\", &amp;A[i]);\n\n    build(1, 1, n);\n    // sort the value of all segments to enumerate the min-value\n    vector&lt;plii&gt; vec;\n    for (int i = 1; i &lt;= n; i++) vec.push_back(plii(A[i], pii(i, 1)));\n    for (int i = 1; i &lt; n; i++) vec.push_back(plii(A[i] + A[i + 1], pii(i, 2)));\n    sort(vec.begin(), vec.end());\n\n    ans = INF;\n    // enumerate the min-value\n    for (plii p : vec) {\n        ans = min(ans, f[1][0][0] - p.first);\n        modify(1, 1, n, p.second.first, p.second.second);\n    }\n    printf(\"%lld\\n\", ans);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/j/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio350/373 (93.8%)"},{"location":"en/2018-icpc-qingdao/j/#tutorial","title":"Tutorial","text":"<p>You might think of binary search at the beginning. However this problem cannot be solved with binary search. Consider three books whose prices are \\(4\\), \\(1\\) and \\(2\\) respectively. If we have \\(3\\) coins we can by the last two books, however if we have \\(4\\) coins we can only buy the first book, and then if we have \\(5\\) coins we can buy the first two books.</p> <p>Let's first deal with some special cases.</p> <ul> <li>If all the books are bought, the answer is <code>Richman</code>.</li> <li>As books with a price of \\(0\\) must be bought, let \\(z\\) be the number of books with a price of \\(0\\), if \\(z &gt; m\\) the answer is <code>Impossible</code>.</li> </ul> <p>We now solve the common cases. Firstly remove all the books of price \\(0\\), we will then buy \\((m - z)\\) books from the remaining \\((n - z)\\) books. It is not hard to find out that the answer is the sum of the prices of the first \\((m - z)\\) books, plus the minimum price of the remaining \\((n - m)\\) books, and then minus one. It is easy to see that if we increase our initial money by any amount, we'll buy at least one more remaining book.</p> <p>The time complexity is \\(\\mathcal{O}(n)\\).</p>"},{"location":"en/2018-icpc-qingdao/j/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\nusing namespace std;\n\nint n, m, A[MAXN + 10];\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n\n    int zero = 0;\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d\", &amp;A[i]);\n        if (A[i] == 0) zero++;\n    }\n\n    // special cases\n    if (n == m) printf(\"Richman\\n\");\n    else if (zero &gt; m) printf(\"Impossible\\n\");\n    else {\n        m -= zero;\n        // calculate the sum of prices of the first (m - zero) books\n        long long sm = 0;\n        int i;\n        for (i = 1; m &gt; 0; i++) {\n            if (A[i] == 0) continue;\n            sm += A[i];\n            m--;\n        }\n        // calculate the minimum price of the remaining (n - m) books\n        int mn = 1e9;\n        for (; i &lt;= n; i++) if (A[i] &gt; 0) mn = min(mn, A[i]);\n        // output the answer\n        printf(\"%lld\\n\", sm + mn - 1);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/k/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio10/373 (2.7%)"},{"location":"en/2018-icpc-qingdao/k/#tutorial","title":"Tutorial","text":"<p>Let's build a new coordinate system, where the original point is on the position of the airdrop. We now study which players may collide with each other.</p> <ul> <li>Because all players move at the same time, only the players whose distance to the original point are the same may collide with each other.</li> <li>Because all players will first move vertically then horizontally, only the players on the same side of the \\(y\\)-axis may collide with each other.</li> <li>According to the problem statement, players on the \\(y\\)-axis will never collide.</li> </ul> <p>We now consider when the original point moves gradually to the right, what changes will happen to the number of colliding players. According to the second point stated above, we can consider the players on different sides of the \\(y\\)-axis separately. We now only consider the players on the left side of the \\(y\\)-axis.</p> <ul> <li>If no player falls from the \\(y\\)-axis to the left, because the distances of all players to the original point will be increased by the same value, the number of colliding players will not change.</li> <li>If there are some players falling from the \\(y\\)-axis to the left, let's look at all players whose distance to the original point equals \\(d\\).<ul> <li>There are at most \\(2\\) players falling from the \\(y\\)-axis, their \\(y\\)-coordinates are \\(d\\) and \\(-d\\).</li> <li>Because all colliding players will be eliminated, there will be at most \\(1\\) surviving player who is already on the left of \\(y\\)-axis.</li> <li>To produce a surviving player with distance \\(d\\), the total number of these two types of players must be exactly \\(1\\).</li> </ul> </li> </ul> <p>From the above statements we can see that, we are only interested in the \\(x\\) values of the players and the \\(x\\) values that differ by exactly \\(1\\) from them. Only these \\(x\\) values will change the number of colliding players. Thus we need to calculate at most \\(3n\\) times.</p> <p>Implement the procedure above, we can calculate \\(L(x)\\) and \\(R(x)\\), indicating that when the \\(x\\)-coordinate of the airdrop is \\(x\\), how many players on its left (or right) will survive. The total number of surviving players is \\(L(x) + R(x)\\), plus the number of players whose \\(x\\)-coordinate equals \\(x\\).</p> <p>The time completixy is \\(\\mathcal{O}(n\\log n)\\), because we need to sort and deduplicate the coordinates. The core algorithm runs in \\(\\mathcal{O}(n)\\).</p>"},{"location":"en/2018-icpc-qingdao/k/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXX ((int) 1e5)\nusing namespace std;\n\nint n, X[MAXN + 10], Y[MAXN + 10];\n\n// mp[x][y]: the number of players (at most 2) whose x-coordinate equals x and y-coordinate equals y\nunordered_map&lt;int, int&gt; mp[MAXX + 10];\nint L[MAXN * 3 + 10], R[MAXN * 3 + 10];\n\nvoid gao(vector&lt;int&gt; &amp;keys, int *f) {\n    // which distances have surviving players\n    unordered_set&lt;int&gt; live;\n    int BIAS = 0;\n\n    f[keys[0]] = 0;\n    for (int i = 1; i &lt; keys.size(); i++) {\n        int x = keys[i], last = keys[i - 1];\n        if (mp[last].size() &gt; 0) {\n            // there are players coming to the left of airdrop\n            for (auto &amp;p : mp[last]) {\n                int y = p.first, cnt = p.second;\n                // to produce a surviving player with this distance,\n                // the total number of players of the two types must be 1,\n                // otherwise all players will be eliminated\n                if (live.count(y - BIAS) + cnt == 1) live.insert(y - BIAS);\n                else live.erase(y - BIAS);\n            }\n        }\n        // distances of all players to the original point are increased by the same value\n        BIAS += abs(x - last);\n        // record the number of surviving players when the x-coordinate of airdrop is x\n        f[x] = live.size();\n    }\n}\n\nvoid solve() {\n    // adjust the coordinate system, so the airdrop will lie on the x-axis\n    int Y0; scanf(\"%d%d\", &amp;n, &amp;Y0);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%d%d\", &amp;X[i], &amp;Y[i]);\n        Y[i] -= Y0;\n    }\n\n    // extract the x values we are interested in\n    vector&lt;int&gt; keys;\n    for (int i = 1; i &lt;= n; i++) {\n        mp[X[i]][abs(Y[i])]++;\n        for (int j = -1; j &lt;= 1; j++) keys.push_back(X[i] + j);\n    }\n\n    // calculate the number of surviving players on the left of airdrop\n    sort(keys.begin(), keys.end());\n    keys.resize(unique(keys.begin(), keys.end()) - keys.begin());\n    gao(keys, L);\n\n    // calculate the number of surviving players on the right of airdrop\n    reverse(keys.begin(), keys.end());\n    gao(keys, R);\n\n    // calculate the final answer\n    int mn = n + 1, mx = 0;\n    for (int x : keys) {\n        // surviving players from the left and right\n        int t = L[x] + R[x];\n        // plus the number of players whose x-coordinate is the same with airdrop\n        if (mp[x].size() &gt; 0) for (auto &amp;p : mp[x]) t += p.second;\n        mn = min(mn, t);\n        mx = max(mx, t);\n    }\n    printf(\"%d %d\\n\", mn, mx);\n\n    // multiple test cases, clean up global variables\n    for (int x : keys) mp[x].clear(), L[x] = R[x] = 0;\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/l/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio23/373 (6.2%)"},{"location":"en/2018-icpc-qingdao/l/#tutorial","title":"Tutorial","text":"<p>A graph is a sub-cycle graph, if every connected component is either a single vertex or a chain. Of course, if this graph is actually a big cycle, it is also a sub-cycle graph. Let's first deal with some special cases:</p> <ul> <li>\\(m = 0\\), these is only one such graph.</li> <li>\\(m &gt; n\\), no solution.</li> <li>\\(m = n\\), all vertices must form a big cycle. Without loss of generality, let vertex \\(1\\) be the \"beginning\" of the cycle, it is not hard to calculate that there are \\(\\frac{(n - 1)!}{2}\\) ways to form a cycle. We divide \\(2\\) here because the cycle is not directional.</li> </ul> <p>What remains is the case where \\(1 \\le m &lt; n\\). Because there is no cycle in each connected component, we have \\((n - m)\\) connected components.</p> <p>We enumerate \\(i\\) from \\(1\\) to \\((n - m)\\), indicating that there are \\(i\\) chains in these connected components (that is to say, there are \\((n - m - i)\\) single vertex), and we choose \\(2i\\) vertices as the endpoints of the chains. The number of ways to divide \\(2i\\) vertices into \\(i\\) groups where each group has exactly \\(2\\) vertices (that is, the number of ways to put \\(2i\\) different balls into \\(i\\) indistinguishable boxes) can be calculated as</p> \\[ \\prod\\limits_{k=1}^i (2k - 1) \\] <p>You can imagine the grouping process like this: after sorting the \\(2i\\) vertices, each time group the smallest vertex and another vertex together. Thus the number of ways is \\((2i - 1) \\times (2i - 3) \\times \\cdots\\).</p> <p>Next, we need to distribute all vertices, except the vertices which form a connected component by themselves and the endpoints of the chains, into the chains. Because the order of vertices in a chain is crucial, we first choose a permutation of the vertices, and then divide them into \\(i\\) groups where empty groups are allowed (that is, insert \\((i - 1)\\) partitions among \\((m - i)\\) balls). The number of ways can be calculated as</p> \\[ (m - i)! \\times \\binom{m - 1}{i - 1} \\] <p>So the final answer is</p> \\[ \\sum\\limits_{i=1}^{n-m} \\binom{n}{n - m - i} \\times (m - i)! \\times \\binom{m - 1}{i - 1} \\times \\binom{m + i}{2i} \\times \\prod\\limits_{k=1}^i (2k - 1) \\] <p>The time complexity is \\(\\mathcal{O}(n)\\).</p>"},{"location":"en/2018-icpc-qingdao/l/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MOD ((int) 1e9 + 7)\nusing namespace std;\n\nint n;\nlong long ans, m;\n\nlong long fac[MAXN + 10], ifac[MAXN + 10];\n\nlong long C(int a, int b) {\n    return fac[a] * ifac[b] % MOD * ifac[a - b] % MOD;\n}\n\nvoid solve() {\n    scanf(\"%d%lld\", &amp;n, &amp;m);\n    if (m == 0) printf(\"1\\n\");\n    else if (m &gt; n) printf(\"0\\n\");\n    else if (m == n) printf(\"%lld\\n\", fac[n - 1] * ifac[2] % MOD);\n    else {\n        ans = 0;\n        // f is the \\prod in the tutorial\n        long long f = 1;\n        for (int i = 1; i &lt;= n - m; i++) {\n            if (m + i &lt; i * 2) continue;\n            long long t = C(m + i, i * 2) * f % MOD;\n            f = f * (i * 2 + 1) % MOD;\n            t = t * fac[m - i] % MOD;\n            t = t * C(m - 1, i - 1) % MOD;\n            ans = (ans + C(n, n - m - i) * t) % MOD;\n        }\n        printf(\"%lld\\n\", ans);\n    }\n}\n\nint main() {\n    fac[0] = 1;\n    for (int i = 1; i &lt;= MAXN; i++) fac[i] = fac[i - 1] * i % MOD;\n    ifac[0] = ifac[1] = 1;\n    for (int i = 2; i &lt;= MAXN; i++) ifac[i] = (MOD - MOD / i) * ifac[MOD % i] % MOD;\n    for (int i = 2; i &lt;= MAXN; i++) ifac[i] = ifac[i - 1] * ifac[i] % MOD;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao/m/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest Team AC Ratio372/373 (99.7%)"},{"location":"en/2018-icpc-qingdao/m/#tutorial","title":"Tutorial","text":"<p>Notice that</p> <ul> <li>When \\(x \\ge 2\\), the value of \\(f(x)\\) is about \\(\\log x\\).</li> <li>When \\(x \\le 1\\), \\(g^k(x)\\) alternates between \\(0\\) and \\(1\\).</li> </ul> <p>So we can directly calculate the first few iterations of \\(f(x)\\), until \\(f(x)\\) becomes \\(0\\) or \\(1\\). We then decide the answer by checking whether the remaining number of iterations is odd or even.</p> <p>The time complexity is \\(\\mathcal{O}(\\log x)\\)\u3002</p>"},{"location":"en/2018-icpc-qingdao/m/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint f[] = {1, 0, 0, 0, 1, 0, 1, 0, 2, 1};\n\nvoid solve() {\n    int x, K;\n    scanf(\"%d%d\", &amp;x, &amp;K);\n    // directly calculate the first few iterations,\n    // until f(x) becomes less than or equal to 1 or the number of iterations is exhausted\n    while (x &gt; 1 &amp;&amp; K &gt; 0) {\n        int t = 0;\n        for (; x; x /= 10) t += f[x % 10];\n        x = t;\n        K--;\n    }\n    if (K &gt; 0) {\n        // iteration is not completed\n        // decide the answer by checking whether the remaining number of iterations is odd or even\n        if (K &amp; 1) printf(\"%d\\n\", x ^ 1);\n        else printf(\"%d\\n\", x);\n    } else {\n        // iteration is completed, output the answer directly\n        printf(\"%d\\n\", x);\n    }\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao-online/a/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest, Online Team AC Ratio1492/1550 (96.3%)"},{"location":"en/2018-icpc-qingdao-online/a/#tutorial","title":"Tutorial","text":"<p>The maximum number of consecutive PERFECTs is obviously \\(m\\).</p> <p>Binary search for the minimum number of consecutive PERFECTs, denoted as \\(x\\). Then, at least one NON-PERFECT must be inserted between every \\(x\\) PERFECTs. Calculate whether the total length is less than or equal to \\(n\\).</p> <p>The complexity is \\(\\mathcal{O}(\\log m)\\).</p>"},{"location":"en/2018-icpc-qingdao-online/a/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint n, m;\n\nint calc(int lim) {\n    // if m is divided by lim\n    // there is no need to insert a NON-PERFECT after the last group of PERFECTS\n    if (m % lim == 0) return m / lim * (lim + 1) - 1;\n    else return m / lim * (lim + 1) + m % lim;\n}\n\nvoid solve() {\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    // corner case: 0 PERFECT\n    if (m == 0) { printf(\"0 0\\n\"); return; }\n    // the maximum number of consecutive PERFECTs is obviously m\n    printf(\"%d \", m);\n\n    // binary search for the minimum number of consecutive PERFECTs\n    int head = 1, tail = m;\n    while (head &lt; tail) {\n        int mid = (head + tail) &gt;&gt; 1;\n        if (calc(mid) &lt;= n) tail = mid;\n        else head = mid + 1;\n    }\n    printf(\"%d\\n\", head);\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao-online/b/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest, Online Team AC Ratio147/1550 (9.5%)"},{"location":"en/2018-icpc-qingdao-online/b/#tutorial","title":"Tutorial","text":"<p>Let \\(\\text{cost}(v_i)\\) be the cost of vertex \\(v_i\\) before adding new red vertex. For the query \\(v_1, v_2, \\cdots, v_k\\), sort all vertices by cost in descending order. If no modifications are made, the maximum cost is \\(\\text{cost}(v_1)\\).</p> <p>In order the make the maximum cost less than \\(\\text{cost}(v_i)\\), the newly added red vertex must simultaneously affect the cost of vertices \\(v_1, v_2, \\cdots, v_i\\). To minimize the maximum cost, it is obvious that this red vertex should be placed at the lowest common ancestor (LCA) of \\(v_1, v_2, \\cdots, v_i\\). Let \\(d(v_i)\\) denote the distance from the root to node \\(v_i\\). Then, the maximum cost becomes</p> \\[ \\max\\begin{cases} \\max (d(v_1), d(v_2), \\cdots, d(v_i)) - d(\\text{lca}(v_1, v_2, \\cdots, v_i)) \\\\ \\text{cost}(v_{i + 1}) \\end{cases} \\] <p>Enumerate \\(i\\) from \\(1\\) to \\(k\\) and select the smallest maximum cost. If there are already other red vertices on the path from the LCA to a vertex \\(v_j\\), the value calculated by the above equation will certainly be greater than or equal to \\(\\text{cost}(v_j)\\), and it won't be better than the cost at \\(i = j - 1\\). Since we only care about the smallest maximum cost, this does not affect the final answer.</p> <p>The complexity is \\(\\mathcal{O}(n\\log n + \\sum k_i \\log \\sum k_i)\\).</p>"},{"location":"en/2018-icpc-qingdao-online/b/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e5)\n#define MAXP 20\nusing namespace std;\n\nint n, m, q;\nbool flag[MAXN + 10];\n\nvector&lt;int&gt; e[MAXN + 10], v[MAXN + 10];\n// dis[i]: distance from the root to vertex i\n// cost[i]: cost of vertex i without adding new red vertex\nlong long dis[MAXN + 10], cost[MAXN + 10];\n// maintain RMQ on the DFS sequence to calculate LCA\nint clk, bgn[MAXN + 10];\nint lg[MAXN * 2 + 10], f[MAXP][MAXN * 2 + 10];\n\nvoid dfs(int sn, int fa) {\n    f[0][++clk] = sn; bgn[sn] = clk;\n\n    for (int i = 0; i &lt; e[sn].size(); i++) {\n        int fn = e[sn][i];\n        if (fn == fa) continue;\n\n        dis[fn] = dis[sn] + v[sn][i];\n        if (flag[fn]) cost[fn] = 0;\n        else cost[fn] = cost[sn] + v[sn][i];\n\n        dfs(fn, sn);\n        f[0][++clk] = sn;\n    }\n}\n\n// RMQ pre-calculation\nvoid preLca() {\n    for (int p = 1; p &lt; MAXP; p++) for (int i = 1; i + (1 &lt;&lt; p) - 1 &lt;= clk; i++) {\n        int j = i + (1 &lt;&lt; (p - 1));\n        if (dis[f[p - 1][i]] &lt; dis[f[p - 1][j]]) f[p][i] = f[p - 1][i];\n        else f[p][i] = f[p - 1][j];\n    }\n}\n\n// calculate LCA of vertices x and y\nint lca(int x, int y) {\n    if (bgn[x] &gt; bgn[y]) swap(x, y);\n    int p = lg[bgn[y] - bgn[x] + 1];\n    int a = f[p][bgn[x]], b = f[p][bgn[y] - (1 &lt;&lt; p) + 1];\n    if (dis[a] &lt; dis[b]) return a;\n    else return b;\n}\n\nvoid solve() {\n    scanf(\"%d%d%d\", &amp;n, &amp;m, &amp;q);\n\n    memset(flag, 0, sizeof(bool) * (n + 3));\n    for (int i = 1; i &lt;= m; i++) {\n        int x; scanf(\"%d\", &amp;x);\n        flag[x] = true;\n    }\n\n    for (int i = 1; i &lt;= n; i++) e[i].clear(), v[i].clear();\n    for (int i = 1; i &lt; n; i++) {\n        int x, y, z; scanf(\"%d%d%d\", &amp;x, &amp;y, &amp;z);\n        e[x].push_back(y); v[x].push_back(z);\n        e[y].push_back(x); v[y].push_back(z);\n    }\n\n    clk = 0; dfs(1, 0);\n    preLca();\n\n    while (q--) {\n        vector&lt;int&gt; vec;\n        int t; scanf(\"%d\", &amp;t);\n        while (t--) {\n            int x; scanf(\"%d\", &amp;x);\n            vec.push_back(x);\n        }\n        vec.push_back(0);\n        sort(vec.begin(), vec.end(), [&amp;](int a, int b) {\n            return cost[a] &gt; cost[b];\n        });\n\n        int anc = vec[0];\n        long long mx = dis[vec[0]], ans = cost[vec[1]];\n        // enumerate how many vertices will the new red vertex affect\n        for (int i = 1; i + 1 &lt; vec.size(); i++) {\n            anc = lca(anc, vec[i]);\n            mx = max(mx, dis[vec[i]]);\n            ans = min(ans, max(mx - dis[anc], cost[vec[i + 1]]));\n        }\n        printf(\"%lld\\n\", ans);\n    }\n}\n\nint main() {\n    lg[1] = 0;\n    for (int i = 2; i &lt;= MAXN * 2; i++) lg[i] = lg[i &gt;&gt; 1] + 1;\n\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"},{"location":"en/2018-icpc-qingdao-online/c/#basic-information","title":"Basic Information","text":"ContestThe 2018 ICPC Asia Qingdao Regional Contest, Online Team AC Ratio971/1550 (62.6%)"},{"location":"en/2018-icpc-qingdao-online/c/#tutorial","title":"Tutorial","text":"<p>The computer's state consists of only two parts: the current line of code being executed and the value of \\(r\\). BFS through the states to determine if we can reach a state which tries to execute the \\((n + 1)\\)-th line of code. The complexity is \\(\\mathcal{O}(n \\times 2^p)\\), where \\(p = 8\\).</p>"},{"location":"en/2018-icpc-qingdao-online/c/#solution","title":"Solution","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\n#define MAXN ((int) 1e4)\n#define MAXR (1 &lt;&lt; 8)\nusing namespace std;\ntypedef pair&lt;int, int&gt; pii;\n\nint n;\nchar OP[MAXN + 10][5];\nint V[MAXN + 10], K[MAXN + 10];\n\nbool vis[MAXN + 10][MAXR];\n\nbool bfs() {\n    queue&lt;pii&gt; q;\n    for (int i = 1; i &lt;= n + 1; i++) for (int j = 0; j &lt; MAXR; j++) vis[i][j] = false;\n    q.push(pii(1, 0)); vis[1][0] = true;\n\n    while (!q.empty()) {\n        pii p = q.front(); q.pop();\n        int line = p.first, r = p.second;\n        if (line == n + 1) return true;\n\n        // simulate the command on the `line`-th line\n        int nxtLine = line + 1, nxtR = r;\n        if (OP[line][1] == 'd') {\n            nxtR = (r + V[line]) % MAXR;\n        } else if (OP[line][1] == 'e') {\n            if (r == V[line]) nxtLine = K[line];\n        } else if (OP[line][1] == 'n') {\n            if (r != V[line]) nxtLine = K[line];\n        } else if (OP[line][1] == 'l') {\n            if (r &lt; V[line]) nxtLine = K[line];\n        } else {\n            if (r &gt; V[line]) nxtLine = K[line];\n        }\n        if (vis[nxtLine][nxtR]) continue;\n        q.push(pii(nxtLine, nxtR)); vis[nxtLine][nxtR] = true;\n    }\n\n    return false;\n}\n\nvoid solve() {\n    scanf(\"%d\", &amp;n);\n    for (int i = 1; i &lt;= n; i++) {\n        scanf(\"%s\", OP[i]);\n        if (OP[i][1] == 'd') scanf(\"%d\", &amp;V[i]);\n        else scanf(\"%d%d\", &amp;V[i], &amp;K[i]);\n    }\n\n    if (bfs()) printf(\"Yes\\n\");\n    else printf(\"No\\n\");\n}\n\nint main() {\n    int tcase; scanf(\"%d\", &amp;tcase);\n    while (tcase--) solve();\n    return 0;\n}\n</code></pre>"}]}